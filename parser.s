
parser.o:     формат файла elf64-x86-64

Разделы:
Инд Имя           Размер    VMA               LMA               Файл      Вырав
  0 .group        00000008  0000000000000000  0000000000000000  00000040  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  1 .group        00000008  0000000000000000  0000000000000000  00000048  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  2 .group        00000008  0000000000000000  0000000000000000  00000050  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  3 .group        00000008  0000000000000000  0000000000000000  00000058  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  4 .group        00000008  0000000000000000  0000000000000000  00000060  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  5 .group        00000008  0000000000000000  0000000000000000  00000068  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  6 .group        00000008  0000000000000000  0000000000000000  00000070  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  7 .group        00000008  0000000000000000  0000000000000000  00000078  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  8 .group        00000008  0000000000000000  0000000000000000  00000080  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  9 .group        00000008  0000000000000000  0000000000000000  00000088  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 10 .group        00000008  0000000000000000  0000000000000000  00000090  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 11 .group        00000008  0000000000000000  0000000000000000  00000098  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 12 .group        00000008  0000000000000000  0000000000000000  000000a0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 13 .group        00000008  0000000000000000  0000000000000000  000000a8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 14 .group        00000008  0000000000000000  0000000000000000  000000b0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 15 .group        00000008  0000000000000000  0000000000000000  000000b8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 16 .group        00000008  0000000000000000  0000000000000000  000000c0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 17 .group        00000008  0000000000000000  0000000000000000  000000c8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 18 .group        00000008  0000000000000000  0000000000000000  000000d0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 19 .group        00000008  0000000000000000  0000000000000000  000000d8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 20 .group        00000008  0000000000000000  0000000000000000  000000e0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 21 .group        00000008  0000000000000000  0000000000000000  000000e8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 22 .group        00000008  0000000000000000  0000000000000000  000000f0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 23 .group        00000008  0000000000000000  0000000000000000  000000f8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 24 .group        00000008  0000000000000000  0000000000000000  00000100  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 25 .group        00000008  0000000000000000  0000000000000000  00000108  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 26 .group        00000008  0000000000000000  0000000000000000  00000110  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 27 .group        00000008  0000000000000000  0000000000000000  00000118  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 28 .group        00000008  0000000000000000  0000000000000000  00000120  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 29 .group        00000008  0000000000000000  0000000000000000  00000128  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 30 .group        00000008  0000000000000000  0000000000000000  00000130  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 31 .group        00000008  0000000000000000  0000000000000000  00000138  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 32 .group        0000000c  0000000000000000  0000000000000000  00000140  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 33 .group        0000000c  0000000000000000  0000000000000000  0000014c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 34 .group        00000008  0000000000000000  0000000000000000  00000158  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 35 .group        00000008  0000000000000000  0000000000000000  00000160  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 36 .group        00000008  0000000000000000  0000000000000000  00000168  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 37 .group        00000008  0000000000000000  0000000000000000  00000170  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 38 .group        0000000c  0000000000000000  0000000000000000  00000178  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 39 .group        00000008  0000000000000000  0000000000000000  00000184  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 40 .group        00000008  0000000000000000  0000000000000000  0000018c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 41 .group        00000008  0000000000000000  0000000000000000  00000194  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 42 .group        00000008  0000000000000000  0000000000000000  0000019c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 43 .group        00000008  0000000000000000  0000000000000000  000001a4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 44 .group        00000008  0000000000000000  0000000000000000  000001ac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 45 .group        00000008  0000000000000000  0000000000000000  000001b4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 46 .group        0000000c  0000000000000000  0000000000000000  000001bc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 47 .group        0000000c  0000000000000000  0000000000000000  000001c8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 48 .group        0000000c  0000000000000000  0000000000000000  000001d4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 49 .group        00000008  0000000000000000  0000000000000000  000001e0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 50 .group        00000008  0000000000000000  0000000000000000  000001e8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 51 .group        00000008  0000000000000000  0000000000000000  000001f0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 52 .group        00000008  0000000000000000  0000000000000000  000001f8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 53 .group        00000008  0000000000000000  0000000000000000  00000200  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 54 .group        00000008  0000000000000000  0000000000000000  00000208  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 55 .group        00000008  0000000000000000  0000000000000000  00000210  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 56 .group        00000008  0000000000000000  0000000000000000  00000218  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 57 .group        00000008  0000000000000000  0000000000000000  00000220  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 58 .group        00000008  0000000000000000  0000000000000000  00000228  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 59 .group        00000008  0000000000000000  0000000000000000  00000230  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 60 .group        00000008  0000000000000000  0000000000000000  00000238  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 61 .group        00000008  0000000000000000  0000000000000000  00000240  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 62 .group        00000008  0000000000000000  0000000000000000  00000248  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 63 .group        00000008  0000000000000000  0000000000000000  00000250  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 64 .group        00000008  0000000000000000  0000000000000000  00000258  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 65 .group        00000008  0000000000000000  0000000000000000  00000260  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 66 .group        00000008  0000000000000000  0000000000000000  00000268  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 67 .group        00000008  0000000000000000  0000000000000000  00000270  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 68 .group        00000008  0000000000000000  0000000000000000  00000278  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 69 .group        00000008  0000000000000000  0000000000000000  00000280  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 70 .group        00000008  0000000000000000  0000000000000000  00000288  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 71 .group        00000008  0000000000000000  0000000000000000  00000290  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 72 .group        00000008  0000000000000000  0000000000000000  00000298  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 73 .group        00000008  0000000000000000  0000000000000000  000002a0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 74 .group        00000008  0000000000000000  0000000000000000  000002a8  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 75 .group        0000000c  0000000000000000  0000000000000000  000002b0  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 76 .group        00000008  0000000000000000  0000000000000000  000002bc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 77 .group        00000008  0000000000000000  0000000000000000  000002c4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 78 .group        00000008  0000000000000000  0000000000000000  000002cc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 79 .group        00000008  0000000000000000  0000000000000000  000002d4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 80 .group        00000008  0000000000000000  0000000000000000  000002dc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 81 .group        00000008  0000000000000000  0000000000000000  000002e4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 82 .group        00000008  0000000000000000  0000000000000000  000002ec  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 83 .group        00000008  0000000000000000  0000000000000000  000002f4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 84 .group        00000008  0000000000000000  0000000000000000  000002fc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 85 .group        00000008  0000000000000000  0000000000000000  00000304  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 86 .group        00000008  0000000000000000  0000000000000000  0000030c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 87 .group        00000008  0000000000000000  0000000000000000  00000314  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 88 .group        00000008  0000000000000000  0000000000000000  0000031c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 89 .group        00000008  0000000000000000  0000000000000000  00000324  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 90 .group        00000008  0000000000000000  0000000000000000  0000032c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 91 .group        00000008  0000000000000000  0000000000000000  00000334  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 92 .group        00000008  0000000000000000  0000000000000000  0000033c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 93 .group        00000008  0000000000000000  0000000000000000  00000344  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 94 .group        00000008  0000000000000000  0000000000000000  0000034c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 95 .group        00000008  0000000000000000  0000000000000000  00000354  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 96 .group        00000008  0000000000000000  0000000000000000  0000035c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 97 .group        00000008  0000000000000000  0000000000000000  00000364  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 98 .group        00000008  0000000000000000  0000000000000000  0000036c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 99 .group        00000008  0000000000000000  0000000000000000  00000374  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
100 .group        00000008  0000000000000000  0000000000000000  0000037c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
101 .group        00000008  0000000000000000  0000000000000000  00000384  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
102 .group        00000008  0000000000000000  0000000000000000  0000038c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
103 .group        00000008  0000000000000000  0000000000000000  00000394  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
104 .group        00000008  0000000000000000  0000000000000000  0000039c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
105 .group        00000008  0000000000000000  0000000000000000  000003a4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
106 .group        00000008  0000000000000000  0000000000000000  000003ac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
107 .group        00000008  0000000000000000  0000000000000000  000003b4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
108 .group        00000008  0000000000000000  0000000000000000  000003bc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
109 .group        00000008  0000000000000000  0000000000000000  000003c4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
110 .group        00000008  0000000000000000  0000000000000000  000003cc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
111 .group        00000008  0000000000000000  0000000000000000  000003d4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
112 .group        00000008  0000000000000000  0000000000000000  000003dc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
113 .group        00000008  0000000000000000  0000000000000000  000003e4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
114 .group        00000008  0000000000000000  0000000000000000  000003ec  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
115 .group        00000008  0000000000000000  0000000000000000  000003f4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
116 .group        00000008  0000000000000000  0000000000000000  000003fc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
117 .group        00000008  0000000000000000  0000000000000000  00000404  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
118 .group        00000008  0000000000000000  0000000000000000  0000040c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
119 .group        00000008  0000000000000000  0000000000000000  00000414  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
120 .group        00000008  0000000000000000  0000000000000000  0000041c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
121 .group        00000008  0000000000000000  0000000000000000  00000424  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
122 .group        00000008  0000000000000000  0000000000000000  0000042c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
123 .group        00000008  0000000000000000  0000000000000000  00000434  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
124 .group        00000008  0000000000000000  0000000000000000  0000043c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
125 .group        00000008  0000000000000000  0000000000000000  00000444  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
126 .group        00000008  0000000000000000  0000000000000000  0000044c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
127 .group        00000008  0000000000000000  0000000000000000  00000454  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
128 .group        00000008  0000000000000000  0000000000000000  0000045c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
129 .group        00000008  0000000000000000  0000000000000000  00000464  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
130 .group        00000008  0000000000000000  0000000000000000  0000046c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
131 .group        00000008  0000000000000000  0000000000000000  00000474  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
132 .group        00000008  0000000000000000  0000000000000000  0000047c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
133 .group        00000008  0000000000000000  0000000000000000  00000484  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
134 .group        00000008  0000000000000000  0000000000000000  0000048c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
135 .group        00000008  0000000000000000  0000000000000000  00000494  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
136 .group        00000008  0000000000000000  0000000000000000  0000049c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
137 .group        00000008  0000000000000000  0000000000000000  000004a4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
138 .group        00000008  0000000000000000  0000000000000000  000004ac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
139 .group        00000008  0000000000000000  0000000000000000  000004b4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
140 .group        00000008  0000000000000000  0000000000000000  000004bc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
141 .group        00000008  0000000000000000  0000000000000000  000004c4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
142 .group        00000008  0000000000000000  0000000000000000  000004cc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
143 .group        00000008  0000000000000000  0000000000000000  000004d4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
144 .group        00000008  0000000000000000  0000000000000000  000004dc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
145 .group        00000008  0000000000000000  0000000000000000  000004e4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
146 .group        00000008  0000000000000000  0000000000000000  000004ec  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
147 .group        00000008  0000000000000000  0000000000000000  000004f4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
148 .group        00000008  0000000000000000  0000000000000000  000004fc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
149 .group        00000008  0000000000000000  0000000000000000  00000504  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
150 .group        00000008  0000000000000000  0000000000000000  0000050c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
151 .group        00000008  0000000000000000  0000000000000000  00000514  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
152 .group        00000008  0000000000000000  0000000000000000  0000051c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
153 .group        00000008  0000000000000000  0000000000000000  00000524  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
154 .group        00000008  0000000000000000  0000000000000000  0000052c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
155 .group        00000008  0000000000000000  0000000000000000  00000534  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
156 .group        00000008  0000000000000000  0000000000000000  0000053c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
157 .group        00000008  0000000000000000  0000000000000000  00000544  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
158 .group        00000008  0000000000000000  0000000000000000  0000054c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
159 .group        00000008  0000000000000000  0000000000000000  00000554  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
160 .group        00000008  0000000000000000  0000000000000000  0000055c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
161 .group        00000008  0000000000000000  0000000000000000  00000564  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
162 .group        00000008  0000000000000000  0000000000000000  0000056c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
163 .group        00000008  0000000000000000  0000000000000000  00000574  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
164 .group        00000008  0000000000000000  0000000000000000  0000057c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
165 .group        00000008  0000000000000000  0000000000000000  00000584  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
166 .group        00000008  0000000000000000  0000000000000000  0000058c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
167 .group        00000008  0000000000000000  0000000000000000  00000594  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
168 .group        00000008  0000000000000000  0000000000000000  0000059c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
169 .group        00000008  0000000000000000  0000000000000000  000005a4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
170 .group        00000008  0000000000000000  0000000000000000  000005ac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
171 .group        00000008  0000000000000000  0000000000000000  000005b4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
172 .group        00000008  0000000000000000  0000000000000000  000005bc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
173 .group        00000008  0000000000000000  0000000000000000  000005c4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
174 .group        00000008  0000000000000000  0000000000000000  000005cc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
175 .group        00000008  0000000000000000  0000000000000000  000005d4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
176 .group        00000008  0000000000000000  0000000000000000  000005dc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
177 .group        00000008  0000000000000000  0000000000000000  000005e4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
178 .group        00000008  0000000000000000  0000000000000000  000005ec  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
179 .group        00000008  0000000000000000  0000000000000000  000005f4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
180 .group        00000008  0000000000000000  0000000000000000  000005fc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
181 .group        00000008  0000000000000000  0000000000000000  00000604  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
182 .group        00000008  0000000000000000  0000000000000000  0000060c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
183 .group        00000008  0000000000000000  0000000000000000  00000614  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
184 .group        00000008  0000000000000000  0000000000000000  0000061c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
185 .group        00000008  0000000000000000  0000000000000000  00000624  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
186 .group        00000008  0000000000000000  0000000000000000  0000062c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
187 .group        00000008  0000000000000000  0000000000000000  00000634  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
188 .group        00000008  0000000000000000  0000000000000000  0000063c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
189 .group        00000008  0000000000000000  0000000000000000  00000644  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
190 .group        00000008  0000000000000000  0000000000000000  0000064c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
191 .group        00000008  0000000000000000  0000000000000000  00000654  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
192 .group        00000008  0000000000000000  0000000000000000  0000065c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
193 .group        00000008  0000000000000000  0000000000000000  00000664  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
194 .group        00000008  0000000000000000  0000000000000000  0000066c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
195 .group        00000008  0000000000000000  0000000000000000  00000674  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
196 .group        00000008  0000000000000000  0000000000000000  0000067c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
197 .group        00000008  0000000000000000  0000000000000000  00000684  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
198 .group        00000008  0000000000000000  0000000000000000  0000068c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
199 .group        00000008  0000000000000000  0000000000000000  00000694  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
200 .group        00000008  0000000000000000  0000000000000000  0000069c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
201 .group        00000008  0000000000000000  0000000000000000  000006a4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
202 .group        00000008  0000000000000000  0000000000000000  000006ac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
203 .group        00000008  0000000000000000  0000000000000000  000006b4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
204 .group        00000008  0000000000000000  0000000000000000  000006bc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
205 .group        00000008  0000000000000000  0000000000000000  000006c4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
206 .group        00000008  0000000000000000  0000000000000000  000006cc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
207 .group        00000008  0000000000000000  0000000000000000  000006d4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
208 .group        00000008  0000000000000000  0000000000000000  000006dc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
209 .group        00000008  0000000000000000  0000000000000000  000006e4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
210 .group        00000008  0000000000000000  0000000000000000  000006ec  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
211 .group        00000008  0000000000000000  0000000000000000  000006f4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
212 .group        00000008  0000000000000000  0000000000000000  000006fc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
213 .group        00000008  0000000000000000  0000000000000000  00000704  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
214 .group        00000008  0000000000000000  0000000000000000  0000070c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
215 .group        00000008  0000000000000000  0000000000000000  00000714  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
216 .group        00000008  0000000000000000  0000000000000000  0000071c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
217 .group        00000008  0000000000000000  0000000000000000  00000724  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
218 .group        00000008  0000000000000000  0000000000000000  0000072c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
219 .group        00000008  0000000000000000  0000000000000000  00000734  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
220 .group        00000008  0000000000000000  0000000000000000  0000073c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
221 .group        00000008  0000000000000000  0000000000000000  00000744  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
222 .group        00000008  0000000000000000  0000000000000000  0000074c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
223 .group        00000008  0000000000000000  0000000000000000  00000754  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
224 .group        00000008  0000000000000000  0000000000000000  0000075c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
225 .group        00000008  0000000000000000  0000000000000000  00000764  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
226 .group        00000008  0000000000000000  0000000000000000  0000076c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
227 .group        00000008  0000000000000000  0000000000000000  00000774  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
228 .group        00000008  0000000000000000  0000000000000000  0000077c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
229 .group        00000008  0000000000000000  0000000000000000  00000784  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
230 .group        00000008  0000000000000000  0000000000000000  0000078c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
231 .group        00000008  0000000000000000  0000000000000000  00000794  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
232 .group        00000008  0000000000000000  0000000000000000  0000079c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
233 .group        00000008  0000000000000000  0000000000000000  000007a4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
234 .group        00000008  0000000000000000  0000000000000000  000007ac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
235 .group        00000008  0000000000000000  0000000000000000  000007b4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
236 .group        00000008  0000000000000000  0000000000000000  000007bc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
237 .group        00000008  0000000000000000  0000000000000000  000007c4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
238 .group        00000008  0000000000000000  0000000000000000  000007cc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
239 .group        00000008  0000000000000000  0000000000000000  000007d4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
240 .group        00000008  0000000000000000  0000000000000000  000007dc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
241 .group        00000008  0000000000000000  0000000000000000  000007e4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
242 .group        00000008  0000000000000000  0000000000000000  000007ec  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
243 .group        00000008  0000000000000000  0000000000000000  000007f4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
244 .group        00000008  0000000000000000  0000000000000000  000007fc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
245 .group        00000008  0000000000000000  0000000000000000  00000804  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
246 .group        00000008  0000000000000000  0000000000000000  0000080c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
247 .group        00000008  0000000000000000  0000000000000000  00000814  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
248 .group        00000008  0000000000000000  0000000000000000  0000081c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
249 .group        00000008  0000000000000000  0000000000000000  00000824  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
250 .group        00000008  0000000000000000  0000000000000000  0000082c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
251 .group        00000008  0000000000000000  0000000000000000  00000834  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
252 .group        00000008  0000000000000000  0000000000000000  0000083c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
253 .group        00000008  0000000000000000  0000000000000000  00000844  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
254 .group        00000008  0000000000000000  0000000000000000  0000084c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
255 .group        00000008  0000000000000000  0000000000000000  00000854  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
256 .group        00000008  0000000000000000  0000000000000000  0000085c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
257 .group        00000008  0000000000000000  0000000000000000  00000864  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
258 .group        00000008  0000000000000000  0000000000000000  0000086c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
259 .group        00000008  0000000000000000  0000000000000000  00000874  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
260 .group        00000008  0000000000000000  0000000000000000  0000087c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
261 .group        00000008  0000000000000000  0000000000000000  00000884  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
262 .group        00000008  0000000000000000  0000000000000000  0000088c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
263 .group        00000008  0000000000000000  0000000000000000  00000894  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
264 .group        00000008  0000000000000000  0000000000000000  0000089c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
265 .group        00000008  0000000000000000  0000000000000000  000008a4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
266 .group        00000008  0000000000000000  0000000000000000  000008ac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
267 .group        00000008  0000000000000000  0000000000000000  000008b4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
268 .group        00000008  0000000000000000  0000000000000000  000008bc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
269 .group        00000008  0000000000000000  0000000000000000  000008c4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
270 .group        00000008  0000000000000000  0000000000000000  000008cc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
271 .group        00000008  0000000000000000  0000000000000000  000008d4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
272 .group        00000008  0000000000000000  0000000000000000  000008dc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
273 .group        00000008  0000000000000000  0000000000000000  000008e4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
274 .group        00000008  0000000000000000  0000000000000000  000008ec  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
275 .group        00000008  0000000000000000  0000000000000000  000008f4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
276 .group        00000008  0000000000000000  0000000000000000  000008fc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
277 .group        00000008  0000000000000000  0000000000000000  00000904  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
278 .group        00000008  0000000000000000  0000000000000000  0000090c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
279 .group        00000008  0000000000000000  0000000000000000  00000914  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
280 .group        00000008  0000000000000000  0000000000000000  0000091c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
281 .group        00000008  0000000000000000  0000000000000000  00000924  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
282 .group        00000008  0000000000000000  0000000000000000  0000092c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
283 .group        00000008  0000000000000000  0000000000000000  00000934  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
284 .group        00000008  0000000000000000  0000000000000000  0000093c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
285 .group        00000008  0000000000000000  0000000000000000  00000944  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
286 .group        00000008  0000000000000000  0000000000000000  0000094c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
287 .group        00000008  0000000000000000  0000000000000000  00000954  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
288 .group        00000008  0000000000000000  0000000000000000  0000095c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
289 .group        00000008  0000000000000000  0000000000000000  00000964  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
290 .group        00000008  0000000000000000  0000000000000000  0000096c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
291 .group        00000008  0000000000000000  0000000000000000  00000974  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
292 .group        00000008  0000000000000000  0000000000000000  0000097c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
293 .group        00000008  0000000000000000  0000000000000000  00000984  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
294 .group        00000008  0000000000000000  0000000000000000  0000098c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
295 .group        00000008  0000000000000000  0000000000000000  00000994  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
296 .group        00000008  0000000000000000  0000000000000000  0000099c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
297 .group        00000008  0000000000000000  0000000000000000  000009a4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
298 .group        00000008  0000000000000000  0000000000000000  000009ac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
299 .group        00000008  0000000000000000  0000000000000000  000009b4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
300 .group        00000008  0000000000000000  0000000000000000  000009bc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
301 .group        00000008  0000000000000000  0000000000000000  000009c4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
302 .group        00000008  0000000000000000  0000000000000000  000009cc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
303 .group        00000008  0000000000000000  0000000000000000  000009d4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
304 .group        00000008  0000000000000000  0000000000000000  000009dc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
305 .group        00000008  0000000000000000  0000000000000000  000009e4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
306 .group        00000008  0000000000000000  0000000000000000  000009ec  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
307 .group        00000008  0000000000000000  0000000000000000  000009f4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
308 .group        00000008  0000000000000000  0000000000000000  000009fc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
309 .group        00000008  0000000000000000  0000000000000000  00000a04  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
310 .group        00000008  0000000000000000  0000000000000000  00000a0c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
311 .group        00000008  0000000000000000  0000000000000000  00000a14  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
312 .group        00000008  0000000000000000  0000000000000000  00000a1c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
313 .group        00000008  0000000000000000  0000000000000000  00000a24  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
314 .group        00000008  0000000000000000  0000000000000000  00000a2c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
315 .group        00000008  0000000000000000  0000000000000000  00000a34  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
316 .group        00000008  0000000000000000  0000000000000000  00000a3c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
317 .group        00000008  0000000000000000  0000000000000000  00000a44  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
318 .group        00000008  0000000000000000  0000000000000000  00000a4c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
319 .group        00000008  0000000000000000  0000000000000000  00000a54  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
320 .group        00000008  0000000000000000  0000000000000000  00000a5c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
321 .group        00000008  0000000000000000  0000000000000000  00000a64  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
322 .group        00000008  0000000000000000  0000000000000000  00000a6c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
323 .group        00000008  0000000000000000  0000000000000000  00000a74  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
324 .group        00000008  0000000000000000  0000000000000000  00000a7c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
325 .group        00000008  0000000000000000  0000000000000000  00000a84  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
326 .group        00000008  0000000000000000  0000000000000000  00000a8c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
327 .group        00000008  0000000000000000  0000000000000000  00000a94  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
328 .group        00000008  0000000000000000  0000000000000000  00000a9c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
329 .group        00000008  0000000000000000  0000000000000000  00000aa4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
330 .group        00000008  0000000000000000  0000000000000000  00000aac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
331 .group        00000008  0000000000000000  0000000000000000  00000ab4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
332 .group        00000008  0000000000000000  0000000000000000  00000abc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
333 .group        00000008  0000000000000000  0000000000000000  00000ac4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
334 .group        00000008  0000000000000000  0000000000000000  00000acc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
335 .group        00000008  0000000000000000  0000000000000000  00000ad4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
336 .group        00000008  0000000000000000  0000000000000000  00000adc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
337 .group        00000008  0000000000000000  0000000000000000  00000ae4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
338 .group        00000008  0000000000000000  0000000000000000  00000aec  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
339 .group        00000008  0000000000000000  0000000000000000  00000af4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
340 .group        00000008  0000000000000000  0000000000000000  00000afc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
341 .group        00000008  0000000000000000  0000000000000000  00000b04  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
342 .group        00000008  0000000000000000  0000000000000000  00000b0c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
343 .group        00000008  0000000000000000  0000000000000000  00000b14  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
344 .group        00000008  0000000000000000  0000000000000000  00000b1c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
345 .group        00000008  0000000000000000  0000000000000000  00000b24  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
346 .group        00000008  0000000000000000  0000000000000000  00000b2c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
347 .group        00000008  0000000000000000  0000000000000000  00000b34  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
348 .group        00000008  0000000000000000  0000000000000000  00000b3c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
349 .group        00000008  0000000000000000  0000000000000000  00000b44  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
350 .group        00000008  0000000000000000  0000000000000000  00000b4c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
351 .group        00000008  0000000000000000  0000000000000000  00000b54  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
352 .group        00000008  0000000000000000  0000000000000000  00000b5c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
353 .group        00000008  0000000000000000  0000000000000000  00000b64  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
354 .group        00000008  0000000000000000  0000000000000000  00000b6c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
355 .group        00000008  0000000000000000  0000000000000000  00000b74  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
356 .group        00000008  0000000000000000  0000000000000000  00000b7c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
357 .group        00000008  0000000000000000  0000000000000000  00000b84  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
358 .group        00000008  0000000000000000  0000000000000000  00000b8c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
359 .group        00000008  0000000000000000  0000000000000000  00000b94  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
360 .group        00000008  0000000000000000  0000000000000000  00000b9c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
361 .group        00000008  0000000000000000  0000000000000000  00000ba4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
362 .group        00000008  0000000000000000  0000000000000000  00000bac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
363 .group        00000008  0000000000000000  0000000000000000  00000bb4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
364 .group        00000008  0000000000000000  0000000000000000  00000bbc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
365 .group        00000008  0000000000000000  0000000000000000  00000bc4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
366 .group        00000008  0000000000000000  0000000000000000  00000bcc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
367 .group        00000008  0000000000000000  0000000000000000  00000bd4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
368 .group        00000008  0000000000000000  0000000000000000  00000bdc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
369 .group        00000008  0000000000000000  0000000000000000  00000be4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
370 .group        00000008  0000000000000000  0000000000000000  00000bec  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
371 .group        00000008  0000000000000000  0000000000000000  00000bf4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
372 .group        00000008  0000000000000000  0000000000000000  00000bfc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
373 .group        00000008  0000000000000000  0000000000000000  00000c04  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
374 .group        00000008  0000000000000000  0000000000000000  00000c0c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
375 .group        00000008  0000000000000000  0000000000000000  00000c14  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
376 .group        00000008  0000000000000000  0000000000000000  00000c1c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
377 .group        00000008  0000000000000000  0000000000000000  00000c24  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
378 .group        00000008  0000000000000000  0000000000000000  00000c2c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
379 .group        00000008  0000000000000000  0000000000000000  00000c34  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
380 .group        00000008  0000000000000000  0000000000000000  00000c3c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
381 .group        00000008  0000000000000000  0000000000000000  00000c44  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
382 .group        00000008  0000000000000000  0000000000000000  00000c4c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
383 .group        00000008  0000000000000000  0000000000000000  00000c54  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
384 .group        00000008  0000000000000000  0000000000000000  00000c5c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
385 .group        00000008  0000000000000000  0000000000000000  00000c64  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
386 .group        00000008  0000000000000000  0000000000000000  00000c6c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
387 .group        00000008  0000000000000000  0000000000000000  00000c74  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
388 .group        00000008  0000000000000000  0000000000000000  00000c7c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
389 .group        00000008  0000000000000000  0000000000000000  00000c84  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
390 .group        00000008  0000000000000000  0000000000000000  00000c8c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
391 .group        00000008  0000000000000000  0000000000000000  00000c94  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
392 .group        00000008  0000000000000000  0000000000000000  00000c9c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
393 .group        00000008  0000000000000000  0000000000000000  00000ca4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
394 .group        00000008  0000000000000000  0000000000000000  00000cac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
395 .group        00000008  0000000000000000  0000000000000000  00000cb4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
396 .group        00000008  0000000000000000  0000000000000000  00000cbc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
397 .group        00000008  0000000000000000  0000000000000000  00000cc4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
398 .group        00000008  0000000000000000  0000000000000000  00000ccc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
399 .group        00000008  0000000000000000  0000000000000000  00000cd4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
400 .group        00000008  0000000000000000  0000000000000000  00000cdc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
401 .group        00000008  0000000000000000  0000000000000000  00000ce4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
402 .group        00000008  0000000000000000  0000000000000000  00000cec  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
403 .group        00000008  0000000000000000  0000000000000000  00000cf4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
404 .group        00000008  0000000000000000  0000000000000000  00000cfc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
405 .group        00000008  0000000000000000  0000000000000000  00000d04  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
406 .group        00000008  0000000000000000  0000000000000000  00000d0c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
407 .group        00000008  0000000000000000  0000000000000000  00000d14  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
408 .group        00000008  0000000000000000  0000000000000000  00000d1c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
409 .group        00000008  0000000000000000  0000000000000000  00000d24  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
410 .group        00000008  0000000000000000  0000000000000000  00000d2c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
411 .group        00000008  0000000000000000  0000000000000000  00000d34  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
412 .group        00000008  0000000000000000  0000000000000000  00000d3c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
413 .group        00000008  0000000000000000  0000000000000000  00000d44  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
414 .group        00000008  0000000000000000  0000000000000000  00000d4c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
415 .group        00000008  0000000000000000  0000000000000000  00000d54  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
416 .group        00000008  0000000000000000  0000000000000000  00000d5c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
417 .group        00000008  0000000000000000  0000000000000000  00000d64  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
418 .group        00000008  0000000000000000  0000000000000000  00000d6c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
419 .group        00000008  0000000000000000  0000000000000000  00000d74  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
420 .group        00000008  0000000000000000  0000000000000000  00000d7c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
421 .group        00000008  0000000000000000  0000000000000000  00000d84  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
422 .group        00000008  0000000000000000  0000000000000000  00000d8c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
423 .group        00000008  0000000000000000  0000000000000000  00000d94  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
424 .group        00000008  0000000000000000  0000000000000000  00000d9c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
425 .group        00000008  0000000000000000  0000000000000000  00000da4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
426 .group        00000008  0000000000000000  0000000000000000  00000dac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
427 .group        00000008  0000000000000000  0000000000000000  00000db4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
428 .group        00000008  0000000000000000  0000000000000000  00000dbc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
429 .group        00000008  0000000000000000  0000000000000000  00000dc4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
430 .group        00000008  0000000000000000  0000000000000000  00000dcc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
431 .group        00000008  0000000000000000  0000000000000000  00000dd4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
432 .group        00000008  0000000000000000  0000000000000000  00000ddc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
433 .group        00000008  0000000000000000  0000000000000000  00000de4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
434 .text         00007fa5  0000000000000000  0000000000000000  00000dec  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
435 .data         00000000  0000000000000000  0000000000000000  00008d91  2**0
                  CONTENTS, ALLOC, LOAD, DATA
436 .bss          00000000  0000000000000000  0000000000000000  00008d91  2**0
                  ALLOC
437 .text._ZnwmPv 00000012  0000000000000000  0000000000000000  00008d91  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
438 .text._ZdlPvS_ 0000000f  0000000000000000  0000000000000000  00008da3  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
439 .text._Z7qt_noopv 00000007  0000000000000000  0000000000000000  00008db2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
440 .text._ZN5QFlagC2Ei 00000017  0000000000000000  0000000000000000  00008dba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
441 .text._ZNK5QFlagcviEv 00000010  0000000000000000  0000000000000000  00008dd2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
442 .text._ZN5QCharC2Ev 00000014  0000000000000000  0000000000000000  00008de2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
443 .text._ZN5QCharC2Ei 0000001a  0000000000000000  0000000000000000  00008df6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
444 .text._Zeq5QCharS_ 0000001c  0000000000000000  0000000000000000  00008e10  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
445 .text._ZN9QtPrivate8RefCount3refEv 00000041  0000000000000000  0000000000000000  00008e2c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
446 .text._ZN9QtPrivate8RefCount5derefEv 00000043  0000000000000000  0000000000000000  00008e6e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
447 .text._ZNK9QtPrivate8RefCount8isSharedEv 00000035  0000000000000000  0000000000000000  00008eb2  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
448 .rodata       0000061c  0000000000000000  0000000000000000  00008ee8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
449 .text._ZN10QArrayData4dataEv 00000063  0000000000000000  0000000000000000  00009504  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
450 .text._ZNK10QArrayData11detachFlagsEv 00000067  0000000000000000  0000000000000000  00009568  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
451 .text._ZN10QArrayData10sharedNullEv 0000000d  0000000000000000  0000000000000000  000095cf  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
452 .text._ZNK10QByteArray6lengthEv 00000014  0000000000000000  0000000000000000  000095dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
453 .text._ZN10QByteArrayC2Ev 0000001e  0000000000000000  0000000000000000  000095f0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
454 .text._ZN10QByteArrayD2Ev 00000034  0000000000000000  0000000000000000  0000960e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
455 .text._ZNK10QByteArray4sizeEv 00000014  0000000000000000  0000000000000000  00009642  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
456 .text._ZNK10QByteArray2atEi 00000060  0000000000000000  0000000000000000  00009656  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
457 .text._ZN10QByteArray6detachEv 0000006f  0000000000000000  0000000000000000  000096b6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
458 .text._ZN10QByteArrayC2ERKS_ 00000030  0000000000000000  0000000000000000  00009726  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
459 .text._ZN8QByteRefC2ER10QByteArrayi 00000027  0000000000000000  0000000000000000  00009756  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
460 .text._ZN8QByteRefaSEc 0000007f  0000000000000000  0000000000000000  0000977e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
461 .text._ZN10QByteArrayixEi 00000075  0000000000000000  0000000000000000  000097fe  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
462 .text._ZN10QByteArraypLEc 00000025  0000000000000000  0000000000000000  00009874  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
463 .text._ZN10QByteArraypLERKS_ 00000025  0000000000000000  0000000000000000  0000989a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
464 .text._ZNK7QString4sizeEv 00000014  0000000000000000  0000000000000000  000098c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
465 .text._ZN7QString6insertEiRKS_ 00000049  0000000000000000  0000000000000000  000098d4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
466 .text._ZN7QString7prependERKS_ 00000027  0000000000000000  0000000000000000  0000991e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
467 .text._ZN7QStringpLERKS_ 00000025  0000000000000000  0000000000000000  00009946  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
468 .text._ZN7QString8fromUtf8EPKci 0000006c  0000000000000000  0000000000000000  0000996b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
469 .text._ZN7QStringC2EPKc 00000047  0000000000000000  0000000000000000  000099d8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
470 .text._ZN7QStringaSEPKc 00000094  0000000000000000  0000000000000000  00009a20  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
471 .gcc_except_table._ZN7QStringaSEPKc 00000015  0000000000000000  0000000000000000  00009ab4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
472 .text._ZN7QString6appendEPKc 00000094  0000000000000000  0000000000000000  00009aca  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
473 .gcc_except_table._ZN7QString6appendEPKc 00000015  0000000000000000  0000000000000000  00009b5e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
474 .text._ZNK7QString6isNullEv 00000026  0000000000000000  0000000000000000  00009b74  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
475 .text._ZNK7QString6lengthEv 00000014  0000000000000000  0000000000000000  00009b9a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
476 .text._ZNK7QString7unicodeEv 0000001d  0000000000000000  0000000000000000  00009bae  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
477 .text._ZNK7QString9constDataEv 0000001d  0000000000000000  0000000000000000  00009bcc  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
478 .text._ZN7QString5clearEv 00000092  0000000000000000  0000000000000000  00009bea  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
479 .gcc_except_table._ZN7QString5clearEv 00000014  0000000000000000  0000000000000000  00009c7c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
480 .text._ZN7QStringC2ERKS_ 00000057  0000000000000000  0000000000000000  00009c90  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
481 .text._ZN8QCharRefC2ER7QStringi 00000027  0000000000000000  0000000000000000  00009ce8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
482 .text._ZNK8QCharRefcv5QCharEv 0000008c  0000000000000000  0000000000000000  00009d10  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
483 .text._ZN7QStringC2Ev 0000001e  0000000000000000  0000000000000000  00009d9c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
484 .text._ZN7QStringD2Ev 00000034  0000000000000000  0000000000000000  00009dba  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
485 .text._ZN7QStringixEi 00000075  0000000000000000  0000000000000000  00009dee  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
486 .text._ZNK7QStringeqEPKc 00000053  0000000000000000  0000000000000000  00009e64  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
487 .text._ZplRK7QStringS1_ 00000085  0000000000000000  0000000000000000  00009eb7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
488 .gcc_except_table._ZplRK7QStringS1_ 00000010  0000000000000000  0000000000000000  00009f3c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
489 .text._ZplRK7QStringPKc 000000ba  0000000000000000  0000000000000000  00009f4c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
490 .gcc_except_table._ZplRK7QStringPKc 0000001b  0000000000000000  0000000000000000  0000a006  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
491 .text._ZplPKcRK7QString 0000008a  0000000000000000  0000000000000000  0000a021  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
492 .gcc_except_table._ZplPKcRK7QString 00000010  0000000000000000  0000000000000000  0000a0ab  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
493 .text._ZN10QStringRefD2Ev 0000000b  0000000000000000  0000000000000000  0000a0bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
494 .text._ZNK10QStringRef4sizeEv 00000011  0000000000000000  0000000000000000  0000a0c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
495 .text._ZNK10QStringRef7unicodeEv 0000004a  0000000000000000  0000000000000000  0000a0da  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
496 .text._ZNK10QStringRef9constDataEv 0000001a  0000000000000000  0000000000000000  0000a124  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
497 .text._ZNK10QStringRef6isNullEv 00000039  0000000000000000  0000000000000000  0000a13e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
498 .text._ZNK10QStringRefeqEPKc 00000053  0000000000000000  0000000000000000  0000a178  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
499 .text._ZN9QListData7disposeEv 0000001e  0000000000000000  0000000000000000  0000a1cc  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
500 .text._ZNK9QListData4sizeEv 00000022  0000000000000000  0000000000000000  0000a1ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
501 .text._ZNK9QListData7isEmptyEv 00000023  0000000000000000  0000000000000000  0000a20c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
502 .text._ZNK9QListData2atEi 00000034  0000000000000000  0000000000000000  0000a230  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
503 .text._ZNK9QListData5beginEv 00000028  0000000000000000  0000000000000000  0000a264  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
504 .text._ZNK9QListData3endEv 00000028  0000000000000000  0000000000000000  0000a28c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
505 .text._ZN19QListSpecialMethodsI10QByteArrayED2Ev 0000000b  0000000000000000  0000000000000000  0000a2b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
506 .text._ZN19QListSpecialMethodsI7QStringED2Ev 0000000b  0000000000000000  0000000000000000  0000a2c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
507 .text._ZN11QStringListC2Ev 0000001b  0000000000000000  0000000000000000  0000a2cc  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
508 .text._ZN11QStringListC2ERKS_ 00000026  0000000000000000  0000000000000000  0000a2e8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
509 .text._ZN11QStringListD2Ev 0000001b  0000000000000000  0000000000000000  0000a30e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
510 .text._ZN11QStringListlsERK7QString 00000029  0000000000000000  0000000000000000  0000a32a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
511 .text._ZN11QStringListlsERKS_ 00000029  0000000000000000  0000000000000000  0000a354  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
512 .text._ZN19QListSpecialMethodsI7QStringE4selfEv 0000000e  0000000000000000  0000000000000000  0000a37e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
513 .text._ZN19QListSpecialMethodsI7QStringE16removeDuplicatesEv 00000022  0000000000000000  0000000000000000  0000a38c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
514 .text._ZNK11QStringList8containsERK7QStringN2Qt15CaseSensitivityE 0000002b  0000000000000000  0000000000000000  0000a3ae  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
515 .text._ZNK12QMapNodeBase5colorEv 00000014  0000000000000000  0000000000000000  0000a3da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
516 .text._ZN12QMapNodeBase8setColorENS_5ColorE 00000040  0000000000000000  0000000000000000  0000a3ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
517 .text._ZN12QMapNodeBase9setParentEPS_ 0000002a  0000000000000000  0000000000000000  0000a42e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
518 .text._ZN9QHashData8willGrowEv 00000046  0000000000000000  0000000000000000  0000a458  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
519 .text._ZN9QHashData9hasShrunkEv 000000bb  0000000000000000  0000000000000000  0000a49e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
520 .gcc_except_table._ZN9QHashData9hasShrunkEv 00000018  0000000000000000  0000000000000000  0000a55c  2**2
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
521 .text._ZN9QHashData9firstNodeEv 0000005b  0000000000000000  0000000000000000  0000a574  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
522 .text._ZorN9QIODevice12OpenModeFlagES0_ 00000055  0000000000000000  0000000000000000  0000a5cf  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
523 .text._ZNK20QXmlStreamAttributes12hasAttributeERK7QString 00000071  0000000000000000  0000000000000000  0000a624  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
524 .text._ZNK16QXmlStreamReader8hasErrorEv 0000001f  0000000000000000  0000000000000000  0000a696  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
525 .text._ZN11QDataStreamlsEh 00000028  0000000000000000  0000000000000000  0000a6b6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
526 .gcc_except_table 00001384  0000000000000000  0000000000000000  0000a6e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
527 .text._ZN8VarTypesD2Ev 0000001b  0000000000000000  0000000000000000  0000ba64  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
528 .text._ZN11QStringListaSERKS_ 00000029  0000000000000000  0000000000000000  0000ba80  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
529 .text._ZN20QXmlStreamAttributesD2Ev 0000001b  0000000000000000  0000000000000000  0000baaa  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
530 .text._ZN4SemsD2Ev 000000bb  0000000000000000  0000000000000000  0000bac6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
531 .text._ZN6moduleD2Ev 000000e0  0000000000000000  0000000000000000  0000bb82  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
532 .text._ZNK19QBasicAtomicIntegerIiE4loadEv 00000019  0000000000000000  0000000000000000  0000bc62  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
533 .text._ZN19QBasicAtomicIntegerIiE3refEv 0000001a  0000000000000000  0000000000000000  0000bc7c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
534 .text._ZN19QBasicAtomicIntegerIiE5derefEv 0000001a  0000000000000000  0000000000000000  0000bc96  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
535 .text._ZN6QFlagsIN10QArrayData16AllocationOptionEEC2EMNS2_7PrivateEi 00000019  0000000000000000  0000000000000000  0000bcb0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
536 .text._ZN6QFlagsIN10QArrayData16AllocationOptionEEoRES1_ 00000022  0000000000000000  0000000000000000  0000bcca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
537 .text._ZN15QTypedArrayDataIcE10sharedNullEv 0000000b  0000000000000000  0000000000000000  0000bcec  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
538 .text._ZN15QTypedArrayDataIcE10deallocateEP10QArrayData 00000025  0000000000000000  0000000000000000  0000bcf7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
539 .text._ZN15QTypedArrayDataIcE4dataEv 0000001a  0000000000000000  0000000000000000  0000bd1c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
540 .text._ZN15QTypedArrayDataItE4dataEv 0000001a  0000000000000000  0000000000000000  0000bd36  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
541 .text._ZN15QTypedArrayDataItE10sharedNullEv 0000000b  0000000000000000  0000000000000000  0000bd50  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
542 .text._ZN15QTypedArrayDataItE10deallocateEP10QArrayData 00000025  0000000000000000  0000000000000000  0000bd5b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
543 .text._Z4qMaxIiERKT_S2_S2_ 00000028  0000000000000000  0000000000000000  0000bd80  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
544 .text._ZN19QListSpecialMethodsI7QStringEC2Ev 0000000b  0000000000000000  0000000000000000  0000bda8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
545 .text._ZN5QListI7QStringEC2Ev 00000029  0000000000000000  0000000000000000  0000bdb4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
546 .text._ZN5QListI7QStringED2Ev 00000068  0000000000000000  0000000000000000  0000bdde  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
547 .text._ZN5QListI7QStringE6appendERKS0_ 0000011b  0000000000000000  0000000000000000  0000be46  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
548 .text._ZN5QListI7QStringEC2ERKS1_ 000000de  0000000000000000  0000000000000000  0000bf62  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
549 .text._ZN5QListI7QStringEaSERKS1_ 000000a0  0000000000000000  0000000000000000  0000c040  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
550 .text._ZN5QListI7QStringEpLERKS1_ 0000012b  0000000000000000  0000000000000000  0000c0e0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
551 .text._ZN6QFlagsIN9QIODevice12OpenModeFlagEEC2ES1_ 00000017  0000000000000000  0000000000000000  0000c20c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
552 .text._ZNK6QFlagsIN9QIODevice12OpenModeFlagEEorES1_ 00000061  0000000000000000  0000000000000000  0000c224  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
553 .text._ZN7QVectorI19QXmlStreamAttributeED2Ev 0000003b  0000000000000000  0000000000000000  0000c286  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
554 .text._ZN5QHashI7QStringS0_E6insertERKS0_S3_ 0000010b  0000000000000000  0000000000000000  0000c2c2  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
555 .text._ZN19QListSpecialMethodsI10QByteArrayEC2Ev 0000000b  0000000000000000  0000000000000000  0000c3ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
556 .text._ZN5QListI10QByteArrayEC2Ev 00000029  0000000000000000  0000000000000000  0000c3da  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
557 .text._ZN5QListI10QByteArrayED2Ev 00000068  0000000000000000  0000000000000000  0000c404  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
558 .text._ZN5QListI7QStringE8iteratorC2Ev 00000016  0000000000000000  0000000000000000  0000c46c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
559 .text._ZN5QListI7QStringE5beginEv 00000040  0000000000000000  0000000000000000  0000c482  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
560 .text._ZN5QListI7QStringE3endEv 00000040  0000000000000000  0000000000000000  0000c4c2  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
561 .text._ZNK5QListI7QStringE8iteratorneERKS2_ 00000022  0000000000000000  0000000000000000  0000c502  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
562 .text._ZN5QListI7QStringE8iteratorppEv 00000020  0000000000000000  0000000000000000  0000c524  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
563 .text._ZNK5QListI7QStringE8iteratordeEv 0000001d  0000000000000000  0000000000000000  0000c544  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
564 .text._ZN4QMapI7QStringhE4takeERKS0_ 0000006b  0000000000000000  0000000000000000  0000c562  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
565 .text._ZN4QMapIhhE4takeERKh 0000006b  0000000000000000  0000000000000000  0000c5ce  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
566 .text._ZN5QListI10QByteArrayE6appendERKS0_ 0000011b  0000000000000000  0000000000000000  0000c63a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
567 .text._ZN4QMapI7QStringS0_E6insertERKS0_S3_ 0000017a  0000000000000000  0000000000000000  0000c756  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
568 .text._ZN4QMapI7QStringhE6insertERKS0_RKh 00000171  0000000000000000  0000000000000000  0000c8d0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
569 .text._ZN4QMapIhhE6insertERKhS2_ 00000171  0000000000000000  0000000000000000  0000ca42  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
570 .text._ZN5QListI7QStringE14const_iteratorC2Ev 00000016  0000000000000000  0000000000000000  0000cbb4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
571 .text._ZNK5QListI7QStringE10constBeginEv 00000034  0000000000000000  0000000000000000  0000cbca  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
572 .text._ZNK5QListI7QStringE8constEndEv 00000034  0000000000000000  0000000000000000  0000cbfe  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
573 .text._ZNK5QListI7QStringE14const_iteratorneERKS2_ 00000022  0000000000000000  0000000000000000  0000cc32  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
574 .text._ZN5QListI7QStringE14const_iteratorppEv 00000020  0000000000000000  0000000000000000  0000cc54  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
575 .text._ZNK5QListI7QStringE14const_iteratordeEv 0000001d  0000000000000000  0000000000000000  0000cc74  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
576 .text._ZNK4QMapI7QStringiE8containsERKS0_ 0000002e  0000000000000000  0000000000000000  0000cc92  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
577 .text._ZN4QMapI7QStringiE6insertERKS0_RKi 00000170  0000000000000000  0000000000000000  0000ccc0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
578 .text._ZN4QMapI7QStringiE5beginEv 00000062  0000000000000000  0000000000000000  0000ce30  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
579 .text._ZN4QMapI7QStringiE14const_iteratorC2ERKNS1_8iteratorE 0000001d  0000000000000000  0000000000000000  0000ce92  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
580 .text._ZN4QMapI7QStringiE3endEv 00000062  0000000000000000  0000000000000000  0000ceb0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
581 .text._ZNK4QMapI7QStringiE14const_iteratorneERKS2_ 00000022  0000000000000000  0000000000000000  0000cf12  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
582 .text._ZNK4QMapI7QStringiE14const_iterator3keyEv 00000015  0000000000000000  0000000000000000  0000cf34  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
583 .text._ZNK4QMapI7QStringiE14const_iterator5valueEv 00000015  0000000000000000  0000000000000000  0000cf4a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
584 .text._ZN4QMapI7QStringiEC2Ev 00000019  0000000000000000  0000000000000000  0000cf60  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
585 .text._ZN4QMapI7QStringiED2Ev 00000034  0000000000000000  0000000000000000  0000cf7a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
586 .text._ZNK5QListI7QStringE6lengthEv 0000001a  0000000000000000  0000000000000000  0000cfae  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
587 .text._ZN5QListI7QStringEixEi 00000071  0000000000000000  0000000000000000  0000cfc8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
588 .text._ZNK4QMapI7QStringiEixERKS0_ 00000053  0000000000000000  0000000000000000  0000d03a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
589 .text._ZNK5QListI7QStringE4sizeEv 0000001a  0000000000000000  0000000000000000  0000d08e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
590 .text._ZN5QHashI7QStringiED2Ev 0000003f  0000000000000000  0000000000000000  0000d0a8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
591 .text._ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_ 0000010b  0000000000000000  0000000000000000  0000d0e8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
592 .text._ZN5QHashI7QString11QStringListE8iteratorC2Ev 00000016  0000000000000000  0000000000000000  0000d1f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
593 .text._ZN5QHashI7QString11QStringListE5beginEv 00000062  0000000000000000  0000000000000000  0000d20a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
594 .text._ZN5QHashI7QString11QStringListE3endEv 00000057  0000000000000000  0000000000000000  0000d26c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
595 .text._ZNK5QHashI7QString11QStringListE8iteratorneERKS3_ 00000022  0000000000000000  0000000000000000  0000d2c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
596 .text._ZN5QHashI7QString11QStringListE8iteratorppEv 0000002b  0000000000000000  0000000000000000  0000d2e6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
597 .text._ZNK5QHashI7QString11QStringListE8iterator5valueEv 00000021  0000000000000000  0000000000000000  0000d312  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
598 .text._ZNK5QHashI7QString11QStringListE8iterator3keyEv 00000021  0000000000000000  0000000000000000  0000d334  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
599 .text._ZNK5QHashI7QStringS0_E5valueERKS0_ 00000089  0000000000000000  0000000000000000  0000d356  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
600 .text._ZNK5QListI7QStringE2atEi 00000065  0000000000000000  0000000000000000  0000d3e0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
601 .text._ZNK5QListI7QStringE7indexOfERKS0_i 0000010e  0000000000000000  0000000000000000  0000d446  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
602 .text._ZNK5QHashI7QString11QStringListE4sizeEv 00000014  0000000000000000  0000000000000000  0000d554  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
603 .text._ZNK5QListI6moduleE4sizeEv 0000001a  0000000000000000  0000000000000000  0000d568  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
604 .text._ZN5QListI6moduleEixEi 00000071  0000000000000000  0000000000000000  0000d582  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
605 .text._ZN5QHashI7QStringS0_E4takeERKS0_ 00000155  0000000000000000  0000000000000000  0000d5f4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
606 .text._ZN5QListI8variableED2Ev 00000068  0000000000000000  0000000000000000  0000d74a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
607 .text._ZN5QListI6moduleE6appendERKS0_ 0000010d  0000000000000000  0000000000000000  0000d7b2  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
608 .text._ZN15QBasicAtomicOpsILi4EE3refIiEEbRT_ 00000023  0000000000000000  0000000000000000  0000d8bf  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
609 .text._ZN15QBasicAtomicOpsILi4EE5derefIiEEbRT_ 00000023  0000000000000000  0000000000000000  0000d8e2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
610 .text._ZN5QListI7QStringE7deallocEPN9QListData4DataE 0000005e  0000000000000000  0000000000000000  0000d906  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
611 .text._ZN5QListI7QStringE18detach_helper_growEii 000001d5  0000000000000000  0000000000000000  0000d964  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
612 .text._ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_ 00000068  0000000000000000  0000000000000000  0000db3a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
613 .text._ZN5QListI7QStringE13node_destructEPNS1_4NodeE 0000001f  0000000000000000  0000000000000000  0000dba2  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
614 .text._ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_ 000000c9  0000000000000000  0000000000000000  0000dbc2  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
615 .text._ZN5QListI7QStringE4swapERS1_ 00000026  0000000000000000  0000000000000000  0000dc8c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
616 .text._ZNK5QListI7QStringE7isEmptyEv 0000001a  0000000000000000  0000000000000000  0000dcb2  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
617 .text._ZN6QFlagsIN9QIODevice12OpenModeFlagEEC2E5QFlag 00000026  0000000000000000  0000000000000000  0000dccc  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
618 .text._ZN7QVectorI19QXmlStreamAttributeE8freeDataEP15QTypedArrayDataIS0_E 0000005f  0000000000000000  0000000000000000  0000dcf2  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
619 .text._Z15qMapLessThanKeyI7QStringEbRKT_S3_ 00000025  0000000000000000  0000000000000000  0000dd51  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
620 .text._ZN5QHashI7QStringS0_E6detachEv 00000032  0000000000000000  0000000000000000  0000dd76  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
621 .text._ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj 00000139  0000000000000000  0000000000000000  0000dda8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
622 .text._ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E 000000c1  0000000000000000  0000000000000000  0000dee2  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
623 .text._ZN5QHashI7QStringS0_E8iteratorC2EPv 0000001a  0000000000000000  0000000000000000  0000dfa4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
624 .text._ZN5QListI10QByteArrayE7deallocEPN9QListData4DataE 0000005e  0000000000000000  0000000000000000  0000dfbe  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
625 .text._ZN5QListI7QStringE6detachEv 0000002e  0000000000000000  0000000000000000  0000e01c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
626 .text._ZN5QListI7QStringE8iteratorC2EPNS1_4NodeE 0000001a  0000000000000000  0000000000000000  0000e04a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
627 .text._ZN5QListI7QStringE4Node1tEv 0000000e  0000000000000000  0000000000000000  0000e064  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
628 .text._ZN4QMapI7QStringhE6detachEv 0000002e  0000000000000000  0000000000000000  0000e072  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
629 .text._ZNK8QMapDataI7QStringhE8findNodeERKS0_ 00000080  0000000000000000  0000000000000000  0000e0a0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
630 .text._ZN8QMapDataI7QStringhE10deleteNodeEP8QMapNodeIS0_hE 00000036  0000000000000000  0000000000000000  0000e120  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
631 .text._ZN4QMapIhhE6detachEv 0000002e  0000000000000000  0000000000000000  0000e156  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
632 .text._ZNK8QMapDataIhhE8findNodeERKh 00000080  0000000000000000  0000000000000000  0000e184  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
633 .text._ZN8QMapDataIhhE10deleteNodeEP8QMapNodeIhhE 00000026  0000000000000000  0000000000000000  0000e204  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
634 .text._ZN5QListI10QByteArrayE18detach_helper_growEii 000001d5  0000000000000000  0000000000000000  0000e22a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
635 .text._ZN5QListI10QByteArrayE14node_constructEPNS1_4NodeERKS0_ 00000068  0000000000000000  0000000000000000  0000e400  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
636 .text._ZN5QListI10QByteArrayE13node_destructEPNS1_4NodeE 0000001f  0000000000000000  0000000000000000  0000e468  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
637 .text._ZN4QMapI7QStringS0_E6detachEv 0000002e  0000000000000000  0000000000000000  0000e488  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
638 .text._ZNK8QMapDataI7QStringS0_E4rootEv 00000012  0000000000000000  0000000000000000  0000e4b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
639 .text._ZN8QMapDataI7QStringS0_E3endEv 00000012  0000000000000000  0000000000000000  0000e4c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
640 .text._ZNK8QMapNodeI7QStringS0_E8leftNodeEv 00000012  0000000000000000  0000000000000000  0000e4da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
641 .text._ZNK8QMapNodeI7QStringS0_E9rightNodeEv 00000012  0000000000000000  0000000000000000  0000e4ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
642 .text._ZN4QMapI7QStringS0_E8iteratorC2EP8QMapNodeIS0_S0_E 0000001a  0000000000000000  0000000000000000  0000e4fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
643 .text._ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb 00000133  0000000000000000  0000000000000000  0000e518  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
644 .text._ZNK8QMapDataI7QStringhE4rootEv 00000012  0000000000000000  0000000000000000  0000e64c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
645 .text._ZN8QMapDataI7QStringhE3endEv 00000012  0000000000000000  0000000000000000  0000e65e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
646 .text._ZNK8QMapNodeI7QStringhE8leftNodeEv 00000012  0000000000000000  0000000000000000  0000e670  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
647 .text._ZNK8QMapNodeI7QStringhE9rightNodeEv 00000012  0000000000000000  0000000000000000  0000e682  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
648 .text._ZN4QMapI7QStringhE8iteratorC2EP8QMapNodeIS0_hE 0000001a  0000000000000000  0000000000000000  0000e694  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
649 .text._ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb 000000ef  0000000000000000  0000000000000000  0000e6ae  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
650 .text._ZNK8QMapDataIhhE4rootEv 00000012  0000000000000000  0000000000000000  0000e79e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
651 .text._ZN8QMapDataIhhE3endEv 00000012  0000000000000000  0000000000000000  0000e7b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
652 .text._Z15qMapLessThanKeyIhEbRKT_S2_ 00000021  0000000000000000  0000000000000000  0000e7c2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
653 .text._ZNK8QMapNodeIhhE8leftNodeEv 00000012  0000000000000000  0000000000000000  0000e7e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
654 .text._ZNK8QMapNodeIhhE9rightNodeEv 00000012  0000000000000000  0000000000000000  0000e7f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
655 .text._ZN4QMapIhhE8iteratorC2EP8QMapNodeIhhE 0000001a  0000000000000000  0000000000000000  0000e808  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
656 .text._ZN8QMapDataIhhE10createNodeERKhS2_P8QMapNodeIhhEb 00000092  0000000000000000  0000000000000000  0000e822  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
657 .text._ZN5QListI7QStringE14const_iteratorC2EPNS1_4NodeE 0000001a  0000000000000000  0000000000000000  0000e8b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
658 .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE5beginEPS0_ 0000001e  0000000000000000  0000000000000000  0000e8ce  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
659 .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE3endEPS0_ 0000003c  0000000000000000  0000000000000000  0000e8ec  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
660 .text._ZNK8QMapDataI7QStringiE8findNodeERKS0_ 00000080  0000000000000000  0000000000000000  0000e928  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
661 .text._ZN4QMapI7QStringiE6detachEv 0000002e  0000000000000000  0000000000000000  0000e9a8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
662 .text._ZNK8QMapDataI7QStringiE4rootEv 00000012  0000000000000000  0000000000000000  0000e9d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
663 .text._ZN8QMapDataI7QStringiE3endEv 00000012  0000000000000000  0000000000000000  0000e9e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
664 .text._ZNK8QMapNodeI7QStringiE8leftNodeEv 00000012  0000000000000000  0000000000000000  0000e9fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
665 .text._ZNK8QMapNodeI7QStringiE9rightNodeEv 00000012  0000000000000000  0000000000000000  0000ea0c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
666 .text._ZN4QMapI7QStringiE8iteratorC2EP8QMapNodeIS0_iE 0000001a  0000000000000000  0000000000000000  0000ea1e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
667 .text._ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb 000000ee  0000000000000000  0000000000000000  0000ea38  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
668 .text._ZN8QMapDataI7QStringiE5beginEv 0000003a  0000000000000000  0000000000000000  0000eb26  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
669 .text._ZN8QMapDataI7QStringiE7destroyEv 00000061  0000000000000000  0000000000000000  0000eb60  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
670 .text._ZNK4QMapI7QStringiE5valueERKS0_RKi 00000046  0000000000000000  0000000000000000  0000ebc2  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
671 .text._ZN5QHashI7QStringiE8freeDataEP9QHashData 00000029  0000000000000000  0000000000000000  0000ec08  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
672 .text._ZN5QHashI7QString11QStringListE6detachEv 00000032  0000000000000000  0000000000000000  0000ec32  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
673 .text._ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj 00000139  0000000000000000  0000000000000000  0000ec64  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
674 .text._ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E 000000c1  0000000000000000  0000000000000000  0000ed9e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
675 .text._ZN5QHashI7QString11QStringListE8iteratorC2EPv 0000001a  0000000000000000  0000000000000000  0000ee60  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
676 .text._ZN5QHashI7QString11QStringListE8concreteEPN9QHashData4NodeE 0000000e  0000000000000000  0000000000000000  0000ee7a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
677 .text._ZN5QListI6moduleE6detachEv 0000002e  0000000000000000  0000000000000000  0000ee88  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
678 .text._ZN5QListI6moduleE4Node1tEv 00000011  0000000000000000  0000000000000000  0000eeb6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
679 .text._ZNK5QHashI7QStringS0_E7isEmptyEv 00000019  0000000000000000  0000000000000000  0000eec8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
680 .text._ZN5QHashI7QStringS0_E10deleteNodeEP9QHashNodeIS0_S0_E 00000035  0000000000000000  0000000000000000  0000eee2  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
681 .text._ZN19QListSpecialMethodsI8variableED2Ev 0000000b  0000000000000000  0000000000000000  0000ef18  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
682 .text._ZN5QListI8variableE7deallocEPN9QListData4DataE 0000005e  0000000000000000  0000000000000000  0000ef24  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
683 .text._ZN5QListI6moduleE18detach_helper_growEii 000001d5  0000000000000000  0000000000000000  0000ef82  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
684 .text._ZN6moduleC2ERKS_ 0000015f  0000000000000000  0000000000000000  0000f158  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
685 .text._ZN5QListI6moduleE14node_constructEPNS1_4NodeERKS0_ 0000005b  0000000000000000  0000000000000000  0000f2b8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
686 .text._ZN5QListI7QStringE13node_destructEPNS1_4NodeES3_ 00000034  0000000000000000  0000000000000000  0000f314  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
687 .text._Z5qSwapIPN9QListData4DataEEvRT_S4_ 00000026  0000000000000000  0000000000000000  0000f348  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
688 .text._ZN7QVectorI19QXmlStreamAttributeE8destructEPS0_S2_ 00000037  0000000000000000  0000000000000000  0000f36e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
689 .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE10deallocateEP10QArrayData 00000025  0000000000000000  0000000000000000  0000f3a5  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
690 .text._ZN5QHashI7QStringS0_E13detach_helperEv 0000007c  0000000000000000  0000000000000000  0000f3ca  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
691 .text._ZNK9QHashNodeI7QStringS0_E8same_keyEjRKS0_ 00000048  0000000000000000  0000000000000000  0000f446  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
692 .text._ZN5QHashI7QStringS0_E11alignOfNodeEv 00000051  0000000000000000  0000000000000000  0000f48e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
693 .text._ZN9QHashNodeI7QStringS0_EC2ERKS0_S3_jPS1_ 00000086  0000000000000000  0000000000000000  0000f4e0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
694 .text._ZN5QListI10QByteArrayE13node_destructEPNS1_4NodeES3_ 00000034  0000000000000000  0000000000000000  0000f566  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
695 .text._ZN5QListI7QStringE13detach_helperEv 00000027  0000000000000000  0000000000000000  0000f59a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
696 .text._ZN4QMapI7QStringhE13detach_helperEv 000000a7  0000000000000000  0000000000000000  0000f5c2  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
697 .text._ZN8QMapNodeI7QStringhE10lowerBoundERKS0_ 00000077  0000000000000000  0000000000000000  0000f66a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
698 .text._ZN4QMapIhhE13detach_helperEv 000000a7  0000000000000000  0000000000000000  0000f6e2  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
699 .text._ZN8QMapNodeIhhE10lowerBoundERKh 00000077  0000000000000000  0000000000000000  0000f78a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
700 .text._ZN5QListI10QByteArrayE9node_copyEPNS1_4NodeES3_S3_ 000000c9  0000000000000000  0000000000000000  0000f802  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
701 .text._ZN4QMapI7QStringS0_E13detach_helperEv 000000a7  0000000000000000  0000000000000000  0000f8cc  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
702 .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE4dataEv 0000001a  0000000000000000  0000000000000000  0000f974  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
703 .text._ZN8QMapNodeI7QStringiE10lowerBoundERKS0_ 00000077  0000000000000000  0000000000000000  0000f98e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
704 .text._ZN4QMapI7QStringiE13detach_helperEv 000000a7  0000000000000000  0000000000000000  0000fa06  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
705 .text._ZN8QMapNodeI7QStringiE14destroySubTreeEv 00000061  0000000000000000  0000000000000000  0000faae  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
706 .text._ZN9QHashNodeI7QStringiED2Ev 0000001f  0000000000000000  0000000000000000  0000fb10  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
707 .text._ZN5QHashI7QStringiE11deleteNode2EPN9QHashData4NodeE 00000023  0000000000000000  0000000000000000  0000fb30  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
708 .text._ZN5QHashI7QString11QStringListE13detach_helperEv 0000007c  0000000000000000  0000000000000000  0000fb54  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
709 .text._ZNK9QHashNodeI7QString11QStringListE8same_keyEjRKS0_ 00000048  0000000000000000  0000000000000000  0000fbd0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
710 .text._ZN5QHashI7QString11QStringListE11alignOfNodeEv 00000051  0000000000000000  0000000000000000  0000fc18  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
711 .text._ZN9QHashNodeI7QString11QStringListEC2ERKS0_RKS1_jPS2_ 00000086  0000000000000000  0000000000000000  0000fc6a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
712 .text._ZN5QListI6moduleE13detach_helperEv 00000027  0000000000000000  0000000000000000  0000fcf0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
713 .text._ZN9QHashNodeI7QStringS0_ED2Ev 00000054  0000000000000000  0000000000000000  0000fd18  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
714 .text._ZN5QHashI7QStringS0_E11deleteNode2EPN9QHashData4NodeE 00000023  0000000000000000  0000000000000000  0000fd6c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
715 .text._ZN8variableD2Ev 0000001f  0000000000000000  0000000000000000  0000fd90  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
716 .text._ZN5QListI8variableE13node_destructEPNS1_4NodeES3_ 0000004a  0000000000000000  0000000000000000  0000fdb0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
717 .text._ZN5QListI6moduleE9node_copyEPNS1_4NodeES3_S3_ 000000d2  0000000000000000  0000000000000000  0000fdfa  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
718 .text._ZN5QListI6moduleE13node_destructEPNS1_4NodeES3_ 0000004a  0000000000000000  0000000000000000  0000fecc  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
719 .text._ZN5QListI6moduleE7deallocEPN9QListData4DataE 0000005e  0000000000000000  0000000000000000  0000ff16  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
720 .text._ZN5QListI8variableEC2ERKS1_ 000000de  0000000000000000  0000000000000000  0000ff74  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
721 .text._ZSt4swapIPN9QListData4DataEEvRT_S4_ 00000033  0000000000000000  0000000000000000  00010052  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
722 .text._ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv 0000008c  0000000000000000  0000000000000000  00010086  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
723 .text._ZN5QHashI7QStringS0_E8freeDataEP9QHashData 00000029  0000000000000000  0000000000000000  00010112  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
724 .text._ZN5QListI7QStringE13detach_helperEi 000000d0  0000000000000000  0000000000000000  0001013c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
725 .text._ZN8QMapDataI7QStringhE6createEv 0000000b  0000000000000000  0000000000000000  0001020c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
726 .text._ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE 00000113  0000000000000000  0000000000000000  00010218  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
727 .text._ZN8QMapDataI7QStringhE7destroyEv 00000061  0000000000000000  0000000000000000  0001032c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
728 .text._ZN8QMapDataIhhE6createEv 0000000b  0000000000000000  0000000000000000  0001038d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
729 .text._ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE 00000113  0000000000000000  0000000000000000  00010398  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
730 .text._ZN8QMapDataIhhE7destroyEv 00000061  0000000000000000  0000000000000000  000104ac  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
731 .text._ZN8QMapDataI7QStringS0_E6createEv 0000000b  0000000000000000  0000000000000000  0001050d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
732 .text._ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E 00000113  0000000000000000  0000000000000000  00010518  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
733 .text._ZN8QMapDataI7QStringS0_E7destroyEv 00000061  0000000000000000  0000000000000000  0001062c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
734 .text._ZN8QMapDataI7QStringiE6createEv 0000000b  0000000000000000  0000000000000000  0001068d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
735 .text._ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE 00000113  0000000000000000  0000000000000000  00010698  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
736 .text._ZN5QHashI7QStringiE8concreteEPN9QHashData4NodeE 0000000e  0000000000000000  0000000000000000  000107ab  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
737 .text._ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv 0000008c  0000000000000000  0000000000000000  000107ba  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
738 .text._ZN9QHashNodeI7QString11QStringListED2Ev 00000054  0000000000000000  0000000000000000  00010846  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
739 .text._ZN5QHashI7QString11QStringListE11deleteNode2EPN9QHashData4NodeE 00000023  0000000000000000  0000000000000000  0001089a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
740 .text._ZN5QHashI7QString11QStringListE8freeDataEP9QHashData 00000029  0000000000000000  0000000000000000  000108be  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
741 .text._ZN5QListI6moduleE13detach_helperEi 000000d0  0000000000000000  0000000000000000  000108e8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
742 .text._ZN5QHashI7QStringS0_E8concreteEPN9QHashData4NodeE 0000000e  0000000000000000  0000000000000000  000109b8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
743 .text._ZN8variableC2ERKS_ 00000072  0000000000000000  0000000000000000  000109c6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
744 .text._ZN5QListI8variableE9node_copyEPNS1_4NodeES3_S3_ 000000d2  0000000000000000  0000000000000000  00010a38  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
745 .text._ZN8QMapNodeI7QStringhE14destroySubTreeEv 00000061  0000000000000000  0000000000000000  00010b0a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
746 .text._ZN8QMapNodeIhhE14destroySubTreeEv 0000000b  0000000000000000  0000000000000000  00010b6c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
747 .text._ZN8QMapNodeI7QStringS0_E14destroySubTreeEv 00000071  0000000000000000  0000000000000000  00010b78  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
748 .debug_info   00026601  0000000000000000  0000000000000000  00010be9  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
749 .debug_abbrev 00000cb1  0000000000000000  0000000000000000  000371ea  2**0
                  CONTENTS, READONLY, DEBUGGING
750 .debug_aranges 00001310  0000000000000000  0000000000000000  00037e9b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
751 .debug_ranges 00001920  0000000000000000  0000000000000000  000391ab  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
752 .debug_macro  00000d7c  0000000000000000  0000000000000000  0003aacb  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
753 .debug_macro  0000061c  0000000000000000  0000000000000000  0003b847  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
754 .debug_macro  00000022  0000000000000000  0000000000000000  0003be63  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
755 .debug_macro  00000136  0000000000000000  0000000000000000  0003be85  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
756 .debug_macro  00000010  0000000000000000  0000000000000000  0003bfbb  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
757 .debug_macro  00000275  0000000000000000  0000000000000000  0003bfcb  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
758 .debug_macro  0000016f  0000000000000000  0000000000000000  0003c240  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
759 .debug_macro  00000016  0000000000000000  0000000000000000  0003c3af  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
760 .debug_macro  00000035  0000000000000000  0000000000000000  0003c3c5  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
761 .debug_macro  00000058  0000000000000000  0000000000000000  0003c3fa  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
762 .debug_macro  000005b4  0000000000000000  0000000000000000  0003c452  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
763 .debug_macro  0000016d  0000000000000000  0000000000000000  0003ca06  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
764 .debug_macro  00000016  0000000000000000  0000000000000000  0003cb73  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
765 .debug_macro  0000009a  0000000000000000  0000000000000000  0003cb89  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
766 .debug_macro  00000016  0000000000000000  0000000000000000  0003cc23  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
767 .debug_macro  00000018  0000000000000000  0000000000000000  0003cc39  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
768 .debug_macro  00000032  0000000000000000  0000000000000000  0003cc51  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
769 .debug_macro  000000c0  0000000000000000  0000000000000000  0003cc83  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
770 .debug_macro  00000028  0000000000000000  0000000000000000  0003cd43  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
771 .debug_macro  00000012  0000000000000000  0000000000000000  0003cd6b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
772 .debug_macro  000000cf  0000000000000000  0000000000000000  0003cd7d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
773 .debug_macro  0000001c  0000000000000000  0000000000000000  0003ce4c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
774 .debug_macro  00000018  0000000000000000  0000000000000000  0003ce68  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
775 .debug_macro  0000006e  0000000000000000  0000000000000000  0003ce80  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
776 .debug_macro  00000082  0000000000000000  0000000000000000  0003ceee  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
777 .debug_macro  00000012  0000000000000000  0000000000000000  0003cf70  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
778 .debug_macro  00000012  0000000000000000  0000000000000000  0003cf82  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
779 .debug_macro  00000016  0000000000000000  0000000000000000  0003cf94  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
780 .debug_macro  00000035  0000000000000000  0000000000000000  0003cfaa  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
781 .debug_macro  00000052  0000000000000000  0000000000000000  0003cfdf  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
782 .debug_macro  0000004c  0000000000000000  0000000000000000  0003d031  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
783 .debug_macro  0000001c  0000000000000000  0000000000000000  0003d07d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
784 .debug_macro  00000028  0000000000000000  0000000000000000  0003d099  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
785 .debug_macro  0000005e  0000000000000000  0000000000000000  0003d0c1  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
786 .debug_macro  000000e2  0000000000000000  0000000000000000  0003d11f  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
787 .debug_macro  00000010  0000000000000000  0000000000000000  0003d201  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
788 .debug_macro  0000004c  0000000000000000  0000000000000000  0003d211  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
789 .debug_macro  00000022  0000000000000000  0000000000000000  0003d25d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
790 .debug_macro  00000068  0000000000000000  0000000000000000  0003d27f  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
791 .debug_macro  0000007f  0000000000000000  0000000000000000  0003d2e7  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
792 .debug_macro  0000003a  0000000000000000  0000000000000000  0003d366  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
793 .debug_macro  00000019  0000000000000000  0000000000000000  0003d3a0  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
794 .debug_macro  00000020  0000000000000000  0000000000000000  0003d3b9  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
795 .debug_macro  00000022  0000000000000000  0000000000000000  0003d3d9  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
796 .debug_macro  00000010  0000000000000000  0000000000000000  0003d3fb  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
797 .debug_macro  00000016  0000000000000000  0000000000000000  0003d40b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
798 .debug_macro  00000028  0000000000000000  0000000000000000  0003d421  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
799 .debug_macro  00000010  0000000000000000  0000000000000000  0003d449  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
800 .debug_macro  00000046  0000000000000000  0000000000000000  0003d459  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
801 .debug_macro  0000001c  0000000000000000  0000000000000000  0003d49f  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
802 .debug_macro  00000020  0000000000000000  0000000000000000  0003d4bb  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
803 .debug_macro  0000005a  0000000000000000  0000000000000000  0003d4db  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
804 .debug_macro  00000010  0000000000000000  0000000000000000  0003d535  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
805 .debug_macro  00000010  0000000000000000  0000000000000000  0003d545  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
806 .debug_macro  000000e4  0000000000000000  0000000000000000  0003d555  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
807 .debug_macro  0000025a  0000000000000000  0000000000000000  0003d639  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
808 .debug_macro  0000002d  0000000000000000  0000000000000000  0003d893  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
809 .debug_macro  00000016  0000000000000000  0000000000000000  0003d8c0  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
810 .debug_macro  00000050  0000000000000000  0000000000000000  0003d8d6  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
811 .debug_macro  00000019  0000000000000000  0000000000000000  0003d926  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
812 .debug_macro  00000011  0000000000000000  0000000000000000  0003d93f  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
813 .debug_macro  0000014b  0000000000000000  0000000000000000  0003d950  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
814 .debug_macro  0000001e  0000000000000000  0000000000000000  0003da9b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
815 .debug_macro  0000001c  0000000000000000  0000000000000000  0003dab9  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
816 .debug_macro  00000024  0000000000000000  0000000000000000  0003dad5  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
817 .debug_macro  00000016  0000000000000000  0000000000000000  0003daf9  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
818 .debug_macro  00000018  0000000000000000  0000000000000000  0003db0f  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
819 .debug_macro  00000019  0000000000000000  0000000000000000  0003db27  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
820 .debug_macro  00000058  0000000000000000  0000000000000000  0003db40  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
821 .debug_macro  00000016  0000000000000000  0000000000000000  0003db98  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
822 .debug_macro  0000001c  0000000000000000  0000000000000000  0003dbae  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
823 .debug_macro  00000016  0000000000000000  0000000000000000  0003dbca  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
824 .debug_macro  00000022  0000000000000000  0000000000000000  0003dbe0  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
825 .debug_macro  00000043  0000000000000000  0000000000000000  0003dc02  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
826 .debug_macro  0000003c  0000000000000000  0000000000000000  0003dc45  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
827 .debug_macro  00000173  0000000000000000  0000000000000000  0003dc81  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
828 .debug_macro  00000012  0000000000000000  0000000000000000  0003ddf4  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
829 .debug_macro  00000010  0000000000000000  0000000000000000  0003de06  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
830 .debug_macro  00000058  0000000000000000  0000000000000000  0003de16  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
831 .debug_macro  000000b4  0000000000000000  0000000000000000  0003de6e  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
832 .debug_macro  00000016  0000000000000000  0000000000000000  0003df22  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
833 .debug_macro  00000010  0000000000000000  0000000000000000  0003df38  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
834 .debug_macro  00000037  0000000000000000  0000000000000000  0003df48  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
835 .debug_macro  00000058  0000000000000000  0000000000000000  0003df7f  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
836 .debug_macro  00000011  0000000000000000  0000000000000000  0003dfd7  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
837 .debug_macro  00000016  0000000000000000  0000000000000000  0003dfe8  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
838 .debug_macro  00000010  0000000000000000  0000000000000000  0003dffe  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
839 .debug_macro  00000010  0000000000000000  0000000000000000  0003e00e  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
840 .debug_macro  00000022  0000000000000000  0000000000000000  0003e01e  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
841 .debug_macro  00000122  0000000000000000  0000000000000000  0003e040  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
842 .debug_macro  0000008e  0000000000000000  0000000000000000  0003e162  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
843 .debug_macro  00000016  0000000000000000  0000000000000000  0003e1f0  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
844 .debug_macro  00000058  0000000000000000  0000000000000000  0003e206  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
845 .debug_macro  000000fa  0000000000000000  0000000000000000  0003e25e  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
846 .debug_macro  00000030  0000000000000000  0000000000000000  0003e358  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
847 .debug_macro  000000c1  0000000000000000  0000000000000000  0003e388  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
848 .debug_macro  0000004d  0000000000000000  0000000000000000  0003e449  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
849 .debug_macro  00000010  0000000000000000  0000000000000000  0003e496  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
850 .debug_macro  00000019  0000000000000000  0000000000000000  0003e4a6  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
851 .debug_macro  00000020  0000000000000000  0000000000000000  0003e4bf  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
852 .debug_macro  00000018  0000000000000000  0000000000000000  0003e4df  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
853 .debug_macro  00000023  0000000000000000  0000000000000000  0003e4f7  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
854 .debug_macro  00000010  0000000000000000  0000000000000000  0003e51a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
855 .debug_macro  00000016  0000000000000000  0000000000000000  0003e52a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
856 .debug_macro  00000076  0000000000000000  0000000000000000  0003e540  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
857 .debug_macro  00000016  0000000000000000  0000000000000000  0003e5b6  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
858 .debug_macro  00000025  0000000000000000  0000000000000000  0003e5cc  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
859 .debug_macro  000000de  0000000000000000  0000000000000000  0003e5f1  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
860 .debug_macro  0000001c  0000000000000000  0000000000000000  0003e6cf  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
861 .debug_macro  00000058  0000000000000000  0000000000000000  0003e6eb  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
862 .debug_macro  00000088  0000000000000000  0000000000000000  0003e743  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
863 .debug_macro  00000076  0000000000000000  0000000000000000  0003e7cb  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
864 .debug_macro  00000010  0000000000000000  0000000000000000  0003e841  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
865 .debug_macro  00000041  0000000000000000  0000000000000000  0003e851  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
866 .debug_macro  000000ee  0000000000000000  0000000000000000  0003e892  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
867 .debug_macro  000000fc  0000000000000000  0000000000000000  0003e980  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
868 .debug_macro  00000010  0000000000000000  0000000000000000  0003ea7c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
869 .debug_macro  000000e5  0000000000000000  0000000000000000  0003ea8c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
870 .debug_macro  00000012  0000000000000000  0000000000000000  0003eb71  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
871 .debug_macro  0000001f  0000000000000000  0000000000000000  0003eb83  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
872 .debug_macro  00000016  0000000000000000  0000000000000000  0003eba2  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
873 .debug_macro  00000010  0000000000000000  0000000000000000  0003ebb8  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
874 .debug_macro  00000016  0000000000000000  0000000000000000  0003ebc8  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
875 .debug_macro  00000022  0000000000000000  0000000000000000  0003ebde  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
876 .debug_macro  00000016  0000000000000000  0000000000000000  0003ec00  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
877 .debug_macro  00000028  0000000000000000  0000000000000000  0003ec16  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
878 .debug_macro  00000216  0000000000000000  0000000000000000  0003ec3e  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
879 .debug_macro  00000046  0000000000000000  0000000000000000  0003ee54  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
880 .debug_macro  0000002e  0000000000000000  0000000000000000  0003ee9a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
881 .debug_macro  00000027  0000000000000000  0000000000000000  0003eec8  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
882 .debug_macro  00000126  0000000000000000  0000000000000000  0003eeef  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
883 .debug_line   00004c87  0000000000000000  0000000000000000  0003f015  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
884 .debug_str    0003cc6a  0000000000000000  0000000000000000  00043c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
885 .data.DW.ref._ZTISt9bad_alloc 00000008  0000000000000000  0000000000000000  00080908  2**3
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
886 .data.DW.ref.__gxx_personality_v0 00000008  0000000000000000  0000000000000000  00080910  2**3
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
887 .comment      0000002e  0000000000000000  0000000000000000  00080918  2**0
                  CONTENTS, READONLY
888 .note.GNU-stack 00000000  0000000000000000  0000000000000000  00080946  2**0
                  CONTENTS, READONLY
889 .eh_frame     00002cc8  0000000000000000  0000000000000000  00080948  2**3
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA

Дизассемблирование раздела .text:

0000000000000000 <_ZN6Parser12checkDefinesEP7QString>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
       0:	55                   	push   %rbp
       1:	48 89 e5             	mov    %rsp,%rbp
       4:	53                   	push   %rbx
       5:	48 81 ec b8 00 00 00 	sub    $0xb8,%rsp
       c:	48 89 bd 48 ff ff ff 	mov    %rdi,-0xb8(%rbp)
      13:	48 89 b5 40 ff ff ff 	mov    %rsi,-0xc0(%rbp)
      1a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
      21:	00 00 
      23:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      27:	31 c0                	xor    %eax,%eax
    QString script = *str;
      29:	48 8b 95 40 ff ff ff 	mov    -0xc0(%rbp),%rdx
      30:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
      37:	48 89 d6             	mov    %rdx,%rsi
      3a:	48 89 c7             	mov    %rax,%rdi
      3d:	e8 00 00 00 00       	callq  42 <_ZN6Parser12checkDefinesEP7QString+0x42>
    QString StepArgs;
      42:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
      49:	48 89 c7             	mov    %rax,%rdi
      4c:	e8 00 00 00 00       	callq  51 <_ZN6Parser12checkDefinesEP7QString+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
      51:	48 8d 45 90          	lea    -0x70(%rbp),%rax
      55:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5c <_ZN6Parser12checkDefinesEP7QString+0x5c>
      5c:	48 89 c7             	mov    %rax,%rdi
      5f:	e8 00 00 00 00       	callq  64 <_ZN6Parser12checkDefinesEP7QString+0x64>
      64:	48 8d 75 90          	lea    -0x70(%rbp),%rsi
      68:	48 8d 45 80          	lea    -0x80(%rbp),%rax
      6c:	b9 00 00 00 00       	mov    $0x0,%ecx
      71:	ba 01 00 00 00       	mov    $0x1,%edx
      76:	48 89 c7             	mov    %rax,%rdi
      79:	e8 00 00 00 00       	callq  7e <_ZN6Parser12checkDefinesEP7QString+0x7e>
      7e:	48 8d 45 90          	lea    -0x70(%rbp),%rax
      82:	48 89 c7             	mov    %rax,%rdi
      85:	e8 00 00 00 00       	callq  8a <_ZN6Parser12checkDefinesEP7QString+0x8a>
    QR.setMinimal(false);
      8a:	48 8d 45 80          	lea    -0x80(%rbp),%rax
      8e:	be 00 00 00 00       	mov    $0x0,%esi
      93:	48 89 c7             	mov    %rax,%rdi
      96:	e8 00 00 00 00       	callq  9b <_ZN6Parser12checkDefinesEP7QString+0x9b>

    while(1==1)
    {
        int i = QR.indexIn(script);
      9b:	48 8d b5 60 ff ff ff 	lea    -0xa0(%rbp),%rsi
      a2:	48 8d 45 80          	lea    -0x80(%rbp),%rax
      a6:	b9 00 00 00 00       	mov    $0x0,%ecx
      ab:	ba 00 00 00 00       	mov    $0x0,%edx
      b0:	48 89 c7             	mov    %rax,%rdi
      b3:	e8 00 00 00 00       	callq  b8 <_ZN6Parser12checkDefinesEP7QString+0xb8>
      b8:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%rbp)
        if(i<0) return -1;
      be:	83 bd 5c ff ff ff 00 	cmpl   $0x0,-0xa4(%rbp)
      c5:	79 16                	jns    dd <_ZN6Parser12checkDefinesEP7QString+0xdd>
      c7:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
      cc:	48 8d 45 80          	lea    -0x80(%rbp),%rax
      d0:	48 89 c7             	mov    %rax,%rdi
      d3:	e8 00 00 00 00       	callq  d8 <_ZN6Parser12checkDefinesEP7QString+0xd8>
      d8:	e9 3f 01 00 00       	jmpq   21c <_ZN6Parser12checkDefinesEP7QString+0x21c>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
      dd:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
      e1:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
      e5:	ba 00 00 00 00       	mov    $0x0,%edx
      ea:	48 89 ce             	mov    %rcx,%rsi
      ed:	48 89 c7             	mov    %rax,%rdi
      f0:	e8 00 00 00 00       	callq  f5 <_ZN6Parser12checkDefinesEP7QString+0xf5>
      f5:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
      f9:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     100:	48 89 d6             	mov    %rdx,%rsi
     103:	48 89 c7             	mov    %rax,%rdi
     106:	e8 00 00 00 00       	callq  10b <_ZN6Parser12checkDefinesEP7QString+0x10b>
     10b:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     10f:	48 89 c7             	mov    %rax,%rdi
     112:	e8 00 00 00 00       	callq  117 <_ZN6Parser12checkDefinesEP7QString+0x117>
        this->constants.append(QR.cap(1));
     117:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     11b:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
     11f:	ba 01 00 00 00       	mov    $0x1,%edx
     124:	48 89 ce             	mov    %rcx,%rsi
     127:	48 89 c7             	mov    %rax,%rdi
     12a:	e8 00 00 00 00       	callq  12f <_ZN6Parser12checkDefinesEP7QString+0x12f>
     12f:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
     136:	48 8d 50 18          	lea    0x18(%rax),%rdx
     13a:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     13e:	48 89 c6             	mov    %rax,%rsi
     141:	48 89 d7             	mov    %rdx,%rdi
     144:	e8 00 00 00 00       	callq  149 <_ZN6Parser12checkDefinesEP7QString+0x149>
     149:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     14d:	48 89 c7             	mov    %rax,%rdi
     150:	e8 00 00 00 00       	callq  155 <_ZN6Parser12checkDefinesEP7QString+0x155>
        this->defines.insert(QR.cap(1),QR.cap(2));
     155:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     159:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
     15d:	ba 02 00 00 00       	mov    $0x2,%edx
     162:	48 89 ce             	mov    %rcx,%rsi
     165:	48 89 c7             	mov    %rax,%rdi
     168:	e8 00 00 00 00       	callq  16d <_ZN6Parser12checkDefinesEP7QString+0x16d>
     16d:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     171:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
     175:	ba 01 00 00 00       	mov    $0x1,%edx
     17a:	48 89 ce             	mov    %rcx,%rsi
     17d:	48 89 c7             	mov    %rax,%rdi
     180:	e8 00 00 00 00       	callq  185 <_ZN6Parser12checkDefinesEP7QString+0x185>
     185:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
     18c:	48 8d 48 28          	lea    0x28(%rax),%rcx
     190:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
     194:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     198:	48 89 c6             	mov    %rax,%rsi
     19b:	48 89 cf             	mov    %rcx,%rdi
     19e:	e8 00 00 00 00       	callq  1a3 <_ZN6Parser12checkDefinesEP7QString+0x1a3>
     1a3:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     1a7:	48 89 c7             	mov    %rax,%rdi
     1aa:	e8 00 00 00 00       	callq  1af <_ZN6Parser12checkDefinesEP7QString+0x1af>
     1af:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     1b3:	48 89 c7             	mov    %rax,%rdi
     1b6:	e8 00 00 00 00       	callq  1bb <_ZN6Parser12checkDefinesEP7QString+0x1bb>
        script = script.right(script.length() - StepArgs.length());
     1bb:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     1c2:	48 89 c7             	mov    %rax,%rdi
     1c5:	e8 00 00 00 00       	callq  1ca <_ZN6Parser12checkDefinesEP7QString+0x1ca>
     1ca:	89 c3                	mov    %eax,%ebx
     1cc:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     1d3:	48 89 c7             	mov    %rax,%rdi
     1d6:	e8 00 00 00 00       	callq  1db <_ZN6Parser12checkDefinesEP7QString+0x1db>
     1db:	89 da                	mov    %ebx,%edx
     1dd:	29 c2                	sub    %eax,%edx
     1df:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     1e3:	48 8d 8d 60 ff ff ff 	lea    -0xa0(%rbp),%rcx
     1ea:	48 89 ce             	mov    %rcx,%rsi
     1ed:	48 89 c7             	mov    %rax,%rdi
     1f0:	e8 00 00 00 00       	callq  1f5 <_ZN6Parser12checkDefinesEP7QString+0x1f5>
     1f5:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
     1f9:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     200:	48 89 d6             	mov    %rdx,%rsi
     203:	48 89 c7             	mov    %rax,%rdi
     206:	e8 00 00 00 00       	callq  20b <_ZN6Parser12checkDefinesEP7QString+0x20b>
     20b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     20f:	48 89 c7             	mov    %rax,%rdi
     212:	e8 00 00 00 00       	callq  217 <_ZN6Parser12checkDefinesEP7QString+0x217>
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
    QR.setMinimal(false);

    while(1==1)
     217:	e9 7f fe ff ff       	jmpq   9b <_ZN6Parser12checkDefinesEP7QString+0x9b>

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
     21c:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     223:	48 89 c7             	mov    %rax,%rdi
     226:	e8 00 00 00 00       	callq  22b <_ZN6Parser12checkDefinesEP7QString+0x22b>
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
     22b:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     232:	48 89 c7             	mov    %rax,%rdi
     235:	e8 00 00 00 00       	callq  23a <_ZN6Parser12checkDefinesEP7QString+0x23a>
     23a:	89 d8                	mov    %ebx,%eax
        this->constants.append(QR.cap(1));
        this->defines.insert(QR.cap(1),QR.cap(2));
        script = script.right(script.length() - StepArgs.length());
    }
    return 0;
}
     23c:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
     240:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
     247:	00 00 
     249:	0f 84 c3 00 00 00    	je     312 <_ZN6Parser12checkDefinesEP7QString+0x312>
     24f:	e9 b9 00 00 00       	jmpq   30d <_ZN6Parser12checkDefinesEP7QString+0x30d>
     254:	48 89 c3             	mov    %rax,%rbx
     257:	48 8d 45 90          	lea    -0x70(%rbp),%rax
     25b:	48 89 c7             	mov    %rax,%rdi
     25e:	e8 00 00 00 00       	callq  263 <_ZN6Parser12checkDefinesEP7QString+0x263>
     263:	eb 7a                	jmp    2df <_ZN6Parser12checkDefinesEP7QString+0x2df>
     265:	48 89 c3             	mov    %rax,%rbx
     268:	48 8d 45 80          	lea    -0x80(%rbp),%rax
     26c:	48 89 c7             	mov    %rax,%rdi
     26f:	e8 00 00 00 00       	callq  274 <_ZN6Parser12checkDefinesEP7QString+0x274>
     274:	eb 69                	jmp    2df <_ZN6Parser12checkDefinesEP7QString+0x2df>
     276:	48 89 c3             	mov    %rax,%rbx

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
     279:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     27d:	48 89 c7             	mov    %rax,%rdi
     280:	e8 00 00 00 00       	callq  285 <_ZN6Parser12checkDefinesEP7QString+0x285>
     285:	eb 47                	jmp    2ce <_ZN6Parser12checkDefinesEP7QString+0x2ce>
     287:	48 89 c3             	mov    %rax,%rbx
        this->constants.append(QR.cap(1));
     28a:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     28e:	48 89 c7             	mov    %rax,%rdi
     291:	e8 00 00 00 00       	callq  296 <_ZN6Parser12checkDefinesEP7QString+0x296>
     296:	eb 36                	jmp    2ce <_ZN6Parser12checkDefinesEP7QString+0x2ce>
     298:	48 89 c3             	mov    %rax,%rbx
        this->defines.insert(QR.cap(1),QR.cap(2));
     29b:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     29f:	48 89 c7             	mov    %rax,%rdi
     2a2:	e8 00 00 00 00       	callq  2a7 <_ZN6Parser12checkDefinesEP7QString+0x2a7>
     2a7:	eb 03                	jmp    2ac <_ZN6Parser12checkDefinesEP7QString+0x2ac>
     2a9:	48 89 c3             	mov    %rax,%rbx
     2ac:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     2b0:	48 89 c7             	mov    %rax,%rdi
     2b3:	e8 00 00 00 00       	callq  2b8 <_ZN6Parser12checkDefinesEP7QString+0x2b8>
     2b8:	eb 14                	jmp    2ce <_ZN6Parser12checkDefinesEP7QString+0x2ce>
     2ba:	48 89 c3             	mov    %rax,%rbx
        script = script.right(script.length() - StepArgs.length());
     2bd:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     2c1:	48 89 c7             	mov    %rax,%rdi
     2c4:	e8 00 00 00 00       	callq  2c9 <_ZN6Parser12checkDefinesEP7QString+0x2c9>
     2c9:	eb 03                	jmp    2ce <_ZN6Parser12checkDefinesEP7QString+0x2ce>
     2cb:	48 89 c3             	mov    %rax,%rbx
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
     2ce:	48 8d 45 80          	lea    -0x80(%rbp),%rax
     2d2:	48 89 c7             	mov    %rax,%rdi
     2d5:	e8 00 00 00 00       	callq  2da <_ZN6Parser12checkDefinesEP7QString+0x2da>
     2da:	eb 03                	jmp    2df <_ZN6Parser12checkDefinesEP7QString+0x2df>
     2dc:	48 89 c3             	mov    %rax,%rbx

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
     2df:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     2e6:	48 89 c7             	mov    %rax,%rdi
     2e9:	e8 00 00 00 00       	callq  2ee <_ZN6Parser12checkDefinesEP7QString+0x2ee>
     2ee:	eb 03                	jmp    2f3 <_ZN6Parser12checkDefinesEP7QString+0x2f3>
     2f0:	48 89 c3             	mov    %rax,%rbx
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
     2f3:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     2fa:	48 89 c7             	mov    %rax,%rdi
     2fd:	e8 00 00 00 00       	callq  302 <_ZN6Parser12checkDefinesEP7QString+0x302>
     302:	48 89 d8             	mov    %rbx,%rax
     305:	48 89 c7             	mov    %rax,%rdi
     308:	e8 00 00 00 00       	callq  30d <_ZN6Parser12checkDefinesEP7QString+0x30d>
        this->constants.append(QR.cap(1));
        this->defines.insert(QR.cap(1),QR.cap(2));
        script = script.right(script.length() - StepArgs.length());
    }
    return 0;
}
     30d:	e8 00 00 00 00       	callq  312 <_ZN6Parser12checkDefinesEP7QString+0x312>
     312:	48 81 c4 b8 00 00 00 	add    $0xb8,%rsp
     319:	5b                   	pop    %rbx
     31a:	5d                   	pop    %rbp
     31b:	c3                   	retq   

000000000000031c <_ZN6Parser12packVariableEhhP13varParameters>:

QByteArray Parser::packVariable(quint8 index, quint8 type, varParameters *VP){
     31c:	55                   	push   %rbp
     31d:	48 89 e5             	mov    %rsp,%rbp
     320:	41 57                	push   %r15
     322:	41 56                	push   %r14
     324:	41 55                	push   %r13
     326:	41 54                	push   %r12
     328:	53                   	push   %rbx
     329:	48 83 ec 68          	sub    $0x68,%rsp
     32d:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
     331:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
     335:	89 c8                	mov    %ecx,%eax
     337:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
     33e:	88 95 7c ff ff ff    	mov    %dl,-0x84(%rbp)
     344:	88 85 78 ff ff ff    	mov    %al,-0x88(%rbp)
     34a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
     351:	00 00 
     353:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
     357:	31 c0                	xor    %eax,%eax
    // It is devoted to Raskalov the roofer.
    QByteArray result;
     359:	48 8b 45 88          	mov    -0x78(%rbp),%rax
     35d:	48 89 c7             	mov    %rax,%rdi
     360:	e8 00 00 00 00       	callq  365 <_ZN6Parser12packVariableEhhP13varParameters+0x49>
    QDataStream Raskalov(&result, QIODevice::WriteOnly);
     365:	48 8d 45 90          	lea    -0x70(%rbp),%rax
     369:	be 02 00 00 00       	mov    $0x2,%esi
     36e:	48 89 c7             	mov    %rax,%rdi
     371:	e8 00 00 00 00       	callq  376 <_ZN6Parser12packVariableEhhP13varParameters+0x5a>
     376:	8b 55 90             	mov    -0x70(%rbp),%edx
     379:	48 8b 4d 88          	mov    -0x78(%rbp),%rcx
     37d:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     381:	48 89 ce             	mov    %rcx,%rsi
     384:	48 89 c7             	mov    %rax,%rdi
     387:	e8 00 00 00 00       	callq  38c <_ZN6Parser12packVariableEhhP13varParameters+0x70>
    Raskalov << index << type << &VP->indexRP
                              << &VP->eventSET
                              << &VP->eventZERO
                              << &VP->eventCHANGE;
     38c:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
     393:	48 83 c0 0c          	add    $0xc,%rax
     397:	48 85 c0             	test   %rax,%rax
     39a:	0f 95 c0             	setne  %al
     39d:	0f b6 d8             	movzbl %al,%ebx
    // It is devoted to Raskalov the roofer.
    QByteArray result;
    QDataStream Raskalov(&result, QIODevice::WriteOnly);
    Raskalov << index << type << &VP->indexRP
                              << &VP->eventSET
                              << &VP->eventZERO
     3a0:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
     3a7:	48 83 c0 08          	add    $0x8,%rax
     3ab:	48 85 c0             	test   %rax,%rax
     3ae:	0f 95 c0             	setne  %al
     3b1:	44 0f b6 e0          	movzbl %al,%r12d
QByteArray Parser::packVariable(quint8 index, quint8 type, varParameters *VP){
    // It is devoted to Raskalov the roofer.
    QByteArray result;
    QDataStream Raskalov(&result, QIODevice::WriteOnly);
    Raskalov << index << type << &VP->indexRP
                              << &VP->eventSET
     3b5:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
     3bc:	48 83 c0 04          	add    $0x4,%rax
     3c0:	48 85 c0             	test   %rax,%rax
     3c3:	0f 95 c0             	setne  %al
     3c6:	44 0f b6 e8          	movzbl %al,%r13d

QByteArray Parser::packVariable(quint8 index, quint8 type, varParameters *VP){
    // It is devoted to Raskalov the roofer.
    QByteArray result;
    QDataStream Raskalov(&result, QIODevice::WriteOnly);
    Raskalov << index << type << &VP->indexRP
     3ca:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
     3d1:	48 85 c0             	test   %rax,%rax
     3d4:	0f 95 c0             	setne  %al
     3d7:	44 0f b6 f0          	movzbl %al,%r14d
     3db:	44 0f b6 bd 78 ff ff 	movzbl -0x88(%rbp),%r15d
     3e2:	ff 
     3e3:	0f b6 95 7c ff ff ff 	movzbl -0x84(%rbp),%edx
     3ea:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     3ee:	89 d6                	mov    %edx,%esi
     3f0:	48 89 c7             	mov    %rax,%rdi
     3f3:	e8 00 00 00 00       	callq  3f8 <_ZN6Parser12packVariableEhhP13varParameters+0xdc>
     3f8:	44 89 fe             	mov    %r15d,%esi
     3fb:	48 89 c7             	mov    %rax,%rdi
     3fe:	e8 00 00 00 00       	callq  403 <_ZN6Parser12packVariableEhhP13varParameters+0xe7>
     403:	44 89 f6             	mov    %r14d,%esi
     406:	48 89 c7             	mov    %rax,%rdi
     409:	e8 00 00 00 00       	callq  40e <_ZN6Parser12packVariableEhhP13varParameters+0xf2>
                              << &VP->eventSET
     40e:	44 89 ee             	mov    %r13d,%esi
     411:	48 89 c7             	mov    %rax,%rdi
     414:	e8 00 00 00 00       	callq  419 <_ZN6Parser12packVariableEhhP13varParameters+0xfd>
                              << &VP->eventZERO
     419:	44 89 e6             	mov    %r12d,%esi
     41c:	48 89 c7             	mov    %rax,%rdi
     41f:	e8 00 00 00 00       	callq  424 <_ZN6Parser12packVariableEhhP13varParameters+0x108>
                              << &VP->eventCHANGE;
     424:	89 de                	mov    %ebx,%esi
     426:	48 89 c7             	mov    %rax,%rdi
     429:	e8 00 00 00 00       	callq  42e <_ZN6Parser12packVariableEhhP13varParameters+0x112>
    return result;
     42e:	90                   	nop
}

QByteArray Parser::packVariable(quint8 index, quint8 type, varParameters *VP){
    // It is devoted to Raskalov the roofer.
    QByteArray result;
    QDataStream Raskalov(&result, QIODevice::WriteOnly);
     42f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     433:	48 89 c7             	mov    %rax,%rdi
     436:	e8 00 00 00 00       	callq  43b <_ZN6Parser12packVariableEhhP13varParameters+0x11f>
    Raskalov << index << type << &VP->indexRP
                              << &VP->eventSET
                              << &VP->eventZERO
                              << &VP->eventCHANGE;
    return result;
     43b:	eb 2b                	jmp    468 <_ZN6Parser12packVariableEhhP13varParameters+0x14c>
     43d:	48 89 c3             	mov    %rax,%rbx
}

QByteArray Parser::packVariable(quint8 index, quint8 type, varParameters *VP){
    // It is devoted to Raskalov the roofer.
    QByteArray result;
    QDataStream Raskalov(&result, QIODevice::WriteOnly);
     440:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     444:	48 89 c7             	mov    %rax,%rdi
     447:	e8 00 00 00 00       	callq  44c <_ZN6Parser12packVariableEhhP13varParameters+0x130>
     44c:	eb 03                	jmp    451 <_ZN6Parser12packVariableEhhP13varParameters+0x135>
     44e:	48 89 c3             	mov    %rax,%rbx
     451:	48 8b 45 88          	mov    -0x78(%rbp),%rax
     455:	48 89 c7             	mov    %rax,%rdi
     458:	e8 00 00 00 00       	callq  45d <_ZN6Parser12packVariableEhhP13varParameters+0x141>
     45d:	48 89 d8             	mov    %rbx,%rax
     460:	48 89 c7             	mov    %rax,%rdi
     463:	e8 00 00 00 00       	callq  468 <_ZN6Parser12packVariableEhhP13varParameters+0x14c>
     * It is able to compile        - ok
     * Data stream                  - ok
     * var Parameters as argument   - ok
     * return result                - ok
     */
}
     468:	48 8b 45 88          	mov    -0x78(%rbp),%rax
     46c:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
     470:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
     477:	00 00 
     479:	74 05                	je     480 <_ZN6Parser12packVariableEhhP13varParameters+0x164>
     47b:	e8 00 00 00 00       	callq  480 <_ZN6Parser12packVariableEhhP13varParameters+0x164>
     480:	48 83 c4 68          	add    $0x68,%rsp
     484:	5b                   	pop    %rbx
     485:	41 5c                	pop    %r12
     487:	41 5d                	pop    %r13
     489:	41 5e                	pop    %r14
     48b:	41 5f                	pop    %r15
     48d:	5d                   	pop    %rbp
     48e:	c3                   	retq   
     48f:	90                   	nop

0000000000000490 <_ZN6Parser16compileVariablesEP11QStringList>:

QByteArray Parser::compileVariables(QStringList *str){
     490:	55                   	push   %rbp
     491:	48 89 e5             	mov    %rsp,%rbp
     494:	53                   	push   %rbx
     495:	48 81 ec 88 02 00 00 	sub    $0x288,%rsp
     49c:	48 89 bd 88 fd ff ff 	mov    %rdi,-0x278(%rbp)
     4a3:	48 89 b5 80 fd ff ff 	mov    %rsi,-0x280(%rbp)
     4aa:	48 89 95 78 fd ff ff 	mov    %rdx,-0x288(%rbp)
     4b1:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
     4b8:	00 00 
     4ba:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
     4be:	31 c0                	xor    %eax,%eax
    QByteArray        result;
     4c0:	48 8b 85 88 fd ff ff 	mov    -0x278(%rbp),%rax
     4c7:	48 89 c7             	mov    %rax,%rdi
     4ca:	e8 00 00 00 00       	callq  4cf <_ZN6Parser16compileVariablesEP11QStringList+0x3f>
    a                 headers;
     4cf:	48 8d 85 90 fd ff ff 	lea    -0x270(%rbp),%rax
     4d6:	48 89 c7             	mov    %rax,%rdi
     4d9:	e8 00 00 00 00       	callq  4de <_ZN6Parser16compileVariablesEP11QStringList+0x4e>
    QList<QByteArray> listA6;  // последовательность подструктур типа A6
     4de:	48 8d 85 b0 fd ff ff 	lea    -0x250(%rbp),%rax
     4e5:	48 89 c7             	mov    %rax,%rdi
     4e8:	e8 00 00 00 00       	callq  4ed <_ZN6Parser16compileVariablesEP11QStringList+0x5d>
    QStringList       code = *str;
     4ed:	48 8b 95 78 fd ff ff 	mov    -0x288(%rbp),%rdx
     4f4:	48 8d 85 c0 fd ff ff 	lea    -0x240(%rbp),%rax
     4fb:	48 89 d6             	mov    %rdx,%rsi
     4fe:	48 89 c7             	mov    %rax,%rdi
     501:	e8 00 00 00 00       	callq  506 <_ZN6Parser16compileVariablesEP11QStringList+0x76>

    // копирование из checkVariables

    int varCount      = 0;
     506:	c7 85 98 fd ff ff 00 	movl   $0x0,-0x268(%rbp)
     50d:	00 00 00 
    int index         = 0;
     510:	c7 85 9c fd ff ff 00 	movl   $0x0,-0x264(%rbp)
     517:	00 00 00 

    VarTypes VT;
     51a:	48 8d 85 d0 fd ff ff 	lea    -0x230(%rbp),%rax
     521:	48 89 c7             	mov    %rax,%rdi
     524:	e8 00 00 00 00       	callq  529 <_ZN6Parser16compileVariablesEP11QStringList+0x99>

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");            // deprecated
     529:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
     530:	48 8d 95 d0 fd ff ff 	lea    -0x230(%rbp),%rdx
     537:	48 89 d6             	mov    %rdx,%rsi
     53a:	48 89 c7             	mov    %rax,%rdi
     53d:	e8 00 00 00 00       	callq  542 <_ZN6Parser16compileVariablesEP11QStringList+0xb2>
     542:	48 8d 85 00 fe ff ff 	lea    -0x200(%rbp),%rax
     549:	48 8d 8d f0 fd ff ff 	lea    -0x210(%rbp),%rcx
     550:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 557 <_ZN6Parser16compileVariablesEP11QStringList+0xc7>
     557:	48 89 ce             	mov    %rcx,%rsi
     55a:	48 89 c7             	mov    %rax,%rdi
     55d:	e8 00 00 00 00       	callq  562 <_ZN6Parser16compileVariablesEP11QStringList+0xd2>
     562:	48 8d b5 00 fe ff ff 	lea    -0x200(%rbp),%rsi
     569:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
     570:	b9 00 00 00 00       	mov    $0x0,%ecx
     575:	ba 01 00 00 00       	mov    $0x1,%edx
     57a:	48 89 c7             	mov    %rax,%rdi
     57d:	e8 00 00 00 00       	callq  582 <_ZN6Parser16compileVariablesEP11QStringList+0xf2>
     582:	48 8d 85 00 fe ff ff 	lea    -0x200(%rbp),%rax
     589:	48 89 c7             	mov    %rax,%rdi
     58c:	e8 00 00 00 00       	callq  591 <_ZN6Parser16compileVariablesEP11QStringList+0x101>
     591:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
     598:	48 89 c7             	mov    %rax,%rdi
     59b:	e8 00 00 00 00       	callq  5a0 <_ZN6Parser16compileVariablesEP11QStringList+0x110>

    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
     5a0:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
     5a7:	48 8d 95 d0 fd ff ff 	lea    -0x230(%rbp),%rdx
     5ae:	48 89 d6             	mov    %rdx,%rsi
     5b1:	48 89 c7             	mov    %rax,%rdi
     5b4:	e8 00 00 00 00       	callq  5b9 <_ZN6Parser16compileVariablesEP11QStringList+0x129>
     5b9:	48 8d 85 30 fe ff ff 	lea    -0x1d0(%rbp),%rax
     5c0:	48 8d 8d 20 fe ff ff 	lea    -0x1e0(%rbp),%rcx
     5c7:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 5ce <_ZN6Parser16compileVariablesEP11QStringList+0x13e>
     5ce:	48 89 ce             	mov    %rcx,%rsi
     5d1:	48 89 c7             	mov    %rax,%rdi
     5d4:	e8 00 00 00 00       	callq  5d9 <_ZN6Parser16compileVariablesEP11QStringList+0x149>
     5d9:	48 8d b5 30 fe ff ff 	lea    -0x1d0(%rbp),%rsi
     5e0:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
     5e7:	b9 00 00 00 00       	mov    $0x0,%ecx
     5ec:	ba 01 00 00 00       	mov    $0x1,%edx
     5f1:	48 89 c7             	mov    %rax,%rdi
     5f4:	e8 00 00 00 00       	callq  5f9 <_ZN6Parser16compileVariablesEP11QStringList+0x169>
     5f9:	48 8d 85 30 fe ff ff 	lea    -0x1d0(%rbp),%rax
     600:	48 89 c7             	mov    %rax,%rdi
     603:	e8 00 00 00 00       	callq  608 <_ZN6Parser16compileVariablesEP11QStringList+0x178>
     608:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
     60f:	48 89 c7             	mov    %rax,%rdi
     612:	e8 00 00 00 00       	callq  617 <_ZN6Parser16compileVariablesEP11QStringList+0x187>
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
     617:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
     61e:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 625 <_ZN6Parser16compileVariablesEP11QStringList+0x195>
     625:	48 89 c7             	mov    %rax,%rdi
     628:	e8 00 00 00 00       	callq  62d <_ZN6Parser16compileVariablesEP11QStringList+0x19d>
     62d:	48 8d b5 50 fe ff ff 	lea    -0x1b0(%rbp),%rsi
     634:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
     63b:	b9 00 00 00 00       	mov    $0x0,%ecx
     640:	ba 01 00 00 00       	mov    $0x1,%edx
     645:	48 89 c7             	mov    %rax,%rdi
     648:	e8 00 00 00 00       	callq  64d <_ZN6Parser16compileVariablesEP11QStringList+0x1bd>
     64d:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
     654:	48 89 c7             	mov    %rax,%rdi
     657:	e8 00 00 00 00       	callq  65c <_ZN6Parser16compileVariablesEP11QStringList+0x1cc>
    QRegExp erxVarName("\\w+");                              // имя
     65c:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
     663:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 66a <_ZN6Parser16compileVariablesEP11QStringList+0x1da>
     66a:	48 89 c7             	mov    %rax,%rdi
     66d:	e8 00 00 00 00       	callq  672 <_ZN6Parser16compileVariablesEP11QStringList+0x1e2>
     672:	48 8d b5 70 fe ff ff 	lea    -0x190(%rbp),%rsi
     679:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
     680:	b9 00 00 00 00       	mov    $0x0,%ecx
     685:	ba 01 00 00 00       	mov    $0x1,%edx
     68a:	48 89 c7             	mov    %rax,%rdi
     68d:	e8 00 00 00 00       	callq  692 <_ZN6Parser16compileVariablesEP11QStringList+0x202>
     692:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
     699:	48 89 c7             	mov    %rax,%rdi
     69c:	e8 00 00 00 00       	callq  6a1 <_ZN6Parser16compileVariablesEP11QStringList+0x211>

    QStringList types;
     6a1:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
     6a8:	48 89 c7             	mov    %rax,%rdi
     6ab:	e8 00 00 00 00       	callq  6b0 <_ZN6Parser16compileVariablesEP11QStringList+0x220>
    QStringList list;
     6b0:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
     6b7:	48 89 c7             	mov    %rax,%rdi
     6ba:	e8 00 00 00 00       	callq  6bf <_ZN6Parser16compileVariablesEP11QStringList+0x22f>
    QStringList vars;
     6bf:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
     6c6:	48 89 c7             	mov    %rax,%rdi
     6c9:	e8 00 00 00 00       	callq  6ce <_ZN6Parser16compileVariablesEP11QStringList+0x23e>

    int pos = 0;
     6ce:	c7 85 94 fd ff ff 00 	movl   $0x0,-0x26c(%rbp)
     6d5:	00 00 00 

    // search type declaration
    QStringList::iterator sit;
     6d8:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
     6df:	48 89 c7             	mov    %rax,%rdi
     6e2:	e8 00 00 00 00       	callq  6e7 <_ZN6Parser16compileVariablesEP11QStringList+0x257>
    for(sit = code.begin(); sit != code.end(); ++sit){
     6e7:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
     6ee:	48 8d 95 c0 fd ff ff 	lea    -0x240(%rbp),%rdx
     6f5:	48 89 d6             	mov    %rdx,%rsi
     6f8:	48 89 c7             	mov    %rax,%rdi
     6fb:	e8 00 00 00 00       	callq  700 <_ZN6Parser16compileVariablesEP11QStringList+0x270>
     700:	48 8b 85 c0 fe ff ff 	mov    -0x140(%rbp),%rax
     707:	48 89 85 b0 fe ff ff 	mov    %rax,-0x150(%rbp)
     70e:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
     715:	48 8d 95 c0 fd ff ff 	lea    -0x240(%rbp),%rdx
     71c:	48 89 d6             	mov    %rdx,%rsi
     71f:	48 89 c7             	mov    %rax,%rdi
     722:	e8 00 00 00 00       	callq  727 <_ZN6Parser16compileVariablesEP11QStringList+0x297>
     727:	48 8d 95 d0 fe ff ff 	lea    -0x130(%rbp),%rdx
     72e:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
     735:	48 89 d6             	mov    %rdx,%rsi
     738:	48 89 c7             	mov    %rax,%rdi
     73b:	e8 00 00 00 00       	callq  740 <_ZN6Parser16compileVariablesEP11QStringList+0x2b0>
     740:	84 c0                	test   %al,%al
     742:	0f 84 9b 01 00 00    	je     8e3 <_ZN6Parser16compileVariablesEP11QStringList+0x453>
        if ((pos = erx.indexIn(*sit, pos)) != -1) {
     748:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
     74f:	48 89 c7             	mov    %rax,%rdi
     752:	e8 00 00 00 00       	callq  757 <_ZN6Parser16compileVariablesEP11QStringList+0x2c7>
     757:	48 89 c6             	mov    %rax,%rsi
     75a:	8b 95 94 fd ff ff    	mov    -0x26c(%rbp),%edx
     760:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
     767:	b9 00 00 00 00       	mov    $0x0,%ecx
     76c:	48 89 c7             	mov    %rax,%rdi
     76f:	e8 00 00 00 00       	callq  774 <_ZN6Parser16compileVariablesEP11QStringList+0x2e4>
     774:	89 85 94 fd ff ff    	mov    %eax,-0x26c(%rbp)
     77a:	83 bd 94 fd ff ff ff 	cmpl   $0xffffffff,-0x26c(%rbp)
     781:	0f 95 c0             	setne  %al
     784:	84 c0                	test   %al,%al
     786:	0f 84 43 01 00 00    	je     8cf <_ZN6Parser16compileVariablesEP11QStringList+0x43f>
             types << erx.cap(1);
     78c:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
     793:	48 8d 8d 10 fe ff ff 	lea    -0x1f0(%rbp),%rcx
     79a:	ba 01 00 00 00       	mov    $0x1,%edx
     79f:	48 89 ce             	mov    %rcx,%rsi
     7a2:	48 89 c7             	mov    %rax,%rdi
     7a5:	e8 00 00 00 00       	callq  7aa <_ZN6Parser16compileVariablesEP11QStringList+0x31a>
     7aa:	48 8d 95 e0 fe ff ff 	lea    -0x120(%rbp),%rdx
     7b1:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
     7b8:	48 89 d6             	mov    %rdx,%rsi
     7bb:	48 89 c7             	mov    %rax,%rdi
     7be:	e8 00 00 00 00       	callq  7c3 <_ZN6Parser16compileVariablesEP11QStringList+0x333>
     7c3:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
     7ca:	48 89 c7             	mov    %rax,%rdi
     7cd:	e8 00 00 00 00       	callq  7d2 <_ZN6Parser16compileVariablesEP11QStringList+0x342>
             list << erx.cap(2);
     7d2:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
     7d9:	48 8d 8d 10 fe ff ff 	lea    -0x1f0(%rbp),%rcx
     7e0:	ba 02 00 00 00       	mov    $0x2,%edx
     7e5:	48 89 ce             	mov    %rcx,%rsi
     7e8:	48 89 c7             	mov    %rax,%rdi
     7eb:	e8 00 00 00 00       	callq  7f0 <_ZN6Parser16compileVariablesEP11QStringList+0x360>
     7f0:	48 8d 95 f0 fe ff ff 	lea    -0x110(%rbp),%rdx
     7f7:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
     7fe:	48 89 d6             	mov    %rdx,%rsi
     801:	48 89 c7             	mov    %rax,%rdi
     804:	e8 00 00 00 00       	callq  809 <_ZN6Parser16compileVariablesEP11QStringList+0x379>
     809:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
     810:	48 89 c7             	mov    %rax,%rdi
     813:	e8 00 00 00 00       	callq  818 <_ZN6Parser16compileVariablesEP11QStringList+0x388>
             pos += erx.matchedLength();
     818:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
     81f:	48 89 c7             	mov    %rax,%rdi
     822:	e8 00 00 00 00       	callq  827 <_ZN6Parser16compileVariablesEP11QStringList+0x397>
     827:	01 85 94 fd ff ff    	add    %eax,-0x26c(%rbp)

             vars << erx.cap(2).split(","); // ищем объявления разделенные запятой внутри одной строки.
     82d:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
     834:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 83b <_ZN6Parser16compileVariablesEP11QStringList+0x3ab>
     83b:	48 89 c7             	mov    %rax,%rdi
     83e:	e8 00 00 00 00       	callq  843 <_ZN6Parser16compileVariablesEP11QStringList+0x3b3>
     843:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
     84a:	48 8d 8d 10 fe ff ff 	lea    -0x1f0(%rbp),%rcx
     851:	ba 02 00 00 00       	mov    $0x2,%edx
     856:	48 89 ce             	mov    %rcx,%rsi
     859:	48 89 c7             	mov    %rax,%rdi
     85c:	e8 00 00 00 00       	callq  861 <_ZN6Parser16compileVariablesEP11QStringList+0x3d1>
     861:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
     868:	48 8d 95 10 ff ff ff 	lea    -0xf0(%rbp),%rdx
     86f:	48 8d b5 00 ff ff ff 	lea    -0x100(%rbp),%rsi
     876:	41 b8 01 00 00 00    	mov    $0x1,%r8d
     87c:	b9 00 00 00 00       	mov    $0x0,%ecx
     881:	48 89 c7             	mov    %rax,%rdi
     884:	e8 00 00 00 00       	callq  889 <_ZN6Parser16compileVariablesEP11QStringList+0x3f9>
     889:	48 8d 95 20 ff ff ff 	lea    -0xe0(%rbp),%rdx
     890:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
     897:	48 89 d6             	mov    %rdx,%rsi
     89a:	48 89 c7             	mov    %rax,%rdi
     89d:	e8 00 00 00 00       	callq  8a2 <_ZN6Parser16compileVariablesEP11QStringList+0x412>
     8a2:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
     8a9:	48 89 c7             	mov    %rax,%rdi
     8ac:	e8 00 00 00 00       	callq  8b1 <_ZN6Parser16compileVariablesEP11QStringList+0x421>
     8b1:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
     8b8:	48 89 c7             	mov    %rax,%rdi
     8bb:	e8 00 00 00 00       	callq  8c0 <_ZN6Parser16compileVariablesEP11QStringList+0x430>
     8c0:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
     8c7:	48 89 c7             	mov    %rax,%rdi
     8ca:	e8 00 00 00 00       	callq  8cf <_ZN6Parser16compileVariablesEP11QStringList+0x43f>

    int pos = 0;

    // search type declaration
    QStringList::iterator sit;
    for(sit = code.begin(); sit != code.end(); ++sit){
     8cf:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
     8d6:	48 89 c7             	mov    %rax,%rdi
     8d9:	e8 00 00 00 00       	callq  8de <_ZN6Parser16compileVariablesEP11QStringList+0x44e>
     8de:	e9 2b fe ff ff       	jmpq   70e <_ZN6Parser16compileVariablesEP11QStringList+0x27e>
        }
    }
    //this->variables.removeDuplicates(); // --

    // Let's sort variables;
    QStringList::iterator it;
     8e3:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
     8ea:	48 89 c7             	mov    %rax,%rdi
     8ed:	e8 00 00 00 00       	callq  8f2 <_ZN6Parser16compileVariablesEP11QStringList+0x462>
    QString name, type, value;
     8f2:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
     8f9:	48 89 c7             	mov    %rax,%rdi
     8fc:	e8 00 00 00 00       	callq  901 <_ZN6Parser16compileVariablesEP11QStringList+0x471>
     901:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
     908:	48 89 c7             	mov    %rax,%rdi
     90b:	e8 00 00 00 00       	callq  910 <_ZN6Parser16compileVariablesEP11QStringList+0x480>
     910:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     917:	48 89 c7             	mov    %rax,%rdi
     91a:	e8 00 00 00 00       	callq  91f <_ZN6Parser16compileVariablesEP11QStringList+0x48f>
    quint8  assignment;                // variable Register Port // 0x04 0x40 0x80

    varParameters VP;
     91f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     923:	48 89 c7             	mov    %rax,%rdi
     926:	e8 00 00 00 00       	callq  92b <_ZN6Parser16compileVariablesEP11QStringList+0x49b>

    for(it=vars.begin(); it!=vars.end(); ++it){
     92b:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
     932:	48 8d 95 a0 fe ff ff 	lea    -0x160(%rbp),%rdx
     939:	48 89 d6             	mov    %rdx,%rsi
     93c:	48 89 c7             	mov    %rax,%rdi
     93f:	e8 00 00 00 00       	callq  944 <_ZN6Parser16compileVariablesEP11QStringList+0x4b4>
     944:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
     94b:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
     952:	48 8d 45 80          	lea    -0x80(%rbp),%rax
     956:	48 8d 95 a0 fe ff ff 	lea    -0x160(%rbp),%rdx
     95d:	48 89 d6             	mov    %rdx,%rsi
     960:	48 89 c7             	mov    %rax,%rdi
     963:	e8 00 00 00 00       	callq  968 <_ZN6Parser16compileVariablesEP11QStringList+0x4d8>
     968:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
     96c:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
     973:	48 89 d6             	mov    %rdx,%rsi
     976:	48 89 c7             	mov    %rax,%rdi
     979:	e8 00 00 00 00       	callq  97e <_ZN6Parser16compileVariablesEP11QStringList+0x4ee>
     97e:	84 c0                	test   %al,%al
     980:	0f 84 ed 01 00 00    	je     b73 <_ZN6Parser16compileVariablesEP11QStringList+0x6e3>
        QString all = *it;
     986:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
     98d:	48 89 c7             	mov    %rax,%rdi
     990:	e8 00 00 00 00       	callq  995 <_ZN6Parser16compileVariablesEP11QStringList+0x505>
     995:	48 89 c2             	mov    %rax,%rdx
     998:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     99c:	48 89 d6             	mov    %rdx,%rsi
     99f:	48 89 c7             	mov    %rax,%rdi
     9a2:	e8 00 00 00 00       	callq  9a7 <_ZN6Parser16compileVariablesEP11QStringList+0x517>
        int indexRgPort  =  erx_rgPort.indexIn(*it);
     9a7:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
     9ae:	48 89 c7             	mov    %rax,%rdi
     9b1:	e8 00 00 00 00       	callq  9b6 <_ZN6Parser16compileVariablesEP11QStringList+0x526>
     9b6:	48 89 c6             	mov    %rax,%rsi
     9b9:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
     9c0:	b9 00 00 00 00       	mov    $0x0,%ecx
     9c5:	ba 00 00 00 00       	mov    $0x0,%edx
     9ca:	48 89 c7             	mov    %rax,%rdi
     9cd:	e8 00 00 00 00       	callq  9d2 <_ZN6Parser16compileVariablesEP11QStringList+0x542>
     9d2:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%rbp)

        int indexVarName = erxVarName.indexIn(*it);
     9d8:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
     9df:	48 89 c7             	mov    %rax,%rdi
     9e2:	e8 00 00 00 00       	callq  9e7 <_ZN6Parser16compileVariablesEP11QStringList+0x557>
     9e7:	48 89 c6             	mov    %rax,%rsi
     9ea:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
     9f1:	b9 00 00 00 00       	mov    $0x0,%ecx
     9f6:	ba 00 00 00 00       	mov    $0x0,%edx
     9fb:	48 89 c7             	mov    %rax,%rdi
     9fe:	e8 00 00 00 00       	callq  a03 <_ZN6Parser16compileVariablesEP11QStringList+0x573>
     a03:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%rbp)
        int countRgPort  = erx_rgPort.captureCount();
     a09:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
     a10:	48 89 c7             	mov    %rax,%rdi
     a13:	e8 00 00 00 00       	callq  a18 <_ZN6Parser16compileVariablesEP11QStringList+0x588>
     a18:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%rbp)
        int countVarName = erxVarName.captureCount();
     a1e:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
     a25:	48 89 c7             	mov    %rax,%rdi
     a28:	e8 00 00 00 00       	callq  a2d <_ZN6Parser16compileVariablesEP11QStringList+0x59d>
     a2d:	89 85 ac fd ff ff    	mov    %eax,-0x254(%rbp)

        if(indexRgPort>=0){name  = erx_rgPort.cap(1);
     a33:	83 bd a0 fd ff ff 00 	cmpl   $0x0,-0x260(%rbp)
     a3a:	78 3f                	js     a7b <_ZN6Parser16compileVariablesEP11QStringList+0x5eb>
     a3c:	48 8d 45 90          	lea    -0x70(%rbp),%rax
     a40:	48 8d 8d 40 fe ff ff 	lea    -0x1c0(%rbp),%rcx
     a47:	ba 01 00 00 00       	mov    $0x1,%edx
     a4c:	48 89 ce             	mov    %rcx,%rsi
     a4f:	48 89 c7             	mov    %rax,%rdi
     a52:	e8 00 00 00 00       	callq  a57 <_ZN6Parser16compileVariablesEP11QStringList+0x5c7>
     a57:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
     a5b:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
     a62:	48 89 d6             	mov    %rdx,%rsi
     a65:	48 89 c7             	mov    %rax,%rdi
     a68:	e8 00 00 00 00       	callq  a6d <_ZN6Parser16compileVariablesEP11QStringList+0x5dd>
     a6d:	48 8d 45 90          	lea    -0x70(%rbp),%rax
     a71:	48 89 c7             	mov    %rax,%rdi
     a74:	e8 00 00 00 00       	callq  a79 <_ZN6Parser16compileVariablesEP11QStringList+0x5e9>
     a79:	eb 3d                	jmp    ab8 <_ZN6Parser16compileVariablesEP11QStringList+0x628>
        }else{name = erxVarName.cap(0);}
     a7b:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     a7f:	48 8d 8d 60 fe ff ff 	lea    -0x1a0(%rbp),%rcx
     a86:	ba 00 00 00 00       	mov    $0x0,%edx
     a8b:	48 89 ce             	mov    %rcx,%rsi
     a8e:	48 89 c7             	mov    %rax,%rdi
     a91:	e8 00 00 00 00       	callq  a96 <_ZN6Parser16compileVariablesEP11QStringList+0x606>
     a96:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
     a9a:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
     aa1:	48 89 d6             	mov    %rdx,%rsi
     aa4:	48 89 c7             	mov    %rax,%rdi
     aa7:	e8 00 00 00 00       	callq  aac <_ZN6Parser16compileVariablesEP11QStringList+0x61c>
     aac:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     ab0:	48 89 c7             	mov    %rax,%rdi
     ab3:	e8 00 00 00 00       	callq  ab8 <_ZN6Parser16compileVariablesEP11QStringList+0x628>

        index        = this->varIndexes.take(name);
     ab8:	48 8b 85 80 fd ff ff 	mov    -0x280(%rbp),%rax
     abf:	48 8d 50 68          	lea    0x68(%rax),%rdx
     ac3:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
     aca:	48 89 c6             	mov    %rax,%rsi
     acd:	48 89 d7             	mov    %rdx,%rdi
     ad0:	e8 00 00 00 00       	callq  ad5 <_ZN6Parser16compileVariablesEP11QStringList+0x645>
     ad5:	0f b6 c0             	movzbl %al,%eax
     ad8:	89 85 9c fd ff ff    	mov    %eax,-0x264(%rbp)
        assignment   = this->varTypes.take(index);
     ade:	8b 85 9c fd ff ff    	mov    -0x264(%rbp),%eax
     ae4:	88 45 b0             	mov    %al,-0x50(%rbp)
     ae7:	48 8b 85 80 fd ff ff 	mov    -0x280(%rbp),%rax
     aee:	48 8d 50 70          	lea    0x70(%rax),%rdx
     af2:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     af6:	48 89 c6             	mov    %rax,%rsi
     af9:	48 89 d7             	mov    %rdx,%rdi
     afc:	e8 00 00 00 00       	callq  b01 <_ZN6Parser16compileVariablesEP11QStringList+0x671>
     b01:	88 85 91 fd ff ff    	mov    %al,-0x26f(%rbp)
        // taking variable index and type - ok.

        listA6.append(packVariable(index, assignment, &VP));
     b07:	0f b6 8d 91 fd ff ff 	movzbl -0x26f(%rbp),%ecx
     b0e:	8b 85 9c fd ff ff    	mov    -0x264(%rbp),%eax
     b14:	0f b6 d0             	movzbl %al,%edx
     b17:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     b1b:	48 8d 7d d0          	lea    -0x30(%rbp),%rdi
     b1f:	48 8b b5 80 fd ff ff 	mov    -0x280(%rbp),%rsi
     b26:	49 89 f8             	mov    %rdi,%r8
     b29:	48 89 c7             	mov    %rax,%rdi
     b2c:	e8 00 00 00 00       	callq  b31 <_ZN6Parser16compileVariablesEP11QStringList+0x6a1>
     b31:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
     b35:	48 8d 85 b0 fd ff ff 	lea    -0x250(%rbp),%rax
     b3c:	48 89 d6             	mov    %rdx,%rsi
     b3f:	48 89 c7             	mov    %rax,%rdi
     b42:	e8 00 00 00 00       	callq  b47 <_ZN6Parser16compileVariablesEP11QStringList+0x6b7>
     b47:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     b4b:	48 89 c7             	mov    %rax,%rdi
     b4e:	e8 00 00 00 00       	callq  b53 <_ZN6Parser16compileVariablesEP11QStringList+0x6c3>
    quint8  assignment;                // variable Register Port // 0x04 0x40 0x80

    varParameters VP;

    for(it=vars.begin(); it!=vars.end(); ++it){
        QString all = *it;
     b53:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     b57:	48 89 c7             	mov    %rax,%rdi
     b5a:	e8 00 00 00 00       	callq  b5f <_ZN6Parser16compileVariablesEP11QStringList+0x6cf>
    QString name, type, value;
    quint8  assignment;                // variable Register Port // 0x04 0x40 0x80

    varParameters VP;

    for(it=vars.begin(); it!=vars.end(); ++it){
     b5f:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
     b66:	48 89 c7             	mov    %rax,%rdi
     b69:	e8 00 00 00 00       	callq  b6e <_ZN6Parser16compileVariablesEP11QStringList+0x6de>
     b6e:	e9 df fd ff ff       	jmpq   952 <_ZN6Parser16compileVariablesEP11QStringList+0x4c2>
        // taking variable index and type - ok.

        listA6.append(packVariable(index, assignment, &VP));
    }

    quint16 programID = 0xFF;
     b73:	66 c7 85 92 fd ff ff 	movw   $0xff,-0x26e(%rbp)
     b7a:	ff 00 
    result.append(headers.A6(0xFF, 0x11, programID, &listA6));
     b7c:	0f b7 85 92 fd ff ff 	movzwl -0x26e(%rbp),%eax
     b83:	0f b6 d0             	movzbl %al,%edx
     b86:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     b8a:	48 8d 8d b0 fd ff ff 	lea    -0x250(%rbp),%rcx
     b91:	48 8d b5 90 fd ff ff 	lea    -0x270(%rbp),%rsi
     b98:	49 89 c9             	mov    %rcx,%r9
     b9b:	41 89 d0             	mov    %edx,%r8d
     b9e:	b9 11 00 00 00       	mov    $0x11,%ecx
     ba3:	ba ff 00 00 00       	mov    $0xff,%edx
     ba8:	48 89 c7             	mov    %rax,%rdi
     bab:	e8 00 00 00 00       	callq  bb0 <_ZN6Parser16compileVariablesEP11QStringList+0x720>
     bb0:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
     bb4:	48 8b 85 88 fd ff ff 	mov    -0x278(%rbp),%rax
     bbb:	48 89 d6             	mov    %rdx,%rsi
     bbe:	48 89 c7             	mov    %rax,%rdi
     bc1:	e8 00 00 00 00       	callq  bc6 <_ZN6Parser16compileVariablesEP11QStringList+0x736>
     bc6:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     bca:	48 89 c7             	mov    %rax,%rdi
     bcd:	e8 00 00 00 00       	callq  bd2 <_ZN6Parser16compileVariablesEP11QStringList+0x742>

    return result;
     bd2:	90                   	nop
    }
    //this->variables.removeDuplicates(); // --

    // Let's sort variables;
    QStringList::iterator it;
    QString name, type, value;
     bd3:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     bda:	48 89 c7             	mov    %rax,%rdi
     bdd:	e8 00 00 00 00       	callq  be2 <_ZN6Parser16compileVariablesEP11QStringList+0x752>
     be2:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
     be9:	48 89 c7             	mov    %rax,%rdi
     bec:	e8 00 00 00 00       	callq  bf1 <_ZN6Parser16compileVariablesEP11QStringList+0x761>
     bf1:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
     bf8:	48 89 c7             	mov    %rax,%rdi
     bfb:	e8 00 00 00 00       	callq  c00 <_ZN6Parser16compileVariablesEP11QStringList+0x770>
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
    QRegExp erxVarName("\\w+");                              // имя

    QStringList types;
    QStringList list;
    QStringList vars;
     c00:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
     c07:	48 89 c7             	mov    %rax,%rdi
     c0a:	e8 00 00 00 00       	callq  c0f <_ZN6Parser16compileVariablesEP11QStringList+0x77f>
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
    QRegExp erxVarName("\\w+");                              // имя

    QStringList types;
    QStringList list;
     c0f:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
     c16:	48 89 c7             	mov    %rax,%rdi
     c19:	e8 00 00 00 00       	callq  c1e <_ZN6Parser16compileVariablesEP11QStringList+0x78e>

    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
    QRegExp erxVarName("\\w+");                              // имя

    QStringList types;
     c1e:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
     c25:	48 89 c7             	mov    %rax,%rdi
     c28:	e8 00 00 00 00       	callq  c2d <_ZN6Parser16compileVariablesEP11QStringList+0x79d>

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");            // deprecated

    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
    QRegExp erxVarName("\\w+");                              // имя
     c2d:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
     c34:	48 89 c7             	mov    %rax,%rdi
     c37:	e8 00 00 00 00       	callq  c3c <_ZN6Parser16compileVariablesEP11QStringList+0x7ac>
    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");            // deprecated

    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
     c3c:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
     c43:	48 89 c7             	mov    %rax,%rdi
     c46:	e8 00 00 00 00       	callq  c4b <_ZN6Parser16compileVariablesEP11QStringList+0x7bb>

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");            // deprecated

    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
     c4b:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
     c52:	48 89 c7             	mov    %rax,%rdi
     c55:	e8 00 00 00 00       	callq  c5a <_ZN6Parser16compileVariablesEP11QStringList+0x7ca>
    int varCount      = 0;
    int index         = 0;

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");            // deprecated
     c5a:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
     c61:	48 89 c7             	mov    %rax,%rdi
     c64:	e8 00 00 00 00       	callq  c69 <_ZN6Parser16compileVariablesEP11QStringList+0x7d9>
    // копирование из checkVariables

    int varCount      = 0;
    int index         = 0;

    VarTypes VT;
     c69:	48 8d 85 d0 fd ff ff 	lea    -0x230(%rbp),%rax
     c70:	48 89 c7             	mov    %rax,%rdi
     c73:	e8 00 00 00 00       	callq  c78 <_ZN6Parser16compileVariablesEP11QStringList+0x7e8>

QByteArray Parser::compileVariables(QStringList *str){
    QByteArray        result;
    a                 headers;
    QList<QByteArray> listA6;  // последовательность подструктур типа A6
    QStringList       code = *str;
     c78:	48 8d 85 c0 fd ff ff 	lea    -0x240(%rbp),%rax
     c7f:	48 89 c7             	mov    %rax,%rdi
     c82:	e8 00 00 00 00       	callq  c87 <_ZN6Parser16compileVariablesEP11QStringList+0x7f7>
}

QByteArray Parser::compileVariables(QStringList *str){
    QByteArray        result;
    a                 headers;
    QList<QByteArray> listA6;  // последовательность подструктур типа A6
     c87:	48 8d 85 b0 fd ff ff 	lea    -0x250(%rbp),%rax
     c8e:	48 89 c7             	mov    %rax,%rdi
     c91:	e8 00 00 00 00       	callq  c96 <_ZN6Parser16compileVariablesEP11QStringList+0x806>
    }

    quint16 programID = 0xFF;
    result.append(headers.A6(0xFF, 0x11, programID, &listA6));

    return result;
     c96:	e9 eb 02 00 00       	jmpq   f86 <_ZN6Parser16compileVariablesEP11QStringList+0xaf6>
     c9b:	48 89 c3             	mov    %rax,%rbx
     c9e:	48 8d 85 00 fe ff ff 	lea    -0x200(%rbp),%rax
     ca5:	48 89 c7             	mov    %rax,%rdi
     ca8:	e8 00 00 00 00       	callq  cad <_ZN6Parser16compileVariablesEP11QStringList+0x81d>
     cad:	eb 17                	jmp    cc6 <_ZN6Parser16compileVariablesEP11QStringList+0x836>
     caf:	48 89 c3             	mov    %rax,%rbx
     cb2:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
     cb9:	48 89 c7             	mov    %rax,%rdi
     cbc:	e8 00 00 00 00       	callq  cc1 <_ZN6Parser16compileVariablesEP11QStringList+0x831>
     cc1:	eb 03                	jmp    cc6 <_ZN6Parser16compileVariablesEP11QStringList+0x836>
     cc3:	48 89 c3             	mov    %rax,%rbx
     cc6:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
     ccd:	48 89 c7             	mov    %rax,%rdi
     cd0:	e8 00 00 00 00       	callq  cd5 <_ZN6Parser16compileVariablesEP11QStringList+0x845>
     cd5:	e9 56 02 00 00       	jmpq   f30 <_ZN6Parser16compileVariablesEP11QStringList+0xaa0>
     cda:	48 89 c3             	mov    %rax,%rbx
     cdd:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
     ce4:	48 89 c7             	mov    %rax,%rdi
     ce7:	e8 00 00 00 00       	callq  cec <_ZN6Parser16compileVariablesEP11QStringList+0x85c>
     cec:	e9 3f 02 00 00       	jmpq   f30 <_ZN6Parser16compileVariablesEP11QStringList+0xaa0>
     cf1:	48 89 c3             	mov    %rax,%rbx
     cf4:	48 8d 85 30 fe ff ff 	lea    -0x1d0(%rbp),%rax
     cfb:	48 89 c7             	mov    %rax,%rdi
     cfe:	e8 00 00 00 00       	callq  d03 <_ZN6Parser16compileVariablesEP11QStringList+0x873>
     d03:	eb 17                	jmp    d1c <_ZN6Parser16compileVariablesEP11QStringList+0x88c>
     d05:	48 89 c3             	mov    %rax,%rbx
     d08:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
     d0f:	48 89 c7             	mov    %rax,%rdi
     d12:	e8 00 00 00 00       	callq  d17 <_ZN6Parser16compileVariablesEP11QStringList+0x887>
     d17:	eb 03                	jmp    d1c <_ZN6Parser16compileVariablesEP11QStringList+0x88c>
     d19:	48 89 c3             	mov    %rax,%rbx
     d1c:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
     d23:	48 89 c7             	mov    %rax,%rdi
     d26:	e8 00 00 00 00       	callq  d2b <_ZN6Parser16compileVariablesEP11QStringList+0x89b>
     d2b:	e9 ec 01 00 00       	jmpq   f1c <_ZN6Parser16compileVariablesEP11QStringList+0xa8c>
     d30:	48 89 c3             	mov    %rax,%rbx
     d33:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
     d3a:	48 89 c7             	mov    %rax,%rdi
     d3d:	e8 00 00 00 00       	callq  d42 <_ZN6Parser16compileVariablesEP11QStringList+0x8b2>
     d42:	e9 d5 01 00 00       	jmpq   f1c <_ZN6Parser16compileVariablesEP11QStringList+0xa8c>
     d47:	48 89 c3             	mov    %rax,%rbx
     d4a:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
     d51:	48 89 c7             	mov    %rax,%rdi
     d54:	e8 00 00 00 00       	callq  d59 <_ZN6Parser16compileVariablesEP11QStringList+0x8c9>
     d59:	e9 aa 01 00 00       	jmpq   f08 <_ZN6Parser16compileVariablesEP11QStringList+0xa78>
     d5e:	48 89 c3             	mov    %rax,%rbx
     d61:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
     d68:	48 89 c7             	mov    %rax,%rdi
     d6b:	e8 00 00 00 00       	callq  d70 <_ZN6Parser16compileVariablesEP11QStringList+0x8e0>
     d70:	e9 93 01 00 00       	jmpq   f08 <_ZN6Parser16compileVariablesEP11QStringList+0xa78>
     d75:	48 89 c3             	mov    %rax,%rbx
     d78:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
     d7f:	48 89 c7             	mov    %rax,%rdi
     d82:	e8 00 00 00 00       	callq  d87 <_ZN6Parser16compileVariablesEP11QStringList+0x8f7>
     d87:	e9 68 01 00 00       	jmpq   ef4 <_ZN6Parser16compileVariablesEP11QStringList+0xa64>
     d8c:	48 89 c3             	mov    %rax,%rbx
     d8f:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
     d96:	48 89 c7             	mov    %rax,%rdi
     d99:	e8 00 00 00 00       	callq  d9e <_ZN6Parser16compileVariablesEP11QStringList+0x90e>
     d9e:	e9 51 01 00 00       	jmpq   ef4 <_ZN6Parser16compileVariablesEP11QStringList+0xa64>
     da3:	48 89 c3             	mov    %rax,%rbx

    // search type declaration
    QStringList::iterator sit;
    for(sit = code.begin(); sit != code.end(); ++sit){
        if ((pos = erx.indexIn(*sit, pos)) != -1) {
             types << erx.cap(1);
     da6:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
     dad:	48 89 c7             	mov    %rax,%rdi
     db0:	e8 00 00 00 00       	callq  db5 <_ZN6Parser16compileVariablesEP11QStringList+0x925>
     db5:	e9 ea 00 00 00       	jmpq   ea4 <_ZN6Parser16compileVariablesEP11QStringList+0xa14>
     dba:	48 89 c3             	mov    %rax,%rbx
             list << erx.cap(2);
     dbd:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
     dc4:	48 89 c7             	mov    %rax,%rdi
     dc7:	e8 00 00 00 00       	callq  dcc <_ZN6Parser16compileVariablesEP11QStringList+0x93c>
     dcc:	e9 d3 00 00 00       	jmpq   ea4 <_ZN6Parser16compileVariablesEP11QStringList+0xa14>
     dd1:	48 89 c3             	mov    %rax,%rbx
             pos += erx.matchedLength();

             vars << erx.cap(2).split(","); // ищем объявления разделенные запятой внутри одной строки.
     dd4:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
     ddb:	48 89 c7             	mov    %rax,%rdi
     dde:	e8 00 00 00 00       	callq  de3 <_ZN6Parser16compileVariablesEP11QStringList+0x953>
     de3:	eb 03                	jmp    de8 <_ZN6Parser16compileVariablesEP11QStringList+0x958>
     de5:	48 89 c3             	mov    %rax,%rbx
     de8:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
     def:	48 89 c7             	mov    %rax,%rdi
     df2:	e8 00 00 00 00       	callq  df7 <_ZN6Parser16compileVariablesEP11QStringList+0x967>
     df7:	eb 03                	jmp    dfc <_ZN6Parser16compileVariablesEP11QStringList+0x96c>
     df9:	48 89 c3             	mov    %rax,%rbx
     dfc:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
     e03:	48 89 c7             	mov    %rax,%rdi
     e06:	e8 00 00 00 00       	callq  e0b <_ZN6Parser16compileVariablesEP11QStringList+0x97b>
     e0b:	e9 94 00 00 00       	jmpq   ea4 <_ZN6Parser16compileVariablesEP11QStringList+0xa14>
     e10:	48 89 c3             	mov    %rax,%rbx

        int indexVarName = erxVarName.indexIn(*it);
        int countRgPort  = erx_rgPort.captureCount();
        int countVarName = erxVarName.captureCount();

        if(indexRgPort>=0){name  = erx_rgPort.cap(1);
     e13:	48 8d 45 90          	lea    -0x70(%rbp),%rax
     e17:	48 89 c7             	mov    %rax,%rdi
     e1a:	e8 00 00 00 00       	callq  e1f <_ZN6Parser16compileVariablesEP11QStringList+0x98f>
     e1f:	eb 25                	jmp    e46 <_ZN6Parser16compileVariablesEP11QStringList+0x9b6>
     e21:	48 89 c3             	mov    %rax,%rbx
        }else{name = erxVarName.cap(0);}
     e24:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     e28:	48 89 c7             	mov    %rax,%rdi
     e2b:	e8 00 00 00 00       	callq  e30 <_ZN6Parser16compileVariablesEP11QStringList+0x9a0>
     e30:	eb 14                	jmp    e46 <_ZN6Parser16compileVariablesEP11QStringList+0x9b6>
     e32:	48 89 c3             	mov    %rax,%rbx

        index        = this->varIndexes.take(name);
        assignment   = this->varTypes.take(index);
        // taking variable index and type - ok.

        listA6.append(packVariable(index, assignment, &VP));
     e35:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     e39:	48 89 c7             	mov    %rax,%rdi
     e3c:	e8 00 00 00 00       	callq  e41 <_ZN6Parser16compileVariablesEP11QStringList+0x9b1>
     e41:	eb 03                	jmp    e46 <_ZN6Parser16compileVariablesEP11QStringList+0x9b6>
     e43:	48 89 c3             	mov    %rax,%rbx
    quint8  assignment;                // variable Register Port // 0x04 0x40 0x80

    varParameters VP;

    for(it=vars.begin(); it!=vars.end(); ++it){
        QString all = *it;
     e46:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     e4a:	48 89 c7             	mov    %rax,%rdi
     e4d:	e8 00 00 00 00       	callq  e52 <_ZN6Parser16compileVariablesEP11QStringList+0x9c2>
     e52:	eb 14                	jmp    e68 <_ZN6Parser16compileVariablesEP11QStringList+0x9d8>
     e54:	48 89 c3             	mov    %rax,%rbx

        listA6.append(packVariable(index, assignment, &VP));
    }

    quint16 programID = 0xFF;
    result.append(headers.A6(0xFF, 0x11, programID, &listA6));
     e57:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     e5b:	48 89 c7             	mov    %rax,%rdi
     e5e:	e8 00 00 00 00       	callq  e63 <_ZN6Parser16compileVariablesEP11QStringList+0x9d3>
     e63:	eb 03                	jmp    e68 <_ZN6Parser16compileVariablesEP11QStringList+0x9d8>
     e65:	48 89 c3             	mov    %rax,%rbx
    }
    //this->variables.removeDuplicates(); // --

    // Let's sort variables;
    QStringList::iterator it;
    QString name, type, value;
     e68:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
     e6f:	48 89 c7             	mov    %rax,%rdi
     e72:	e8 00 00 00 00       	callq  e77 <_ZN6Parser16compileVariablesEP11QStringList+0x9e7>
     e77:	eb 03                	jmp    e7c <_ZN6Parser16compileVariablesEP11QStringList+0x9ec>
     e79:	48 89 c3             	mov    %rax,%rbx
     e7c:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
     e83:	48 89 c7             	mov    %rax,%rdi
     e86:	e8 00 00 00 00       	callq  e8b <_ZN6Parser16compileVariablesEP11QStringList+0x9fb>
     e8b:	eb 03                	jmp    e90 <_ZN6Parser16compileVariablesEP11QStringList+0xa00>
     e8d:	48 89 c3             	mov    %rax,%rbx
     e90:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
     e97:	48 89 c7             	mov    %rax,%rdi
     e9a:	e8 00 00 00 00       	callq  e9f <_ZN6Parser16compileVariablesEP11QStringList+0xa0f>
     e9f:	eb 03                	jmp    ea4 <_ZN6Parser16compileVariablesEP11QStringList+0xa14>
     ea1:	48 89 c3             	mov    %rax,%rbx
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
    QRegExp erxVarName("\\w+");                              // имя

    QStringList types;
    QStringList list;
    QStringList vars;
     ea4:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
     eab:	48 89 c7             	mov    %rax,%rdi
     eae:	e8 00 00 00 00       	callq  eb3 <_ZN6Parser16compileVariablesEP11QStringList+0xa23>
     eb3:	eb 03                	jmp    eb8 <_ZN6Parser16compileVariablesEP11QStringList+0xa28>
     eb5:	48 89 c3             	mov    %rax,%rbx
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
    QRegExp erxVarName("\\w+");                              // имя

    QStringList types;
    QStringList list;
     eb8:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
     ebf:	48 89 c7             	mov    %rax,%rdi
     ec2:	e8 00 00 00 00       	callq  ec7 <_ZN6Parser16compileVariablesEP11QStringList+0xa37>
     ec7:	eb 03                	jmp    ecc <_ZN6Parser16compileVariablesEP11QStringList+0xa3c>
     ec9:	48 89 c3             	mov    %rax,%rbx

    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
    QRegExp erxVarName("\\w+");                              // имя

    QStringList types;
     ecc:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
     ed3:	48 89 c7             	mov    %rax,%rdi
     ed6:	e8 00 00 00 00       	callq  edb <_ZN6Parser16compileVariablesEP11QStringList+0xa4b>
     edb:	eb 03                	jmp    ee0 <_ZN6Parser16compileVariablesEP11QStringList+0xa50>
     edd:	48 89 c3             	mov    %rax,%rbx

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");            // deprecated

    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
    QRegExp erxVarName("\\w+");                              // имя
     ee0:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
     ee7:	48 89 c7             	mov    %rax,%rdi
     eea:	e8 00 00 00 00       	callq  eef <_ZN6Parser16compileVariablesEP11QStringList+0xa5f>
     eef:	eb 03                	jmp    ef4 <_ZN6Parser16compileVariablesEP11QStringList+0xa64>
     ef1:	48 89 c3             	mov    %rax,%rbx
    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");            // deprecated

    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)"); // имя : порт : номер
     ef4:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
     efb:	48 89 c7             	mov    %rax,%rdi
     efe:	e8 00 00 00 00       	callq  f03 <_ZN6Parser16compileVariablesEP11QStringList+0xa73>
     f03:	eb 03                	jmp    f08 <_ZN6Parser16compileVariablesEP11QStringList+0xa78>
     f05:	48 89 c3             	mov    %rax,%rbx

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");            // deprecated

    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;"); // тип - все остальное (кроме перевода строки), а в конце ;
     f08:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
     f0f:	48 89 c7             	mov    %rax,%rdi
     f12:	e8 00 00 00 00       	callq  f17 <_ZN6Parser16compileVariablesEP11QStringList+0xa87>
     f17:	eb 03                	jmp    f1c <_ZN6Parser16compileVariablesEP11QStringList+0xa8c>
     f19:	48 89 c3             	mov    %rax,%rbx
    int varCount      = 0;
    int index         = 0;

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");            // deprecated
     f1c:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
     f23:	48 89 c7             	mov    %rax,%rdi
     f26:	e8 00 00 00 00       	callq  f2b <_ZN6Parser16compileVariablesEP11QStringList+0xa9b>
     f2b:	eb 03                	jmp    f30 <_ZN6Parser16compileVariablesEP11QStringList+0xaa0>
     f2d:	48 89 c3             	mov    %rax,%rbx
    // копирование из checkVariables

    int varCount      = 0;
    int index         = 0;

    VarTypes VT;
     f30:	48 8d 85 d0 fd ff ff 	lea    -0x230(%rbp),%rax
     f37:	48 89 c7             	mov    %rax,%rdi
     f3a:	e8 00 00 00 00       	callq  f3f <_ZN6Parser16compileVariablesEP11QStringList+0xaaf>
     f3f:	eb 03                	jmp    f44 <_ZN6Parser16compileVariablesEP11QStringList+0xab4>
     f41:	48 89 c3             	mov    %rax,%rbx

QByteArray Parser::compileVariables(QStringList *str){
    QByteArray        result;
    a                 headers;
    QList<QByteArray> listA6;  // последовательность подструктур типа A6
    QStringList       code = *str;
     f44:	48 8d 85 c0 fd ff ff 	lea    -0x240(%rbp),%rax
     f4b:	48 89 c7             	mov    %rax,%rdi
     f4e:	e8 00 00 00 00       	callq  f53 <_ZN6Parser16compileVariablesEP11QStringList+0xac3>
     f53:	eb 03                	jmp    f58 <_ZN6Parser16compileVariablesEP11QStringList+0xac8>
     f55:	48 89 c3             	mov    %rax,%rbx
}

QByteArray Parser::compileVariables(QStringList *str){
    QByteArray        result;
    a                 headers;
    QList<QByteArray> listA6;  // последовательность подструктур типа A6
     f58:	48 8d 85 b0 fd ff ff 	lea    -0x250(%rbp),%rax
     f5f:	48 89 c7             	mov    %rax,%rdi
     f62:	e8 00 00 00 00       	callq  f67 <_ZN6Parser16compileVariablesEP11QStringList+0xad7>
     f67:	eb 03                	jmp    f6c <_ZN6Parser16compileVariablesEP11QStringList+0xadc>
     f69:	48 89 c3             	mov    %rax,%rbx
     f6c:	48 8b 85 88 fd ff ff 	mov    -0x278(%rbp),%rax
     f73:	48 89 c7             	mov    %rax,%rdi
     f76:	e8 00 00 00 00       	callq  f7b <_ZN6Parser16compileVariablesEP11QStringList+0xaeb>
     f7b:	48 89 d8             	mov    %rbx,%rax
     f7e:	48 89 c7             	mov    %rax,%rdi
     f81:	e8 00 00 00 00       	callq  f86 <_ZN6Parser16compileVariablesEP11QStringList+0xaf6>

    quint16 programID = 0xFF;
    result.append(headers.A6(0xFF, 0x11, programID, &listA6));

    return result;
}
     f86:	48 8b 85 88 fd ff ff 	mov    -0x278(%rbp),%rax
     f8d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
     f91:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
     f98:	00 00 
     f9a:	74 05                	je     fa1 <_ZN6Parser16compileVariablesEP11QStringList+0xb11>
     f9c:	e8 00 00 00 00       	callq  fa1 <_ZN6Parser16compileVariablesEP11QStringList+0xb11>
     fa1:	48 81 c4 88 02 00 00 	add    $0x288,%rsp
     fa8:	5b                   	pop    %rbx
     fa9:	5d                   	pop    %rbp
     faa:	c3                   	retq   
     fab:	90                   	nop

0000000000000fac <_ZN6Parser14checkVariablesEP7QString>:

int Parser::checkVariables(QString *str){
     fac:	55                   	push   %rbp
     fad:	48 89 e5             	mov    %rsp,%rbp
     fb0:	53                   	push   %rbx
     fb1:	48 81 ec 48 02 00 00 	sub    $0x248,%rsp
     fb8:	48 89 bd b8 fd ff ff 	mov    %rdi,-0x248(%rbp)
     fbf:	48 89 b5 b0 fd ff ff 	mov    %rsi,-0x250(%rbp)
     fc6:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
     fcd:	00 00 
     fcf:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
     fd3:	31 c0                	xor    %eax,%eax
    int varCount    = 0;
     fd5:	c7 85 cc fd ff ff 00 	movl   $0x0,-0x234(%rbp)
     fdc:	00 00 00 
    int index   = 0;
     fdf:	c7 85 c0 fd ff ff 00 	movl   $0x0,-0x240(%rbp)
     fe6:	00 00 00 

    VarTypes VT;
     fe9:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
     ff0:	48 89 c7             	mov    %rax,%rdi
     ff3:	e8 00 00 00 00       	callq  ff8 <_ZN6Parser14checkVariablesEP7QString+0x4c>

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
     ff8:	48 8d 85 00 fe ff ff 	lea    -0x200(%rbp),%rax
     fff:	48 8d 95 e0 fd ff ff 	lea    -0x220(%rbp),%rdx
    1006:	48 89 d6             	mov    %rdx,%rsi
    1009:	48 89 c7             	mov    %rax,%rdi
    100c:	e8 00 00 00 00       	callq  1011 <_ZN6Parser14checkVariablesEP7QString+0x65>
    1011:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
    1018:	48 8d 8d 00 fe ff ff 	lea    -0x200(%rbp),%rcx
    101f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 1026 <_ZN6Parser14checkVariablesEP7QString+0x7a>
    1026:	48 89 ce             	mov    %rcx,%rsi
    1029:	48 89 c7             	mov    %rax,%rdi
    102c:	e8 00 00 00 00       	callq  1031 <_ZN6Parser14checkVariablesEP7QString+0x85>
    1031:	48 8d b5 10 fe ff ff 	lea    -0x1f0(%rbp),%rsi
    1038:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
    103f:	b9 00 00 00 00       	mov    $0x0,%ecx
    1044:	ba 01 00 00 00       	mov    $0x1,%edx
    1049:	48 89 c7             	mov    %rax,%rdi
    104c:	e8 00 00 00 00       	callq  1051 <_ZN6Parser14checkVariablesEP7QString+0xa5>
    1051:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
    1058:	48 89 c7             	mov    %rax,%rdi
    105b:	e8 00 00 00 00       	callq  1060 <_ZN6Parser14checkVariablesEP7QString+0xb4>
    1060:	48 8d 85 00 fe ff ff 	lea    -0x200(%rbp),%rax
    1067:	48 89 c7             	mov    %rax,%rdi
    106a:	e8 00 00 00 00       	callq  106f <_ZN6Parser14checkVariablesEP7QString+0xc3>
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    106f:	48 8d 85 30 fe ff ff 	lea    -0x1d0(%rbp),%rax
    1076:	48 8d 95 e0 fd ff ff 	lea    -0x220(%rbp),%rdx
    107d:	48 89 d6             	mov    %rdx,%rsi
    1080:	48 89 c7             	mov    %rax,%rdi
    1083:	e8 00 00 00 00       	callq  1088 <_ZN6Parser14checkVariablesEP7QString+0xdc>
    1088:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
    108f:	48 8d 8d 30 fe ff ff 	lea    -0x1d0(%rbp),%rcx
    1096:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 109d <_ZN6Parser14checkVariablesEP7QString+0xf1>
    109d:	48 89 ce             	mov    %rcx,%rsi
    10a0:	48 89 c7             	mov    %rax,%rdi
    10a3:	e8 00 00 00 00       	callq  10a8 <_ZN6Parser14checkVariablesEP7QString+0xfc>
    10a8:	48 8d b5 40 fe ff ff 	lea    -0x1c0(%rbp),%rsi
    10af:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
    10b6:	b9 00 00 00 00       	mov    $0x0,%ecx
    10bb:	ba 01 00 00 00       	mov    $0x1,%edx
    10c0:	48 89 c7             	mov    %rax,%rdi
    10c3:	e8 00 00 00 00       	callq  10c8 <_ZN6Parser14checkVariablesEP7QString+0x11c>
    10c8:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
    10cf:	48 89 c7             	mov    %rax,%rdi
    10d2:	e8 00 00 00 00       	callq  10d7 <_ZN6Parser14checkVariablesEP7QString+0x12b>
    10d7:	48 8d 85 30 fe ff ff 	lea    -0x1d0(%rbp),%rax
    10de:	48 89 c7             	mov    %rax,%rdi
    10e1:	e8 00 00 00 00       	callq  10e6 <_ZN6Parser14checkVariablesEP7QString+0x13a>
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    10e6:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
    10ed:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 10f4 <_ZN6Parser14checkVariablesEP7QString+0x148>
    10f4:	48 89 c7             	mov    %rax,%rdi
    10f7:	e8 00 00 00 00       	callq  10fc <_ZN6Parser14checkVariablesEP7QString+0x150>
    10fc:	48 8d b5 60 fe ff ff 	lea    -0x1a0(%rbp),%rsi
    1103:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    110a:	b9 00 00 00 00       	mov    $0x0,%ecx
    110f:	ba 01 00 00 00       	mov    $0x1,%edx
    1114:	48 89 c7             	mov    %rax,%rdi
    1117:	e8 00 00 00 00       	callq  111c <_ZN6Parser14checkVariablesEP7QString+0x170>
    111c:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
    1123:	48 89 c7             	mov    %rax,%rdi
    1126:	e8 00 00 00 00       	callq  112b <_ZN6Parser14checkVariablesEP7QString+0x17f>
    QRegExp erxVarName("\\w+");
    112b:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
    1132:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1139 <_ZN6Parser14checkVariablesEP7QString+0x18d>
    1139:	48 89 c7             	mov    %rax,%rdi
    113c:	e8 00 00 00 00       	callq  1141 <_ZN6Parser14checkVariablesEP7QString+0x195>
    1141:	48 8d b5 80 fe ff ff 	lea    -0x180(%rbp),%rsi
    1148:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    114f:	b9 00 00 00 00       	mov    $0x0,%ecx
    1154:	ba 01 00 00 00       	mov    $0x1,%edx
    1159:	48 89 c7             	mov    %rax,%rdi
    115c:	e8 00 00 00 00       	callq  1161 <_ZN6Parser14checkVariablesEP7QString+0x1b5>
    1161:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
    1168:	48 89 c7             	mov    %rax,%rdi
    116b:	e8 00 00 00 00       	callq  1170 <_ZN6Parser14checkVariablesEP7QString+0x1c4>

    QStringList types;
    1170:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    1177:	48 89 c7             	mov    %rax,%rdi
    117a:	e8 00 00 00 00       	callq  117f <_ZN6Parser14checkVariablesEP7QString+0x1d3>
    QStringList list;
    117f:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    1186:	48 89 c7             	mov    %rax,%rdi
    1189:	e8 00 00 00 00       	callq  118e <_ZN6Parser14checkVariablesEP7QString+0x1e2>
    QStringList vars;
    118e:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    1195:	48 89 c7             	mov    %rax,%rdi
    1198:	e8 00 00 00 00       	callq  119d <_ZN6Parser14checkVariablesEP7QString+0x1f1>

    int pos = 0;
    119d:	c7 85 c4 fd ff ff 00 	movl   $0x0,-0x23c(%rbp)
    11a4:	00 00 00 

    while ((pos = erx.indexIn(*str, pos)) != -1) {
    11a7:	8b 95 c4 fd ff ff    	mov    -0x23c(%rbp),%edx
    11ad:	48 8b b5 b0 fd ff ff 	mov    -0x250(%rbp),%rsi
    11b4:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
    11bb:	b9 00 00 00 00       	mov    $0x0,%ecx
    11c0:	48 89 c7             	mov    %rax,%rdi
    11c3:	e8 00 00 00 00       	callq  11c8 <_ZN6Parser14checkVariablesEP7QString+0x21c>
    11c8:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%rbp)
    11ce:	83 bd c4 fd ff ff ff 	cmpl   $0xffffffff,-0x23c(%rbp)
    11d5:	0f 95 c0             	setne  %al
    11d8:	84 c0                	test   %al,%al
    11da:	0f 84 68 01 00 00    	je     1348 <_ZN6Parser14checkVariablesEP7QString+0x39c>
         types << erx.cap(1);
    11e0:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    11e7:	48 8d 8d 20 fe ff ff 	lea    -0x1e0(%rbp),%rcx
    11ee:	ba 01 00 00 00       	mov    $0x1,%edx
    11f3:	48 89 ce             	mov    %rcx,%rsi
    11f6:	48 89 c7             	mov    %rax,%rdi
    11f9:	e8 00 00 00 00       	callq  11fe <_ZN6Parser14checkVariablesEP7QString+0x252>
    11fe:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
    1205:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    120c:	48 89 d6             	mov    %rdx,%rsi
    120f:	48 89 c7             	mov    %rax,%rdi
    1212:	e8 00 00 00 00       	callq  1217 <_ZN6Parser14checkVariablesEP7QString+0x26b>
    1217:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    121e:	48 89 c7             	mov    %rax,%rdi
    1221:	e8 00 00 00 00       	callq  1226 <_ZN6Parser14checkVariablesEP7QString+0x27a>
         list << erx.cap(2);
    1226:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    122d:	48 8d 8d 20 fe ff ff 	lea    -0x1e0(%rbp),%rcx
    1234:	ba 02 00 00 00       	mov    $0x2,%edx
    1239:	48 89 ce             	mov    %rcx,%rsi
    123c:	48 89 c7             	mov    %rax,%rdi
    123f:	e8 00 00 00 00       	callq  1244 <_ZN6Parser14checkVariablesEP7QString+0x298>
    1244:	48 8d 95 d0 fe ff ff 	lea    -0x130(%rbp),%rdx
    124b:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    1252:	48 89 d6             	mov    %rdx,%rsi
    1255:	48 89 c7             	mov    %rax,%rdi
    1258:	e8 00 00 00 00       	callq  125d <_ZN6Parser14checkVariablesEP7QString+0x2b1>
    125d:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    1264:	48 89 c7             	mov    %rax,%rdi
    1267:	e8 00 00 00 00       	callq  126c <_ZN6Parser14checkVariablesEP7QString+0x2c0>
         pos += erx.matchedLength();
    126c:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
    1273:	48 89 c7             	mov    %rax,%rdi
    1276:	e8 00 00 00 00       	callq  127b <_ZN6Parser14checkVariablesEP7QString+0x2cf>
    127b:	01 85 c4 fd ff ff    	add    %eax,-0x23c(%rbp)

         vars = erx.cap(2).split(",");
    1281:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    1288:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 128f <_ZN6Parser14checkVariablesEP7QString+0x2e3>
    128f:	48 89 c7             	mov    %rax,%rdi
    1292:	e8 00 00 00 00       	callq  1297 <_ZN6Parser14checkVariablesEP7QString+0x2eb>
    1297:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    129e:	48 8d 8d 20 fe ff ff 	lea    -0x1e0(%rbp),%rcx
    12a5:	ba 02 00 00 00       	mov    $0x2,%edx
    12aa:	48 89 ce             	mov    %rcx,%rsi
    12ad:	48 89 c7             	mov    %rax,%rdi
    12b0:	e8 00 00 00 00       	callq  12b5 <_ZN6Parser14checkVariablesEP7QString+0x309>
    12b5:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    12bc:	48 8d 95 f0 fe ff ff 	lea    -0x110(%rbp),%rdx
    12c3:	48 8d b5 e0 fe ff ff 	lea    -0x120(%rbp),%rsi
    12ca:	41 b8 01 00 00 00    	mov    $0x1,%r8d
    12d0:	b9 00 00 00 00       	mov    $0x0,%ecx
    12d5:	48 89 c7             	mov    %rax,%rdi
    12d8:	e8 00 00 00 00       	callq  12dd <_ZN6Parser14checkVariablesEP7QString+0x331>
    12dd:	48 8d 95 00 ff ff ff 	lea    -0x100(%rbp),%rdx
    12e4:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    12eb:	48 89 d6             	mov    %rdx,%rsi
    12ee:	48 89 c7             	mov    %rax,%rdi
    12f1:	e8 00 00 00 00       	callq  12f6 <_ZN6Parser14checkVariablesEP7QString+0x34a>
    12f6:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    12fd:	48 89 c7             	mov    %rax,%rdi
    1300:	e8 00 00 00 00       	callq  1305 <_ZN6Parser14checkVariablesEP7QString+0x359>
    1305:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    130c:	48 89 c7             	mov    %rax,%rdi
    130f:	e8 00 00 00 00       	callq  1314 <_ZN6Parser14checkVariablesEP7QString+0x368>
    1314:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    131b:	48 89 c7             	mov    %rax,%rdi
    131e:	e8 00 00 00 00       	callq  1323 <_ZN6Parser14checkVariablesEP7QString+0x377>

         this->variables << vars;
    1323:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    132a:	48 8d 90 c8 00 00 00 	lea    0xc8(%rax),%rdx
    1331:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    1338:	48 89 c6             	mov    %rax,%rsi
    133b:	48 89 d7             	mov    %rdx,%rdi
    133e:	e8 00 00 00 00       	callq  1343 <_ZN6Parser14checkVariablesEP7QString+0x397>
    QStringList list;
    QStringList vars;

    int pos = 0;

    while ((pos = erx.indexIn(*str, pos)) != -1) {
    1343:	e9 5f fe ff ff       	jmpq   11a7 <_ZN6Parser14checkVariablesEP7QString+0x1fb>

         vars = erx.cap(2).split(",");

         this->variables << vars;
    }
    this->variables.removeDuplicates();
    1348:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    134f:	48 05 c8 00 00 00    	add    $0xc8,%rax
    1355:	48 89 c7             	mov    %rax,%rdi
    1358:	e8 00 00 00 00       	callq  135d <_ZN6Parser14checkVariablesEP7QString+0x3b1>

    // Let's sort variables;
    QStringList::iterator it;
    135d:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    1364:	48 89 c7             	mov    %rax,%rdi
    1367:	e8 00 00 00 00       	callq  136c <_ZN6Parser14checkVariablesEP7QString+0x3c0>
    QString name, type, value;
    136c:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    1373:	48 89 c7             	mov    %rax,%rdi
    1376:	e8 00 00 00 00       	callq  137b <_ZN6Parser14checkVariablesEP7QString+0x3cf>
    137b:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    1382:	48 89 c7             	mov    %rax,%rdi
    1385:	e8 00 00 00 00       	callq  138a <_ZN6Parser14checkVariablesEP7QString+0x3de>
    138a:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    1391:	48 89 c7             	mov    %rax,%rdi
    1394:	e8 00 00 00 00       	callq  1399 <_ZN6Parser14checkVariablesEP7QString+0x3ed>

    for(it=this->variables.begin(); it!=this->variables.end(); ++it){
    1399:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    13a0:	48 8d 90 c8 00 00 00 	lea    0xc8(%rax),%rdx
    13a7:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    13ae:	48 89 d6             	mov    %rdx,%rsi
    13b1:	48 89 c7             	mov    %rax,%rdi
    13b4:	e8 00 00 00 00       	callq  13b9 <_ZN6Parser14checkVariablesEP7QString+0x40d>
    13b9:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
    13c0:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
    13c7:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    13ce:	48 8d 90 c8 00 00 00 	lea    0xc8(%rax),%rdx
    13d5:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    13dc:	48 89 d6             	mov    %rdx,%rsi
    13df:	48 89 c7             	mov    %rax,%rdi
    13e2:	e8 00 00 00 00       	callq  13e7 <_ZN6Parser14checkVariablesEP7QString+0x43b>
    13e7:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
    13ee:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    13f5:	48 89 d6             	mov    %rdx,%rsi
    13f8:	48 89 c7             	mov    %rax,%rdi
    13fb:	e8 00 00 00 00       	callq  1400 <_ZN6Parser14checkVariablesEP7QString+0x454>
    1400:	84 c0                	test   %al,%al
    1402:	0f 84 f2 03 00 00    	je     17fa <_ZN6Parser14checkVariablesEP7QString+0x84e>
        QString all = *it;
    1408:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    140f:	48 89 c7             	mov    %rax,%rdi
    1412:	e8 00 00 00 00       	callq  1417 <_ZN6Parser14checkVariablesEP7QString+0x46b>
    1417:	48 89 c2             	mov    %rax,%rdx
    141a:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    1421:	48 89 d6             	mov    %rdx,%rsi
    1424:	48 89 c7             	mov    %rax,%rdi
    1427:	e8 00 00 00 00       	callq  142c <_ZN6Parser14checkVariablesEP7QString+0x480>
        int ZZ =  erx_rgPort.indexIn(*it);
    142c:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    1433:	48 89 c7             	mov    %rax,%rdi
    1436:	e8 00 00 00 00       	callq  143b <_ZN6Parser14checkVariablesEP7QString+0x48f>
    143b:	48 89 c6             	mov    %rax,%rsi
    143e:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    1445:	b9 00 00 00 00       	mov    $0x0,%ecx
    144a:	ba 00 00 00 00       	mov    $0x0,%edx
    144f:	48 89 c7             	mov    %rax,%rdi
    1452:	e8 00 00 00 00       	callq  1457 <_ZN6Parser14checkVariablesEP7QString+0x4ab>
    1457:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%rbp)
        int YY = erxVarName.indexIn(*it);
    145d:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    1464:	48 89 c7             	mov    %rax,%rdi
    1467:	e8 00 00 00 00       	callq  146c <_ZN6Parser14checkVariablesEP7QString+0x4c0>
    146c:	48 89 c6             	mov    %rax,%rsi
    146f:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    1476:	b9 00 00 00 00       	mov    $0x0,%ecx
    147b:	ba 00 00 00 00       	mov    $0x0,%edx
    1480:	48 89 c7             	mov    %rax,%rdi
    1483:	e8 00 00 00 00       	callq  1488 <_ZN6Parser14checkVariablesEP7QString+0x4dc>
    1488:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%rbp)

        int Z = erx_rgPort.captureCount();
    148e:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    1495:	48 89 c7             	mov    %rax,%rdi
    1498:	e8 00 00 00 00       	callq  149d <_ZN6Parser14checkVariablesEP7QString+0x4f1>
    149d:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%rbp)
        int Y = erxVarName.captureCount();
    14a3:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    14aa:	48 89 c7             	mov    %rax,%rdi
    14ad:	e8 00 00 00 00       	callq  14b2 <_ZN6Parser14checkVariablesEP7QString+0x506>
    14b2:	89 85 dc fd ff ff    	mov    %eax,-0x224(%rbp)
        int iType = 4;
    14b8:	c7 85 c8 fd ff ff 04 	movl   $0x4,-0x238(%rbp)
    14bf:	00 00 00 

        if(ZZ>=0)
    14c2:	83 bd d0 fd ff ff 00 	cmpl   $0x0,-0x230(%rbp)
    14c9:	0f 88 07 02 00 00    	js     16d6 <_ZN6Parser14checkVariablesEP7QString+0x72a>
        {
            name  = erx_rgPort.cap(1);
    14cf:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    14d6:	48 8d 8d 50 fe ff ff 	lea    -0x1b0(%rbp),%rcx
    14dd:	ba 01 00 00 00       	mov    $0x1,%edx
    14e2:	48 89 ce             	mov    %rcx,%rsi
    14e5:	48 89 c7             	mov    %rax,%rdi
    14e8:	e8 00 00 00 00       	callq  14ed <_ZN6Parser14checkVariablesEP7QString+0x541>
    14ed:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    14f4:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    14fb:	48 89 d6             	mov    %rdx,%rsi
    14fe:	48 89 c7             	mov    %rax,%rdi
    1501:	e8 00 00 00 00       	callq  1506 <_ZN6Parser14checkVariablesEP7QString+0x55a>
    1506:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    150d:	48 89 c7             	mov    %rax,%rdi
    1510:	e8 00 00 00 00       	callq  1515 <_ZN6Parser14checkVariablesEP7QString+0x569>
            type  = erx_rgPort.cap(2); // nothing, register, port
    1515:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1519:	48 8d 8d 50 fe ff ff 	lea    -0x1b0(%rbp),%rcx
    1520:	ba 02 00 00 00       	mov    $0x2,%edx
    1525:	48 89 ce             	mov    %rcx,%rsi
    1528:	48 89 c7             	mov    %rax,%rdi
    152b:	e8 00 00 00 00       	callq  1530 <_ZN6Parser14checkVariablesEP7QString+0x584>
    1530:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    1534:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    153b:	48 89 d6             	mov    %rdx,%rsi
    153e:	48 89 c7             	mov    %rax,%rdi
    1541:	e8 00 00 00 00       	callq  1546 <_ZN6Parser14checkVariablesEP7QString+0x59a>
    1546:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    154a:	48 89 c7             	mov    %rax,%rdi
    154d:	e8 00 00 00 00       	callq  1552 <_ZN6Parser14checkVariablesEP7QString+0x5a6>
            value = erx_rgPort.cap(3);
    1552:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    1556:	48 8d 8d 50 fe ff ff 	lea    -0x1b0(%rbp),%rcx
    155d:	ba 03 00 00 00       	mov    $0x3,%edx
    1562:	48 89 ce             	mov    %rcx,%rsi
    1565:	48 89 c7             	mov    %rax,%rdi
    1568:	e8 00 00 00 00       	callq  156d <_ZN6Parser14checkVariablesEP7QString+0x5c1>
    156d:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    1571:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    1578:	48 89 d6             	mov    %rdx,%rsi
    157b:	48 89 c7             	mov    %rax,%rdi
    157e:	e8 00 00 00 00       	callq  1583 <_ZN6Parser14checkVariablesEP7QString+0x5d7>
    1583:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    1587:	48 89 c7             	mov    %rax,%rdi
    158a:	e8 00 00 00 00       	callq  158f <_ZN6Parser14checkVariablesEP7QString+0x5e3>

            this->varMap.insert(name, value + " (" + type + ")");
    158f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    1593:	48 8d 8d 40 ff ff ff 	lea    -0xc0(%rbp),%rcx
    159a:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 15a1 <_ZN6Parser14checkVariablesEP7QString+0x5f5>
    15a1:	48 89 ce             	mov    %rcx,%rsi
    15a4:	48 89 c7             	mov    %rax,%rdi
    15a7:	e8 00 00 00 00       	callq  15ac <_ZN6Parser14checkVariablesEP7QString+0x600>
    15ac:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    15b0:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
    15b7:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
    15bb:	48 89 ce             	mov    %rcx,%rsi
    15be:	48 89 c7             	mov    %rax,%rdi
    15c1:	e8 00 00 00 00       	callq  15c6 <_ZN6Parser14checkVariablesEP7QString+0x61a>
    15c6:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    15ca:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
    15ce:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 15d5 <_ZN6Parser14checkVariablesEP7QString+0x629>
    15d5:	48 89 ce             	mov    %rcx,%rsi
    15d8:	48 89 c7             	mov    %rax,%rdi
    15db:	e8 00 00 00 00       	callq  15e0 <_ZN6Parser14checkVariablesEP7QString+0x634>
    15e0:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    15e7:	48 8d 88 d8 00 00 00 	lea    0xd8(%rax),%rcx
    15ee:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    15f2:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    15f9:	48 89 c6             	mov    %rax,%rsi
    15fc:	48 89 cf             	mov    %rcx,%rdi
    15ff:	e8 00 00 00 00       	callq  1604 <_ZN6Parser14checkVariablesEP7QString+0x658>
    1604:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    1608:	48 89 c7             	mov    %rax,%rdi
    160b:	e8 00 00 00 00       	callq  1610 <_ZN6Parser14checkVariablesEP7QString+0x664>
    1610:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    1614:	48 89 c7             	mov    %rax,%rdi
    1617:	e8 00 00 00 00       	callq  161c <_ZN6Parser14checkVariablesEP7QString+0x670>
    161c:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    1620:	48 89 c7             	mov    %rax,%rdi
    1623:	e8 00 00 00 00       	callq  1628 <_ZN6Parser14checkVariablesEP7QString+0x67c>

            if(type=="rg")      iType = 40;
    1628:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    162f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1636 <_ZN6Parser14checkVariablesEP7QString+0x68a>
    1636:	48 89 c7             	mov    %rax,%rdi
    1639:	e8 00 00 00 00       	callq  163e <_ZN6Parser14checkVariablesEP7QString+0x692>
    163e:	84 c0                	test   %al,%al
    1640:	74 0a                	je     164c <_ZN6Parser14checkVariablesEP7QString+0x6a0>
    1642:	c7 85 c8 fd ff ff 28 	movl   $0x28,-0x238(%rbp)
    1649:	00 00 00 
            if(type=="port")    iType = 80;
    164c:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    1653:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 165a <_ZN6Parser14checkVariablesEP7QString+0x6ae>
    165a:	48 89 c7             	mov    %rax,%rdi
    165d:	e8 00 00 00 00       	callq  1662 <_ZN6Parser14checkVariablesEP7QString+0x6b6>
    1662:	84 c0                	test   %al,%al
    1664:	74 0a                	je     1670 <_ZN6Parser14checkVariablesEP7QString+0x6c4>
    1666:	c7 85 c8 fd ff ff 50 	movl   $0x50,-0x238(%rbp)
    166d:	00 00 00 

            index++;
    1670:	83 85 c0 fd ff ff 01 	addl   $0x1,-0x240(%rbp)
            if(index>254) { /*error: index overflow */ }
            this->varIndexes.insert(name, index);
    1677:	8b 85 c0 fd ff ff    	mov    -0x240(%rbp),%eax
    167d:	88 45 e0             	mov    %al,-0x20(%rbp)
    1680:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    1687:	48 8d 48 68          	lea    0x68(%rax),%rcx
    168b:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    168f:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    1696:	48 89 c6             	mov    %rax,%rsi
    1699:	48 89 cf             	mov    %rcx,%rdi
    169c:	e8 00 00 00 00       	callq  16a1 <_ZN6Parser14checkVariablesEP7QString+0x6f5>
            this->varTypes.insert(index, iType);
    16a1:	8b 85 c8 fd ff ff    	mov    -0x238(%rbp),%eax
    16a7:	88 45 e0             	mov    %al,-0x20(%rbp)
    16aa:	8b 85 c0 fd ff ff    	mov    -0x240(%rbp),%eax
    16b0:	88 45 d0             	mov    %al,-0x30(%rbp)
    16b3:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    16ba:	48 8d 48 70          	lea    0x70(%rax),%rcx
    16be:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    16c2:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    16c6:	48 89 c6             	mov    %rax,%rsi
    16c9:	48 89 cf             	mov    %rcx,%rdi
    16cc:	e8 00 00 00 00       	callq  16d1 <_ZN6Parser14checkVariablesEP7QString+0x725>
    16d1:	e9 e1 00 00 00       	jmpq   17b7 <_ZN6Parser14checkVariablesEP7QString+0x80b>

        }else
            {
                index++;
    16d6:	83 85 c0 fd ff ff 01 	addl   $0x1,-0x240(%rbp)
                name = erxVarName.cap(0);
    16dd:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    16e1:	48 8d 8d 70 fe ff ff 	lea    -0x190(%rbp),%rcx
    16e8:	ba 00 00 00 00       	mov    $0x0,%edx
    16ed:	48 89 ce             	mov    %rcx,%rsi
    16f0:	48 89 c7             	mov    %rax,%rdi
    16f3:	e8 00 00 00 00       	callq  16f8 <_ZN6Parser14checkVariablesEP7QString+0x74c>
    16f8:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    16fc:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    1703:	48 89 d6             	mov    %rdx,%rsi
    1706:	48 89 c7             	mov    %rax,%rdi
    1709:	e8 00 00 00 00       	callq  170e <_ZN6Parser14checkVariablesEP7QString+0x762>
    170e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1712:	48 89 c7             	mov    %rax,%rdi
    1715:	e8 00 00 00 00       	callq  171a <_ZN6Parser14checkVariablesEP7QString+0x76e>
                this->varMap.insert(name, "");
    171a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    171e:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1725 <_ZN6Parser14checkVariablesEP7QString+0x779>
    1725:	48 89 c7             	mov    %rax,%rdi
    1728:	e8 00 00 00 00       	callq  172d <_ZN6Parser14checkVariablesEP7QString+0x781>
    172d:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    1734:	48 8d 88 d8 00 00 00 	lea    0xd8(%rax),%rcx
    173b:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    173f:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    1746:	48 89 c6             	mov    %rax,%rsi
    1749:	48 89 cf             	mov    %rcx,%rdi
    174c:	e8 00 00 00 00       	callq  1751 <_ZN6Parser14checkVariablesEP7QString+0x7a5>
    1751:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1755:	48 89 c7             	mov    %rax,%rdi
    1758:	e8 00 00 00 00       	callq  175d <_ZN6Parser14checkVariablesEP7QString+0x7b1>

                this->varIndexes.insert(name, index);
    175d:	8b 85 c0 fd ff ff    	mov    -0x240(%rbp),%eax
    1763:	88 45 e0             	mov    %al,-0x20(%rbp)
    1766:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    176d:	48 8d 48 68          	lea    0x68(%rax),%rcx
    1771:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    1775:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    177c:	48 89 c6             	mov    %rax,%rsi
    177f:	48 89 cf             	mov    %rcx,%rdi
    1782:	e8 00 00 00 00       	callq  1787 <_ZN6Parser14checkVariablesEP7QString+0x7db>
                this->varTypes.insert(index, iType);
    1787:	8b 85 c8 fd ff ff    	mov    -0x238(%rbp),%eax
    178d:	88 45 e0             	mov    %al,-0x20(%rbp)
    1790:	8b 85 c0 fd ff ff    	mov    -0x240(%rbp),%eax
    1796:	88 45 d0             	mov    %al,-0x30(%rbp)
    1799:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    17a0:	48 8d 48 70          	lea    0x70(%rax),%rcx
    17a4:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    17a8:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    17ac:	48 89 c6             	mov    %rax,%rsi
    17af:	48 89 cf             	mov    %rcx,%rdi
    17b2:	e8 00 00 00 00       	callq  17b7 <_ZN6Parser14checkVariablesEP7QString+0x80b>
            }
        this->indexBase.append(name); // Great! It is indexes of variables.
    17b7:	48 8b 85 b8 fd ff ff 	mov    -0x248(%rbp),%rax
    17be:	48 8d 90 d0 00 00 00 	lea    0xd0(%rax),%rdx
    17c5:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    17cc:	48 89 c6             	mov    %rax,%rsi
    17cf:	48 89 d7             	mov    %rdx,%rdi
    17d2:	e8 00 00 00 00       	callq  17d7 <_ZN6Parser14checkVariablesEP7QString+0x82b>
    // Let's sort variables;
    QStringList::iterator it;
    QString name, type, value;

    for(it=this->variables.begin(); it!=this->variables.end(); ++it){
        QString all = *it;
    17d7:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    17de:	48 89 c7             	mov    %rax,%rdi
    17e1:	e8 00 00 00 00       	callq  17e6 <_ZN6Parser14checkVariablesEP7QString+0x83a>

    // Let's sort variables;
    QStringList::iterator it;
    QString name, type, value;

    for(it=this->variables.begin(); it!=this->variables.end(); ++it){
    17e6:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    17ed:	48 89 c7             	mov    %rax,%rdi
    17f0:	e8 00 00 00 00       	callq  17f5 <_ZN6Parser14checkVariablesEP7QString+0x849>
    17f5:	e9 cd fb ff ff       	jmpq   13c7 <_ZN6Parser14checkVariablesEP7QString+0x41b>
                this->varIndexes.insert(name, index);
                this->varTypes.insert(index, iType);
            }
        this->indexBase.append(name); // Great! It is indexes of variables.
    }
    return varCount;
    17fa:	8b 9d cc fd ff ff    	mov    -0x234(%rbp),%ebx
    }
    this->variables.removeDuplicates();

    // Let's sort variables;
    QStringList::iterator it;
    QString name, type, value;
    1800:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    1807:	48 89 c7             	mov    %rax,%rdi
    180a:	e8 00 00 00 00       	callq  180f <_ZN6Parser14checkVariablesEP7QString+0x863>
    180f:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    1816:	48 89 c7             	mov    %rax,%rdi
    1819:	e8 00 00 00 00       	callq  181e <_ZN6Parser14checkVariablesEP7QString+0x872>
    181e:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    1825:	48 89 c7             	mov    %rax,%rdi
    1828:	e8 00 00 00 00       	callq  182d <_ZN6Parser14checkVariablesEP7QString+0x881>
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    QRegExp erxVarName("\\w+");

    QStringList types;
    QStringList list;
    QStringList vars;
    182d:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    1834:	48 89 c7             	mov    %rax,%rdi
    1837:	e8 00 00 00 00       	callq  183c <_ZN6Parser14checkVariablesEP7QString+0x890>
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    QRegExp erxVarName("\\w+");

    QStringList types;
    QStringList list;
    183c:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    1843:	48 89 c7             	mov    %rax,%rdi
    1846:	e8 00 00 00 00       	callq  184b <_ZN6Parser14checkVariablesEP7QString+0x89f>
    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    QRegExp erxVarName("\\w+");

    QStringList types;
    184b:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    1852:	48 89 c7             	mov    %rax,%rdi
    1855:	e8 00 00 00 00       	callq  185a <_ZN6Parser14checkVariablesEP7QString+0x8ae>
    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    QRegExp erxVarName("\\w+");
    185a:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    1861:	48 89 c7             	mov    %rax,%rdi
    1864:	e8 00 00 00 00       	callq  1869 <_ZN6Parser14checkVariablesEP7QString+0x8bd>

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    1869:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    1870:	48 89 c7             	mov    %rax,%rdi
    1873:	e8 00 00 00 00       	callq  1878 <_ZN6Parser14checkVariablesEP7QString+0x8cc>
    int index   = 0;

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    1878:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
    187f:	48 89 c7             	mov    %rax,%rdi
    1882:	e8 00 00 00 00       	callq  1887 <_ZN6Parser14checkVariablesEP7QString+0x8db>
    int varCount    = 0;
    int index   = 0;

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    1887:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
    188e:	48 89 c7             	mov    %rax,%rdi
    1891:	e8 00 00 00 00       	callq  1896 <_ZN6Parser14checkVariablesEP7QString+0x8ea>

int Parser::checkVariables(QString *str){
    int varCount    = 0;
    int index   = 0;

    VarTypes VT;
    1896:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
    189d:	48 89 c7             	mov    %rax,%rdi
    18a0:	e8 00 00 00 00       	callq  18a5 <_ZN6Parser14checkVariablesEP7QString+0x8f9>
                this->varIndexes.insert(name, index);
                this->varTypes.insert(index, iType);
            }
        this->indexBase.append(name); // Great! It is indexes of variables.
    }
    return varCount;
    18a5:	89 d8                	mov    %ebx,%eax
}
    18a7:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    18ab:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    18b2:	00 00 
    18b4:	0f 84 03 03 00 00    	je     1bbd <_ZN6Parser14checkVariablesEP7QString+0xc11>
    18ba:	e9 f9 02 00 00       	jmpq   1bb8 <_ZN6Parser14checkVariablesEP7QString+0xc0c>
    18bf:	48 89 c3             	mov    %rax,%rbx
    18c2:	48 8d 85 10 fe ff ff 	lea    -0x1f0(%rbp),%rax
    18c9:	48 89 c7             	mov    %rax,%rdi
    18cc:	e8 00 00 00 00       	callq  18d1 <_ZN6Parser14checkVariablesEP7QString+0x925>
    18d1:	eb 17                	jmp    18ea <_ZN6Parser14checkVariablesEP7QString+0x93e>
    18d3:	48 89 c3             	mov    %rax,%rbx
    18d6:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
    18dd:	48 89 c7             	mov    %rax,%rdi
    18e0:	e8 00 00 00 00       	callq  18e5 <_ZN6Parser14checkVariablesEP7QString+0x939>
    18e5:	eb 03                	jmp    18ea <_ZN6Parser14checkVariablesEP7QString+0x93e>
    18e7:	48 89 c3             	mov    %rax,%rbx
    18ea:	48 8d 85 00 fe ff ff 	lea    -0x200(%rbp),%rax
    18f1:	48 89 c7             	mov    %rax,%rdi
    18f4:	e8 00 00 00 00       	callq  18f9 <_ZN6Parser14checkVariablesEP7QString+0x94d>
    18f9:	e9 a0 02 00 00       	jmpq   1b9e <_ZN6Parser14checkVariablesEP7QString+0xbf2>
    18fe:	48 89 c3             	mov    %rax,%rbx
    1901:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
    1908:	48 89 c7             	mov    %rax,%rdi
    190b:	e8 00 00 00 00       	callq  1910 <_ZN6Parser14checkVariablesEP7QString+0x964>
    1910:	e9 89 02 00 00       	jmpq   1b9e <_ZN6Parser14checkVariablesEP7QString+0xbf2>
    1915:	48 89 c3             	mov    %rax,%rbx
    1918:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
    191f:	48 89 c7             	mov    %rax,%rdi
    1922:	e8 00 00 00 00       	callq  1927 <_ZN6Parser14checkVariablesEP7QString+0x97b>
    1927:	eb 17                	jmp    1940 <_ZN6Parser14checkVariablesEP7QString+0x994>
    1929:	48 89 c3             	mov    %rax,%rbx
    192c:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
    1933:	48 89 c7             	mov    %rax,%rdi
    1936:	e8 00 00 00 00       	callq  193b <_ZN6Parser14checkVariablesEP7QString+0x98f>
    193b:	eb 03                	jmp    1940 <_ZN6Parser14checkVariablesEP7QString+0x994>
    193d:	48 89 c3             	mov    %rax,%rbx
    1940:	48 8d 85 30 fe ff ff 	lea    -0x1d0(%rbp),%rax
    1947:	48 89 c7             	mov    %rax,%rdi
    194a:	e8 00 00 00 00       	callq  194f <_ZN6Parser14checkVariablesEP7QString+0x9a3>
    194f:	e9 36 02 00 00       	jmpq   1b8a <_ZN6Parser14checkVariablesEP7QString+0xbde>
    1954:	48 89 c3             	mov    %rax,%rbx
    1957:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
    195e:	48 89 c7             	mov    %rax,%rdi
    1961:	e8 00 00 00 00       	callq  1966 <_ZN6Parser14checkVariablesEP7QString+0x9ba>
    1966:	e9 1f 02 00 00       	jmpq   1b8a <_ZN6Parser14checkVariablesEP7QString+0xbde>
    196b:	48 89 c3             	mov    %rax,%rbx
    196e:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
    1975:	48 89 c7             	mov    %rax,%rdi
    1978:	e8 00 00 00 00       	callq  197d <_ZN6Parser14checkVariablesEP7QString+0x9d1>
    197d:	e9 f4 01 00 00       	jmpq   1b76 <_ZN6Parser14checkVariablesEP7QString+0xbca>
    1982:	48 89 c3             	mov    %rax,%rbx
    1985:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    198c:	48 89 c7             	mov    %rax,%rdi
    198f:	e8 00 00 00 00       	callq  1994 <_ZN6Parser14checkVariablesEP7QString+0x9e8>
    1994:	e9 dd 01 00 00       	jmpq   1b76 <_ZN6Parser14checkVariablesEP7QString+0xbca>
    1999:	48 89 c3             	mov    %rax,%rbx
    199c:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
    19a3:	48 89 c7             	mov    %rax,%rdi
    19a6:	e8 00 00 00 00       	callq  19ab <_ZN6Parser14checkVariablesEP7QString+0x9ff>
    19ab:	e9 b2 01 00 00       	jmpq   1b62 <_ZN6Parser14checkVariablesEP7QString+0xbb6>
    19b0:	48 89 c3             	mov    %rax,%rbx
    19b3:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    19ba:	48 89 c7             	mov    %rax,%rdi
    19bd:	e8 00 00 00 00       	callq  19c2 <_ZN6Parser14checkVariablesEP7QString+0xa16>
    19c2:	e9 9b 01 00 00       	jmpq   1b62 <_ZN6Parser14checkVariablesEP7QString+0xbb6>
    19c7:	48 89 c3             	mov    %rax,%rbx
    QStringList vars;

    int pos = 0;

    while ((pos = erx.indexIn(*str, pos)) != -1) {
         types << erx.cap(1);
    19ca:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    19d1:	48 89 c7             	mov    %rax,%rdi
    19d4:	e8 00 00 00 00       	callq  19d9 <_ZN6Parser14checkVariablesEP7QString+0xa2d>
    19d9:	e9 34 01 00 00       	jmpq   1b12 <_ZN6Parser14checkVariablesEP7QString+0xb66>
    19de:	48 89 c3             	mov    %rax,%rbx
         list << erx.cap(2);
    19e1:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    19e8:	48 89 c7             	mov    %rax,%rdi
    19eb:	e8 00 00 00 00       	callq  19f0 <_ZN6Parser14checkVariablesEP7QString+0xa44>
    19f0:	e9 1d 01 00 00       	jmpq   1b12 <_ZN6Parser14checkVariablesEP7QString+0xb66>
    19f5:	48 89 c3             	mov    %rax,%rbx
         pos += erx.matchedLength();

         vars = erx.cap(2).split(",");
    19f8:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    19ff:	48 89 c7             	mov    %rax,%rdi
    1a02:	e8 00 00 00 00       	callq  1a07 <_ZN6Parser14checkVariablesEP7QString+0xa5b>
    1a07:	eb 03                	jmp    1a0c <_ZN6Parser14checkVariablesEP7QString+0xa60>
    1a09:	48 89 c3             	mov    %rax,%rbx
    1a0c:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    1a13:	48 89 c7             	mov    %rax,%rdi
    1a16:	e8 00 00 00 00       	callq  1a1b <_ZN6Parser14checkVariablesEP7QString+0xa6f>
    1a1b:	eb 03                	jmp    1a20 <_ZN6Parser14checkVariablesEP7QString+0xa74>
    1a1d:	48 89 c3             	mov    %rax,%rbx
    1a20:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    1a27:	48 89 c7             	mov    %rax,%rdi
    1a2a:	e8 00 00 00 00       	callq  1a2f <_ZN6Parser14checkVariablesEP7QString+0xa83>
    1a2f:	e9 de 00 00 00       	jmpq   1b12 <_ZN6Parser14checkVariablesEP7QString+0xb66>
    1a34:	48 89 c3             	mov    %rax,%rbx
        int Y = erxVarName.captureCount();
        int iType = 4;

        if(ZZ>=0)
        {
            name  = erx_rgPort.cap(1);
    1a37:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1a3e:	48 89 c7             	mov    %rax,%rdi
    1a41:	e8 00 00 00 00       	callq  1a46 <_ZN6Parser14checkVariablesEP7QString+0xa9a>
    1a46:	eb 7a                	jmp    1ac2 <_ZN6Parser14checkVariablesEP7QString+0xb16>
    1a48:	48 89 c3             	mov    %rax,%rbx
            type  = erx_rgPort.cap(2); // nothing, register, port
    1a4b:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1a4f:	48 89 c7             	mov    %rax,%rdi
    1a52:	e8 00 00 00 00       	callq  1a57 <_ZN6Parser14checkVariablesEP7QString+0xaab>
    1a57:	eb 69                	jmp    1ac2 <_ZN6Parser14checkVariablesEP7QString+0xb16>
    1a59:	48 89 c3             	mov    %rax,%rbx
            value = erx_rgPort.cap(3);
    1a5c:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    1a60:	48 89 c7             	mov    %rax,%rdi
    1a63:	e8 00 00 00 00       	callq  1a68 <_ZN6Parser14checkVariablesEP7QString+0xabc>
    1a68:	eb 58                	jmp    1ac2 <_ZN6Parser14checkVariablesEP7QString+0xb16>
    1a6a:	48 89 c3             	mov    %rax,%rbx

            this->varMap.insert(name, value + " (" + type + ")");
    1a6d:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    1a71:	48 89 c7             	mov    %rax,%rdi
    1a74:	e8 00 00 00 00       	callq  1a79 <_ZN6Parser14checkVariablesEP7QString+0xacd>
    1a79:	eb 03                	jmp    1a7e <_ZN6Parser14checkVariablesEP7QString+0xad2>
    1a7b:	48 89 c3             	mov    %rax,%rbx
    1a7e:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    1a82:	48 89 c7             	mov    %rax,%rdi
    1a85:	e8 00 00 00 00       	callq  1a8a <_ZN6Parser14checkVariablesEP7QString+0xade>
    1a8a:	eb 03                	jmp    1a8f <_ZN6Parser14checkVariablesEP7QString+0xae3>
    1a8c:	48 89 c3             	mov    %rax,%rbx
    1a8f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    1a93:	48 89 c7             	mov    %rax,%rdi
    1a96:	e8 00 00 00 00       	callq  1a9b <_ZN6Parser14checkVariablesEP7QString+0xaef>
    1a9b:	eb 25                	jmp    1ac2 <_ZN6Parser14checkVariablesEP7QString+0xb16>
    1a9d:	48 89 c3             	mov    %rax,%rbx
            this->varTypes.insert(index, iType);

        }else
            {
                index++;
                name = erxVarName.cap(0);
    1aa0:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1aa4:	48 89 c7             	mov    %rax,%rdi
    1aa7:	e8 00 00 00 00       	callq  1aac <_ZN6Parser14checkVariablesEP7QString+0xb00>
    1aac:	eb 14                	jmp    1ac2 <_ZN6Parser14checkVariablesEP7QString+0xb16>
    1aae:	48 89 c3             	mov    %rax,%rbx
                this->varMap.insert(name, "");
    1ab1:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1ab5:	48 89 c7             	mov    %rax,%rdi
    1ab8:	e8 00 00 00 00       	callq  1abd <_ZN6Parser14checkVariablesEP7QString+0xb11>
    1abd:	eb 03                	jmp    1ac2 <_ZN6Parser14checkVariablesEP7QString+0xb16>
    1abf:	48 89 c3             	mov    %rax,%rbx
    // Let's sort variables;
    QStringList::iterator it;
    QString name, type, value;

    for(it=this->variables.begin(); it!=this->variables.end(); ++it){
        QString all = *it;
    1ac2:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    1ac9:	48 89 c7             	mov    %rax,%rdi
    1acc:	e8 00 00 00 00       	callq  1ad1 <_ZN6Parser14checkVariablesEP7QString+0xb25>
    1ad1:	eb 03                	jmp    1ad6 <_ZN6Parser14checkVariablesEP7QString+0xb2a>
    1ad3:	48 89 c3             	mov    %rax,%rbx
    }
    this->variables.removeDuplicates();

    // Let's sort variables;
    QStringList::iterator it;
    QString name, type, value;
    1ad6:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    1add:	48 89 c7             	mov    %rax,%rdi
    1ae0:	e8 00 00 00 00       	callq  1ae5 <_ZN6Parser14checkVariablesEP7QString+0xb39>
    1ae5:	eb 03                	jmp    1aea <_ZN6Parser14checkVariablesEP7QString+0xb3e>
    1ae7:	48 89 c3             	mov    %rax,%rbx
    1aea:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    1af1:	48 89 c7             	mov    %rax,%rdi
    1af4:	e8 00 00 00 00       	callq  1af9 <_ZN6Parser14checkVariablesEP7QString+0xb4d>
    1af9:	eb 03                	jmp    1afe <_ZN6Parser14checkVariablesEP7QString+0xb52>
    1afb:	48 89 c3             	mov    %rax,%rbx
    1afe:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    1b05:	48 89 c7             	mov    %rax,%rdi
    1b08:	e8 00 00 00 00       	callq  1b0d <_ZN6Parser14checkVariablesEP7QString+0xb61>
    1b0d:	eb 03                	jmp    1b12 <_ZN6Parser14checkVariablesEP7QString+0xb66>
    1b0f:	48 89 c3             	mov    %rax,%rbx
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    QRegExp erxVarName("\\w+");

    QStringList types;
    QStringList list;
    QStringList vars;
    1b12:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    1b19:	48 89 c7             	mov    %rax,%rdi
    1b1c:	e8 00 00 00 00       	callq  1b21 <_ZN6Parser14checkVariablesEP7QString+0xb75>
    1b21:	eb 03                	jmp    1b26 <_ZN6Parser14checkVariablesEP7QString+0xb7a>
    1b23:	48 89 c3             	mov    %rax,%rbx
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    QRegExp erxVarName("\\w+");

    QStringList types;
    QStringList list;
    1b26:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    1b2d:	48 89 c7             	mov    %rax,%rdi
    1b30:	e8 00 00 00 00       	callq  1b35 <_ZN6Parser14checkVariablesEP7QString+0xb89>
    1b35:	eb 03                	jmp    1b3a <_ZN6Parser14checkVariablesEP7QString+0xb8e>
    1b37:	48 89 c3             	mov    %rax,%rbx
    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    QRegExp erxVarName("\\w+");

    QStringList types;
    1b3a:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    1b41:	48 89 c7             	mov    %rax,%rdi
    1b44:	e8 00 00 00 00       	callq  1b49 <_ZN6Parser14checkVariablesEP7QString+0xb9d>
    1b49:	eb 03                	jmp    1b4e <_ZN6Parser14checkVariablesEP7QString+0xba2>
    1b4b:	48 89 c3             	mov    %rax,%rbx
    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    QRegExp erxVarName("\\w+");
    1b4e:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    1b55:	48 89 c7             	mov    %rax,%rdi
    1b58:	e8 00 00 00 00       	callq  1b5d <_ZN6Parser14checkVariablesEP7QString+0xbb1>
    1b5d:	eb 03                	jmp    1b62 <_ZN6Parser14checkVariablesEP7QString+0xbb6>
    1b5f:	48 89 c3             	mov    %rax,%rbx

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    QRegExp erx_rgPort("([\\w\\d\\_]*)[\\s\\t]*\\:[\\s\\t]*(port|rg)[\\s\\t]*\\:[\\s\\t]*([\\w\\d\\_]*)");
    1b62:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    1b69:	48 89 c7             	mov    %rax,%rdi
    1b6c:	e8 00 00 00 00       	callq  1b71 <_ZN6Parser14checkVariablesEP7QString+0xbc5>
    1b71:	eb 03                	jmp    1b76 <_ZN6Parser14checkVariablesEP7QString+0xbca>
    1b73:	48 89 c3             	mov    %rax,%rbx
    int index   = 0;

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    QRegExp erx(VT.getRegExpQueue()+"[\\s\\t]*([^\\n]*)\\;");
    1b76:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
    1b7d:	48 89 c7             	mov    %rax,%rdi
    1b80:	e8 00 00 00 00       	callq  1b85 <_ZN6Parser14checkVariablesEP7QString+0xbd9>
    1b85:	eb 03                	jmp    1b8a <_ZN6Parser14checkVariablesEP7QString+0xbde>
    1b87:	48 89 c3             	mov    %rax,%rbx
    int varCount    = 0;
    int index   = 0;

    VarTypes VT;

    QRegExp rx(VT.getRegExpQueue()+"[\\s+](\\w+)");
    1b8a:	48 8d 85 f0 fd ff ff 	lea    -0x210(%rbp),%rax
    1b91:	48 89 c7             	mov    %rax,%rdi
    1b94:	e8 00 00 00 00       	callq  1b99 <_ZN6Parser14checkVariablesEP7QString+0xbed>
    1b99:	eb 03                	jmp    1b9e <_ZN6Parser14checkVariablesEP7QString+0xbf2>
    1b9b:	48 89 c3             	mov    %rax,%rbx

int Parser::checkVariables(QString *str){
    int varCount    = 0;
    int index   = 0;

    VarTypes VT;
    1b9e:	48 8d 85 e0 fd ff ff 	lea    -0x220(%rbp),%rax
    1ba5:	48 89 c7             	mov    %rax,%rdi
    1ba8:	e8 00 00 00 00       	callq  1bad <_ZN6Parser14checkVariablesEP7QString+0xc01>
    1bad:	48 89 d8             	mov    %rbx,%rax
    1bb0:	48 89 c7             	mov    %rax,%rdi
    1bb3:	e8 00 00 00 00       	callq  1bb8 <_ZN6Parser14checkVariablesEP7QString+0xc0c>
                this->varTypes.insert(index, iType);
            }
        this->indexBase.append(name); // Great! It is indexes of variables.
    }
    return varCount;
}
    1bb8:	e8 00 00 00 00       	callq  1bbd <_ZN6Parser14checkVariablesEP7QString+0xc11>
    1bbd:	48 81 c4 48 02 00 00 	add    $0x248,%rsp
    1bc4:	5b                   	pop    %rbx
    1bc5:	5d                   	pop    %rbp
    1bc6:	c3                   	retq   
    1bc7:	90                   	nop

0000000000001bc8 <_ZN6Parser17QStringList_printE11QStringList>:

QString Parser::QStringList_print(QStringList list)
{
    1bc8:	55                   	push   %rbp
    1bc9:	48 89 e5             	mov    %rsp,%rbp
    1bcc:	53                   	push   %rbx
    1bcd:	48 81 ec b8 00 00 00 	sub    $0xb8,%rsp
    1bd4:	48 89 bd 58 ff ff ff 	mov    %rdi,-0xa8(%rbp)
    1bdb:	48 89 b5 50 ff ff ff 	mov    %rsi,-0xb0(%rbp)
    1be2:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
    1be9:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    1bf0:	00 00 
    1bf2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    1bf6:	31 c0                	xor    %eax,%eax
    int cnt = 0;
    1bf8:	c7 85 6c ff ff ff 00 	movl   $0x0,-0x94(%rbp)
    1bff:	00 00 00 
    QString result;
    1c02:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1c09:	48 89 c7             	mov    %rax,%rdi
    1c0c:	e8 00 00 00 00       	callq  1c11 <_ZN6Parser17QStringList_printE11QStringList+0x49>
    QStringList::const_iterator it;
    1c11:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1c15:	48 89 c7             	mov    %rax,%rdi
    1c18:	e8 00 00 00 00       	callq  1c1d <_ZN6Parser17QStringList_printE11QStringList+0x55>
    for(it=list.constBegin(); it!=list.constEnd(); ++it)
    1c1d:	48 8b 95 48 ff ff ff 	mov    -0xb8(%rbp),%rdx
    1c24:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    1c28:	48 89 d6             	mov    %rdx,%rsi
    1c2b:	48 89 c7             	mov    %rax,%rdi
    1c2e:	e8 00 00 00 00       	callq  1c33 <_ZN6Parser17QStringList_printE11QStringList+0x6b>
    1c33:	48 8b 45 90          	mov    -0x70(%rbp),%rax
    1c37:	48 89 45 80          	mov    %rax,-0x80(%rbp)
    1c3b:	48 8b 95 48 ff ff ff 	mov    -0xb8(%rbp),%rdx
    1c42:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    1c46:	48 89 d6             	mov    %rdx,%rsi
    1c49:	48 89 c7             	mov    %rax,%rdi
    1c4c:	e8 00 00 00 00       	callq  1c51 <_ZN6Parser17QStringList_printE11QStringList+0x89>
    1c51:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    1c55:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1c59:	48 89 d6             	mov    %rdx,%rsi
    1c5c:	48 89 c7             	mov    %rax,%rdi
    1c5f:	e8 00 00 00 00       	callq  1c64 <_ZN6Parser17QStringList_printE11QStringList+0x9c>
    1c64:	84 c0                	test   %al,%al
    1c66:	0f 84 e0 00 00 00    	je     1d4c <_ZN6Parser17QStringList_printE11QStringList+0x184>
    {
        result.append("\nlist["+QString::number(cnt)+"]");
    1c6c:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    1c70:	8b 8d 6c ff ff ff    	mov    -0x94(%rbp),%ecx
    1c76:	ba 0a 00 00 00       	mov    $0xa,%edx
    1c7b:	89 ce                	mov    %ecx,%esi
    1c7d:	48 89 c7             	mov    %rax,%rdi
    1c80:	e8 00 00 00 00       	callq  1c85 <_ZN6Parser17QStringList_printE11QStringList+0xbd>
    1c85:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    1c89:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    1c8d:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1c94 <_ZN6Parser17QStringList_printE11QStringList+0xcc>
    1c94:	48 89 c7             	mov    %rax,%rdi
    1c97:	e8 00 00 00 00       	callq  1c9c <_ZN6Parser17QStringList_printE11QStringList+0xd4>
    1c9c:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1ca0:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
    1ca4:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 1cab <_ZN6Parser17QStringList_printE11QStringList+0xe3>
    1cab:	48 89 ce             	mov    %rcx,%rsi
    1cae:	48 89 c7             	mov    %rax,%rdi
    1cb1:	e8 00 00 00 00       	callq  1cb6 <_ZN6Parser17QStringList_printE11QStringList+0xee>
    1cb6:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    1cba:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1cc1:	48 89 d6             	mov    %rdx,%rsi
    1cc4:	48 89 c7             	mov    %rax,%rdi
    1cc7:	e8 00 00 00 00       	callq  1ccc <_ZN6Parser17QStringList_printE11QStringList+0x104>
    1ccc:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1cd0:	48 89 c7             	mov    %rax,%rdi
    1cd3:	e8 00 00 00 00       	callq  1cd8 <_ZN6Parser17QStringList_printE11QStringList+0x110>
    1cd8:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    1cdc:	48 89 c7             	mov    %rax,%rdi
    1cdf:	e8 00 00 00 00       	callq  1ce4 <_ZN6Parser17QStringList_printE11QStringList+0x11c>
    1ce4:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    1ce8:	48 89 c7             	mov    %rax,%rdi
    1ceb:	e8 00 00 00 00       	callq  1cf0 <_ZN6Parser17QStringList_printE11QStringList+0x128>
        result.append("\n" + *it);
    1cf0:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1cf4:	48 89 c7             	mov    %rax,%rdi
    1cf7:	e8 00 00 00 00       	callq  1cfc <_ZN6Parser17QStringList_printE11QStringList+0x134>
    1cfc:	48 89 c2             	mov    %rax,%rdx
    1cff:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1d03:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1d0a <_ZN6Parser17QStringList_printE11QStringList+0x142>
    1d0a:	48 89 c7             	mov    %rax,%rdi
    1d0d:	e8 00 00 00 00       	callq  1d12 <_ZN6Parser17QStringList_printE11QStringList+0x14a>
    1d12:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    1d16:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1d1d:	48 89 d6             	mov    %rdx,%rsi
    1d20:	48 89 c7             	mov    %rax,%rdi
    1d23:	e8 00 00 00 00       	callq  1d28 <_ZN6Parser17QStringList_printE11QStringList+0x160>
    1d28:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1d2c:	48 89 c7             	mov    %rax,%rdi
    1d2f:	e8 00 00 00 00       	callq  1d34 <_ZN6Parser17QStringList_printE11QStringList+0x16c>
        cnt++;
    1d34:	83 85 6c ff ff ff 01 	addl   $0x1,-0x94(%rbp)
QString Parser::QStringList_print(QStringList list)
{
    int cnt = 0;
    QString result;
    QStringList::const_iterator it;
    for(it=list.constBegin(); it!=list.constEnd(); ++it)
    1d3b:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1d3f:	48 89 c7             	mov    %rax,%rdi
    1d42:	e8 00 00 00 00       	callq  1d47 <_ZN6Parser17QStringList_printE11QStringList+0x17f>
    1d47:	e9 ef fe ff ff       	jmpq   1c3b <_ZN6Parser17QStringList_printE11QStringList+0x73>
}

QString Parser::QStringList_print(QStringList list)
{
    int cnt = 0;
    QString result;
    1d4c:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1d53:	48 89 c7             	mov    %rax,%rdi
    1d56:	e8 00 00 00 00       	callq  1d5b <_ZN6Parser17QStringList_printE11QStringList+0x193>
    {
        result.append("\nlist["+QString::number(cnt)+"]");
        result.append("\n" + *it);
        cnt++;
    }
}
    1d5b:	90                   	nop
    1d5c:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    1d63:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    1d67:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    1d6e:	00 00 
    1d70:	74 68                	je     1dda <_ZN6Parser17QStringList_printE11QStringList+0x212>
    1d72:	eb 61                	jmp    1dd5 <_ZN6Parser17QStringList_printE11QStringList+0x20d>
    1d74:	48 89 c3             	mov    %rax,%rbx
    int cnt = 0;
    QString result;
    QStringList::const_iterator it;
    for(it=list.constBegin(); it!=list.constEnd(); ++it)
    {
        result.append("\nlist["+QString::number(cnt)+"]");
    1d77:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1d7b:	48 89 c7             	mov    %rax,%rdi
    1d7e:	e8 00 00 00 00       	callq  1d83 <_ZN6Parser17QStringList_printE11QStringList+0x1bb>
    1d83:	eb 03                	jmp    1d88 <_ZN6Parser17QStringList_printE11QStringList+0x1c0>
    1d85:	48 89 c3             	mov    %rax,%rbx
    1d88:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    1d8c:	48 89 c7             	mov    %rax,%rdi
    1d8f:	e8 00 00 00 00       	callq  1d94 <_ZN6Parser17QStringList_printE11QStringList+0x1cc>
    1d94:	eb 03                	jmp    1d99 <_ZN6Parser17QStringList_printE11QStringList+0x1d1>
    1d96:	48 89 c3             	mov    %rax,%rbx
    1d99:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    1d9d:	48 89 c7             	mov    %rax,%rdi
    1da0:	e8 00 00 00 00       	callq  1da5 <_ZN6Parser17QStringList_printE11QStringList+0x1dd>
    1da5:	eb 14                	jmp    1dbb <_ZN6Parser17QStringList_printE11QStringList+0x1f3>
    1da7:	48 89 c3             	mov    %rax,%rbx
        result.append("\n" + *it);
    1daa:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1dae:	48 89 c7             	mov    %rax,%rdi
    1db1:	e8 00 00 00 00       	callq  1db6 <_ZN6Parser17QStringList_printE11QStringList+0x1ee>
    1db6:	eb 03                	jmp    1dbb <_ZN6Parser17QStringList_printE11QStringList+0x1f3>
    1db8:	48 89 c3             	mov    %rax,%rbx
}

QString Parser::QStringList_print(QStringList list)
{
    int cnt = 0;
    QString result;
    1dbb:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1dc2:	48 89 c7             	mov    %rax,%rdi
    1dc5:	e8 00 00 00 00       	callq  1dca <_ZN6Parser17QStringList_printE11QStringList+0x202>
    1dca:	48 89 d8             	mov    %rbx,%rax
    1dcd:	48 89 c7             	mov    %rax,%rdi
    1dd0:	e8 00 00 00 00       	callq  1dd5 <_ZN6Parser17QStringList_printE11QStringList+0x20d>
    {
        result.append("\nlist["+QString::number(cnt)+"]");
        result.append("\n" + *it);
        cnt++;
    }
}
    1dd5:	e8 00 00 00 00       	callq  1dda <_ZN6Parser17QStringList_printE11QStringList+0x212>
    1dda:	48 81 c4 b8 00 00 00 	add    $0xb8,%rsp
    1de1:	5b                   	pop    %rbx
    1de2:	5d                   	pop    %rbp
    1de3:	c3                   	retq   

0000000000001de4 <_ZN6Parser14addIncludeFileE7QString>:
void Parser::addIncludeFile(QString filename){
    1de4:	55                   	push   %rbp
    1de5:	48 89 e5             	mov    %rsp,%rbp
    1de8:	48 83 ec 10          	sub    $0x10,%rsp
    1dec:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    1df0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    if(!this->includeFiles.contains(filename,Qt::CaseSensitive))
    1df4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1df8:	48 8d 88 88 00 00 00 	lea    0x88(%rax),%rcx
    1dff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    1e03:	ba 01 00 00 00       	mov    $0x1,%edx
    1e08:	48 89 c6             	mov    %rax,%rsi
    1e0b:	48 89 cf             	mov    %rcx,%rdi
    1e0e:	e8 00 00 00 00       	callq  1e13 <_ZN6Parser14addIncludeFileE7QString+0x2f>
    1e13:	83 f0 01             	xor    $0x1,%eax
    1e16:	84 c0                	test   %al,%al
    1e18:	74 1a                	je     1e34 <_ZN6Parser14addIncludeFileE7QString+0x50>
    this->includeFiles.append(filename);
    1e1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1e1e:	48 8d 90 88 00 00 00 	lea    0x88(%rax),%rdx
    1e25:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    1e29:	48 89 c6             	mov    %rax,%rsi
    1e2c:	48 89 d7             	mov    %rdx,%rdi
    1e2f:	e8 00 00 00 00       	callq  1e34 <_ZN6Parser14addIncludeFileE7QString+0x50>
}
    1e34:	90                   	nop
    1e35:	c9                   	leaveq 
    1e36:	c3                   	retq   
    1e37:	90                   	nop

0000000000001e38 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE>:


bool Parser::parseSem(QXmlStreamReader &xml, QMap<QString, int> &sems)
{
    1e38:	55                   	push   %rbp
    1e39:	48 89 e5             	mov    %rsp,%rbp
    1e3c:	41 55                	push   %r13
    1e3e:	41 54                	push   %r12
    1e40:	53                   	push   %rbx
    1e41:	48 81 ec c8 00 00 00 	sub    $0xc8,%rsp
    1e48:	48 89 bd 38 ff ff ff 	mov    %rdi,-0xc8(%rbp)
    1e4f:	48 89 b5 30 ff ff ff 	mov    %rsi,-0xd0(%rbp)
    1e56:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
    1e5d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    1e64:	00 00 
    1e66:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    1e6a:	31 c0                	xor    %eax,%eax

     if (xml.tokenType() != QXmlStreamReader::StartElement && xml.name() == "sem")
    1e6c:	bb 00 00 00 00       	mov    $0x0,%ebx
    1e71:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    1e78:	48 89 c7             	mov    %rax,%rdi
    1e7b:	e8 00 00 00 00       	callq  1e80 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x48>
    1e80:	83 f8 04             	cmp    $0x4,%eax
    1e83:	74 3a                	je     1ebf <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x87>
    1e85:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1e89:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
    1e90:	48 89 d6             	mov    %rdx,%rsi
    1e93:	48 89 c7             	mov    %rax,%rdi
    1e96:	e8 00 00 00 00       	callq  1e9b <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x63>
    1e9b:	bb 01 00 00 00       	mov    $0x1,%ebx
    1ea0:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1ea4:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1eab <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x73>
    1eab:	48 89 c7             	mov    %rax,%rdi
    1eae:	e8 00 00 00 00       	callq  1eb3 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x7b>
    1eb3:	84 c0                	test   %al,%al
    1eb5:	74 08                	je     1ebf <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x87>
    1eb7:	41 bd 01 00 00 00    	mov    $0x1,%r13d
    1ebd:	eb 06                	jmp    1ec5 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x8d>
    1ebf:	41 bd 00 00 00 00    	mov    $0x0,%r13d
    1ec5:	84 db                	test   %bl,%bl
    1ec7:	74 0d                	je     1ed6 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x9e>
    1ec9:	90                   	nop
    1eca:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    1ece:	48 89 c7             	mov    %rax,%rdi
    1ed1:	e8 00 00 00 00       	callq  1ed6 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x9e>
    1ed6:	45 84 ed             	test   %r13b,%r13b
    1ed9:	74 0b                	je     1ee6 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0xae>
         return false;
    1edb:	41 bc 00 00 00 00    	mov    $0x0,%r12d
    1ee1:	e9 87 02 00 00       	jmpq   216d <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x335>
     QXmlStreamAttributes attributes = xml.attributes();
    1ee6:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    1eed:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
    1ef4:	48 89 d6             	mov    %rdx,%rsi
    1ef7:	48 89 c7             	mov    %rax,%rdi
    1efa:	e8 00 00 00 00       	callq  1eff <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0xc7>
     int id = 0;
    1eff:	c7 85 4c ff ff ff 00 	movl   $0x0,-0xb4(%rbp)
    1f06:	00 00 00 
     if (attributes.hasAttribute("id")) {
    1f09:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    1f10:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1f17 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0xdf>
    1f17:	48 89 c7             	mov    %rax,%rdi
    1f1a:	e8 00 00 00 00       	callq  1f1f <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0xe7>
    1f1f:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
    1f26:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    1f2d:	48 89 d6             	mov    %rdx,%rsi
    1f30:	48 89 c7             	mov    %rax,%rdi
    1f33:	e8 00 00 00 00       	callq  1f38 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x100>
    1f38:	89 c3                	mov    %eax,%ebx
    1f3a:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    1f41:	48 89 c7             	mov    %rax,%rdi
    1f44:	e8 00 00 00 00       	callq  1f49 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x111>
    1f49:	84 db                	test   %bl,%bl
    1f4b:	74 6c                	je     1fb9 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x181>
         id = attributes.value("id").toInt();
    1f4d:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1f54:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1f5b <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x123>
    1f5b:	48 89 c7             	mov    %rax,%rdi
    1f5e:	e8 00 00 00 00       	callq  1f63 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x12b>
    1f63:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    1f67:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    1f6e:	48 8d 8d 50 ff ff ff 	lea    -0xb0(%rbp),%rcx
    1f75:	48 89 ce             	mov    %rcx,%rsi
    1f78:	48 89 c7             	mov    %rax,%rdi
    1f7b:	e8 00 00 00 00       	callq  1f80 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x148>
    1f80:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    1f84:	ba 0a 00 00 00       	mov    $0xa,%edx
    1f89:	be 00 00 00 00       	mov    $0x0,%esi
    1f8e:	48 89 c7             	mov    %rax,%rdi
    1f91:	e8 00 00 00 00       	callq  1f96 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x15e>
    1f96:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
    1f9c:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    1fa0:	48 89 c7             	mov    %rax,%rdi
    1fa3:	e8 00 00 00 00       	callq  1fa8 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x170>
    1fa8:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    1faf:	48 89 c7             	mov    %rax,%rdi
    1fb2:	e8 00 00 00 00       	callq  1fb7 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x17f>
    1fb7:	eb 0b                	jmp    1fc4 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x18c>
     }
     else
         return false;
    1fb9:	41 bc 00 00 00 00    	mov    $0x0,%r12d
    1fbf:	e9 9a 01 00 00       	jmpq   215e <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x326>

     xml.readNext();
    1fc4:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    1fcb:	48 89 c7             	mov    %rax,%rdi
    1fce:	e8 00 00 00 00       	callq  1fd3 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x19b>
     while (!(xml.tokenType() == QXmlStreamReader::EndElement && xml.name() == "sem"))
    1fd3:	bb 00 00 00 00       	mov    $0x0,%ebx
    1fd8:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    1fdf:	48 89 c7             	mov    %rax,%rdi
    1fe2:	e8 00 00 00 00       	callq  1fe7 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x1af>
    1fe7:	83 f8 05             	cmp    $0x5,%eax
    1fea:	75 35                	jne    2021 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x1e9>
    1fec:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    1ff0:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
    1ff7:	48 89 d6             	mov    %rdx,%rsi
    1ffa:	48 89 c7             	mov    %rax,%rdi
    1ffd:	e8 00 00 00 00       	callq  2002 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x1ca>
    2002:	bb 01 00 00 00       	mov    $0x1,%ebx
    2007:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    200b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2012 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x1da>
    2012:	48 89 c7             	mov    %rax,%rdi
    2015:	e8 00 00 00 00       	callq  201a <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x1e2>
    201a:	83 f0 01             	xor    $0x1,%eax
    201d:	84 c0                	test   %al,%al
    201f:	74 08                	je     2029 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x1f1>
    2021:	41 bd 01 00 00 00    	mov    $0x1,%r13d
    2027:	eb 06                	jmp    202f <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x1f7>
    2029:	41 bd 00 00 00 00    	mov    $0x0,%r13d
    202f:	84 db                	test   %bl,%bl
    2031:	74 0d                	je     2040 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x208>
    2033:	90                   	nop
    2034:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    2038:	48 89 c7             	mov    %rax,%rdi
    203b:	e8 00 00 00 00       	callq  2040 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x208>
    2040:	45 84 ed             	test   %r13b,%r13b
    2043:	0f 84 0f 01 00 00    	je     2158 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x320>
     {
         if (xml.tokenType() == QXmlStreamReader::StartElement)
    2049:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    2050:	48 89 c7             	mov    %rax,%rdi
    2053:	e8 00 00 00 00       	callq  2058 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x220>
    2058:	83 f8 04             	cmp    $0x4,%eax
    205b:	0f 94 c0             	sete   %al
    205e:	84 c0                	test   %al,%al
    2060:	0f 84 de 00 00 00    	je     2144 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x30c>
         {
             if (xml.name() == "name"){
    2066:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    206a:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
    2071:	48 89 d6             	mov    %rdx,%rsi
    2074:	48 89 c7             	mov    %rax,%rdi
    2077:	e8 00 00 00 00       	callq  207c <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x244>
    207c:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2080:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2087 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x24f>
    2087:	48 89 c7             	mov    %rax,%rdi
    208a:	e8 00 00 00 00       	callq  208f <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x257>
    208f:	89 c3                	mov    %eax,%ebx
    2091:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2095:	48 89 c7             	mov    %rax,%rdi
    2098:	e8 00 00 00 00       	callq  209d <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x265>
    209d:	84 db                	test   %bl,%bl
    209f:	0f 84 9f 00 00 00    	je     2144 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x30c>
                 xml.readNext();
    20a5:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    20ac:	48 89 c7             	mov    %rax,%rdi
    20af:	e8 00 00 00 00       	callq  20b4 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x27c>
                 QString name = xml.text().toString();
    20b4:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    20b8:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
    20bf:	48 89 d6             	mov    %rdx,%rsi
    20c2:	48 89 c7             	mov    %rax,%rdi
    20c5:	e8 00 00 00 00       	callq  20ca <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x292>
    20ca:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    20ce:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    20d2:	48 89 d6             	mov    %rdx,%rsi
    20d5:	48 89 c7             	mov    %rax,%rdi
    20d8:	e8 00 00 00 00       	callq  20dd <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x2a5>
    20dd:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    20e1:	48 89 c7             	mov    %rax,%rdi
    20e4:	e8 00 00 00 00       	callq  20e9 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x2b1>
                 if (sems.contains(name))
    20e9:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    20ed:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    20f4:	48 89 d6             	mov    %rdx,%rsi
    20f7:	48 89 c7             	mov    %rax,%rdi
    20fa:	e8 00 00 00 00       	callq  20ff <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x2c7>
    20ff:	84 c0                	test   %al,%al
    2101:	74 0d                	je     2110 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x2d8>
                     return false;
    2103:	41 bc 00 00 00 00    	mov    $0x0,%r12d
    2109:	bb 00 00 00 00       	mov    $0x0,%ebx
    210e:	eb 22                	jmp    2132 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x2fa>
                 sems.insert(name, id);
    2110:	48 8d 95 4c ff ff ff 	lea    -0xb4(%rbp),%rdx
    2117:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
    211b:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    2122:	48 89 ce             	mov    %rcx,%rsi
    2125:	48 89 c7             	mov    %rax,%rdi
    2128:	e8 00 00 00 00       	callq  212d <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x2f5>
    212d:	bb 01 00 00 00       	mov    $0x1,%ebx
    2132:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2136:	48 89 c7             	mov    %rax,%rdi
    2139:	e8 00 00 00 00       	callq  213e <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x306>
    213e:	83 fb 01             	cmp    $0x1,%ebx
    2141:	75 1b                	jne    215e <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x326>
     {
         if (xml.tokenType() == QXmlStreamReader::StartElement)
         {
             if (xml.name() == "name"){
                 xml.readNext();
                 QString name = xml.text().toString();
    2143:	90                   	nop
                 if (sems.contains(name))
                     return false;
                 sems.insert(name, id);
             }
         }
         xml.readNext();
    2144:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    214b:	48 89 c7             	mov    %rax,%rdi
    214e:	e8 00 00 00 00       	callq  2153 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x31b>
     }
     else
         return false;

     xml.readNext();
     while (!(xml.tokenType() == QXmlStreamReader::EndElement && xml.name() == "sem"))
    2153:	e9 7b fe ff ff       	jmpq   1fd3 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x19b>
                 sems.insert(name, id);
             }
         }
         xml.readNext();
     }
     return true;
    2158:	41 bc 01 00 00 00    	mov    $0x1,%r12d
bool Parser::parseSem(QXmlStreamReader &xml, QMap<QString, int> &sems)
{

     if (xml.tokenType() != QXmlStreamReader::StartElement && xml.name() == "sem")
         return false;
     QXmlStreamAttributes attributes = xml.attributes();
    215e:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    2165:	48 89 c7             	mov    %rax,%rdi
    2168:	e8 00 00 00 00       	callq  216d <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x335>
    216d:	44 89 e0             	mov    %r12d,%eax
             }
         }
         xml.readNext();
     }
     return true;
}
    2170:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    2174:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    217b:	00 00 
    217d:	0f 84 d1 00 00 00    	je     2254 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x41c>
    2183:	e9 c7 00 00 00       	jmpq   224f <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x417>
    2188:	49 89 c4             	mov    %rax,%r12


bool Parser::parseSem(QXmlStreamReader &xml, QMap<QString, int> &sems)
{

     if (xml.tokenType() != QXmlStreamReader::StartElement && xml.name() == "sem")
    218b:	84 db                	test   %bl,%bl
    218d:	74 0f                	je     219e <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x366>
    218f:	90                   	nop
    2190:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    2194:	48 89 c7             	mov    %rax,%rdi
    2197:	e8 00 00 00 00       	callq  219c <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x364>
    219c:	eb 01                	jmp    219f <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x367>
    219e:	90                   	nop
    219f:	4c 89 e0             	mov    %r12,%rax
    21a2:	48 89 c7             	mov    %rax,%rdi
    21a5:	e8 00 00 00 00       	callq  21aa <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x372>
    21aa:	48 89 c3             	mov    %rax,%rbx
         return false;
     QXmlStreamAttributes attributes = xml.attributes();
     int id = 0;
     if (attributes.hasAttribute("id")) {
    21ad:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    21b4:	48 89 c7             	mov    %rax,%rdi
    21b7:	e8 00 00 00 00       	callq  21bc <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x384>
    21bc:	eb 77                	jmp    2235 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3fd>
    21be:	48 89 c3             	mov    %rax,%rbx
         id = attributes.value("id").toInt();
    21c1:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    21c5:	48 89 c7             	mov    %rax,%rdi
    21c8:	e8 00 00 00 00       	callq  21cd <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x395>
    21cd:	eb 03                	jmp    21d2 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x39a>
    21cf:	48 89 c3             	mov    %rax,%rbx
    21d2:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    21d9:	48 89 c7             	mov    %rax,%rdi
    21dc:	e8 00 00 00 00       	callq  21e1 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3a9>
    21e1:	eb 52                	jmp    2235 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3fd>
    21e3:	49 89 c4             	mov    %rax,%r12
     }
     else
         return false;

     xml.readNext();
     while (!(xml.tokenType() == QXmlStreamReader::EndElement && xml.name() == "sem"))
    21e6:	84 db                	test   %bl,%bl
    21e8:	74 0f                	je     21f9 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3c1>
    21ea:	90                   	nop
    21eb:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    21ef:	48 89 c7             	mov    %rax,%rdi
    21f2:	e8 00 00 00 00       	callq  21f7 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3bf>
    21f7:	eb 01                	jmp    21fa <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3c2>
    21f9:	90                   	nop
    21fa:	4c 89 e3             	mov    %r12,%rbx
    21fd:	eb 36                	jmp    2235 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3fd>
    21ff:	48 89 c3             	mov    %rax,%rbx
     {
         if (xml.tokenType() == QXmlStreamReader::StartElement)
         {
             if (xml.name() == "name"){
    2202:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2206:	48 89 c7             	mov    %rax,%rdi
    2209:	e8 00 00 00 00       	callq  220e <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3d6>
    220e:	eb 25                	jmp    2235 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3fd>
    2210:	48 89 c3             	mov    %rax,%rbx
    2213:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2217:	48 89 c7             	mov    %rax,%rdi
    221a:	e8 00 00 00 00       	callq  221f <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3e7>
    221f:	eb 14                	jmp    2235 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3fd>
    2221:	48 89 c3             	mov    %rax,%rbx
                 xml.readNext();
                 QString name = xml.text().toString();
    2224:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2228:	48 89 c7             	mov    %rax,%rdi
    222b:	e8 00 00 00 00       	callq  2230 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3f8>
    2230:	eb 03                	jmp    2235 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x3fd>
    2232:	48 89 c3             	mov    %rax,%rbx
bool Parser::parseSem(QXmlStreamReader &xml, QMap<QString, int> &sems)
{

     if (xml.tokenType() != QXmlStreamReader::StartElement && xml.name() == "sem")
         return false;
     QXmlStreamAttributes attributes = xml.attributes();
    2235:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    223c:	48 89 c7             	mov    %rax,%rdi
    223f:	e8 00 00 00 00       	callq  2244 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x40c>
    2244:	48 89 d8             	mov    %rbx,%rax
    2247:	48 89 c7             	mov    %rax,%rdi
    224a:	e8 00 00 00 00       	callq  224f <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x417>
             }
         }
         xml.readNext();
     }
     return true;
}
    224f:	e8 00 00 00 00       	callq  2254 <_ZN6Parser8parseSemER16QXmlStreamReaderR4QMapI7QStringiE+0x41c>
    2254:	48 81 c4 c8 00 00 00 	add    $0xc8,%rsp
    225b:	5b                   	pop    %rbx
    225c:	41 5c                	pop    %r12
    225e:	41 5d                	pop    %r13
    2260:	5d                   	pop    %rbp
    2261:	c3                   	retq   

0000000000002262 <_ZN6Parser11displaySemsER4QMapI7QStringiE>:


QString Parser::displaySems(QMap<QString, int> &sems)
{
    2262:	55                   	push   %rbp
    2263:	48 89 e5             	mov    %rsp,%rbp
    2266:	53                   	push   %rbx
    2267:	48 83 ec 68          	sub    $0x68,%rsp
    226b:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
    226f:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
    2273:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
    2277:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    227e:	00 00 
    2280:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    2284:	31 c0                	xor    %eax,%eax
    QMap<QString, int>::const_iterator it = sems.begin();
    2286:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    228a:	48 89 c7             	mov    %rax,%rdi
    228d:	e8 00 00 00 00       	callq  2292 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x30>
    2292:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    2296:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    229a:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    229e:	48 89 d6             	mov    %rdx,%rsi
    22a1:	48 89 c7             	mov    %rax,%rdi
    22a4:	e8 00 00 00 00       	callq  22a9 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x47>
    for(;it != sems.end(); ++it)
    22a9:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    22ad:	48 89 c7             	mov    %rax,%rdi
    22b0:	e8 00 00 00 00       	callq  22b5 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x53>
    22b5:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    22b9:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    22bd:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    22c1:	48 89 d6             	mov    %rdx,%rsi
    22c4:	48 89 c7             	mov    %rax,%rdi
    22c7:	e8 00 00 00 00       	callq  22cc <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x6a>
    22cc:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    22d0:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    22d4:	48 89 d6             	mov    %rdx,%rsi
    22d7:	48 89 c7             	mov    %rax,%rdi
    22da:	e8 00 00 00 00       	callq  22df <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x7d>
    22df:	84 c0                	test   %al,%al
    22e1:	0f 84 d7 00 00 00    	je     23be <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x15c>
    {
       return "KEY:" + it.key() + "=" + QString::number(it.value());
    22e7:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    22eb:	48 89 c7             	mov    %rax,%rdi
    22ee:	e8 00 00 00 00       	callq  22f3 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x91>
    22f3:	8b 08                	mov    (%rax),%ecx
    22f5:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    22f9:	ba 0a 00 00 00       	mov    $0xa,%edx
    22fe:	89 ce                	mov    %ecx,%esi
    2300:	48 89 c7             	mov    %rax,%rdi
    2303:	e8 00 00 00 00       	callq  2308 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0xa6>
    2308:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    230c:	48 89 c7             	mov    %rax,%rdi
    230f:	e8 00 00 00 00       	callq  2314 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0xb2>
    2314:	48 89 c2             	mov    %rax,%rdx
    2317:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    231b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2322 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0xc0>
    2322:	48 89 c7             	mov    %rax,%rdi
    2325:	e8 00 00 00 00       	callq  232a <_ZN6Parser11displaySemsER4QMapI7QStringiE+0xc8>
    232a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    232e:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
    2332:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 2339 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0xd7>
    2339:	48 89 ce             	mov    %rcx,%rsi
    233c:	48 89 c7             	mov    %rax,%rdi
    233f:	e8 00 00 00 00       	callq  2344 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0xe2>
    2344:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    2348:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    234c:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
    2350:	48 89 ce             	mov    %rcx,%rsi
    2353:	48 89 c7             	mov    %rax,%rdi
    2356:	e8 00 00 00 00       	callq  235b <_ZN6Parser11displaySemsER4QMapI7QStringiE+0xf9>
    235b:	90                   	nop
    235c:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2360:	48 89 c7             	mov    %rax,%rdi
    2363:	e8 00 00 00 00       	callq  2368 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x106>
    2368:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    236c:	48 89 c7             	mov    %rax,%rdi
    236f:	e8 00 00 00 00       	callq  2374 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x112>
    2374:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    2378:	48 89 c7             	mov    %rax,%rdi
    237b:	e8 00 00 00 00       	callq  2380 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x11e>
    2380:	eb 3d                	jmp    23bf <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x15d>
    2382:	48 89 c3             	mov    %rax,%rbx
    2385:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2389:	48 89 c7             	mov    %rax,%rdi
    238c:	e8 00 00 00 00       	callq  2391 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x12f>
    2391:	eb 03                	jmp    2396 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x134>
    2393:	48 89 c3             	mov    %rax,%rbx
    2396:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    239a:	48 89 c7             	mov    %rax,%rdi
    239d:	e8 00 00 00 00       	callq  23a2 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x140>
    23a2:	eb 03                	jmp    23a7 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x145>
    23a4:	48 89 c3             	mov    %rax,%rbx
    23a7:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    23ab:	48 89 c7             	mov    %rax,%rdi
    23ae:	e8 00 00 00 00       	callq  23b3 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x151>
    23b3:	48 89 d8             	mov    %rbx,%rax
    23b6:	48 89 c7             	mov    %rax,%rdi
    23b9:	e8 00 00 00 00       	callq  23be <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x15c>
    }
}
    23be:	90                   	nop
    23bf:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    23c3:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    23c7:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    23ce:	00 00 
    23d0:	74 05                	je     23d7 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x175>
    23d2:	e8 00 00 00 00       	callq  23d7 <_ZN6Parser11displaySemsER4QMapI7QStringiE+0x175>
    23d7:	48 83 c4 68          	add    $0x68,%rsp
    23db:	5b                   	pop    %rbx
    23dc:	5d                   	pop    %rbp
    23dd:	c3                   	retq   

00000000000023de <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE>:

void Parser::fetchSems(QString FileName, QMap<QString, int> &sems)
{
    23de:	55                   	push   %rbp
    23df:	48 89 e5             	mov    %rsp,%rbp
    23e2:	53                   	push   %rbx
    23e3:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
    23ea:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
    23ee:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
    23f2:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
    23f9:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    2400:	00 00 
    2402:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    2406:	31 c0                	xor    %eax,%eax
    QFile file(FileName);
    2408:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
    240c:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2410:	48 89 d6             	mov    %rdx,%rsi
    2413:	48 89 c7             	mov    %rax,%rdi
    2416:	e8 00 00 00 00       	callq  241b <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x3d>

    if (!file.open(QIODevice::ReadOnly | QIODevice::Text))
    241b:	be 10 00 00 00       	mov    $0x10,%esi
    2420:	bf 01 00 00 00       	mov    $0x1,%edi
    2425:	e8 00 00 00 00       	callq  242a <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x4c>
    242a:	89 c2                	mov    %eax,%edx
    242c:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2430:	89 d6                	mov    %edx,%esi
    2432:	48 89 c7             	mov    %rax,%rdi
    2435:	e8 00 00 00 00       	callq  243a <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x5c>
            {

            }

    QXmlStreamReader xml(&file);
    243a:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    243e:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    2442:	48 89 d6             	mov    %rdx,%rsi
    2445:	48 89 c7             	mov    %rax,%rdi
    2448:	e8 00 00 00 00       	callq  244d <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x6f>

    while (!xml.atEnd() && !xml.hasError())
    244d:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    2451:	48 89 c7             	mov    %rax,%rdi
    2454:	e8 00 00 00 00       	callq  2459 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x7b>
    2459:	83 f0 01             	xor    $0x1,%eax
    245c:	84 c0                	test   %al,%al
    245e:	74 1a                	je     247a <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x9c>
    2460:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    2464:	48 89 c7             	mov    %rax,%rdi
    2467:	e8 00 00 00 00       	callq  246c <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x8e>
    246c:	83 f0 01             	xor    $0x1,%eax
    246f:	84 c0                	test   %al,%al
    2471:	74 07                	je     247a <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x9c>
    2473:	b8 01 00 00 00       	mov    $0x1,%eax
    2478:	eb 05                	jmp    247f <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0xa1>
    247a:	b8 00 00 00 00       	mov    $0x0,%eax
    247f:	84 c0                	test   %al,%al
    2481:	0f 84 cb 00 00 00    	je     2552 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x174>
    {
        QXmlStreamReader::TokenType token = xml.readNext();
    2487:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    248b:	48 89 c7             	mov    %rax,%rdi
    248e:	e8 00 00 00 00       	callq  2493 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0xb5>
    2493:	89 45 9c             	mov    %eax,-0x64(%rbp)
        if (token == QXmlStreamReader::StartDocument)
    2496:	83 7d 9c 02          	cmpl   $0x2,-0x64(%rbp)
    249a:	0f 84 a6 00 00 00    	je     2546 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x168>
            continue;
        if (token == QXmlStreamReader::StartElement)
    24a0:	83 7d 9c 04          	cmpl   $0x4,-0x64(%rbp)
    24a4:	75 a7                	jne    244d <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x6f>
        {
            if (xml.name() == "sems")
    24a6:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    24aa:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    24ae:	48 89 d6             	mov    %rdx,%rsi
    24b1:	48 89 c7             	mov    %rax,%rdi
    24b4:	e8 00 00 00 00       	callq  24b9 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0xdb>
    24b9:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    24bd:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 24c4 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0xe6>
    24c4:	48 89 c7             	mov    %rax,%rdi
    24c7:	e8 00 00 00 00       	callq  24cc <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0xee>
    24cc:	89 c3                	mov    %eax,%ebx
    24ce:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    24d2:	48 89 c7             	mov    %rax,%rdi
    24d5:	e8 00 00 00 00       	callq  24da <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0xfc>
    24da:	84 db                	test   %bl,%bl
    24dc:	75 6e                	jne    254c <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x16e>
                continue;
            if (xml.name() == "sem"){
    24de:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    24e2:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    24e6:	48 89 d6             	mov    %rdx,%rsi
    24e9:	48 89 c7             	mov    %rax,%rdi
    24ec:	e8 00 00 00 00       	callq  24f1 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x113>
    24f1:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    24f5:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 24fc <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x11e>
    24fc:	48 89 c7             	mov    %rax,%rdi
    24ff:	e8 00 00 00 00       	callq  2504 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x126>
    2504:	89 c3                	mov    %eax,%ebx
    2506:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    250a:	48 89 c7             	mov    %rax,%rdi
    250d:	e8 00 00 00 00       	callq  2512 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x134>
    2512:	84 db                	test   %bl,%bl
    2514:	0f 84 33 ff ff ff    	je     244d <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x6f>
                if (!parseSem(xml, sems)) {
    251a:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
    2521:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
    2525:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    2529:	48 89 ce             	mov    %rcx,%rsi
    252c:	48 89 c7             	mov    %rax,%rdi
    252f:	e8 00 00 00 00       	callq  2534 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x156>
    2534:	83 f0 01             	xor    $0x1,%eax
    2537:	84 c0                	test   %al,%al
    2539:	0f 84 0e ff ff ff    	je     244d <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x6f>
    253f:	bb 00 00 00 00       	mov    $0x0,%ebx

                    return;
    2544:	eb 11                	jmp    2557 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x179>

    while (!xml.atEnd() && !xml.hasError())
    {
        QXmlStreamReader::TokenType token = xml.readNext();
        if (token == QXmlStreamReader::StartDocument)
            continue;
    2546:	90                   	nop
    2547:	e9 01 ff ff ff       	jmpq   244d <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x6f>
        if (token == QXmlStreamReader::StartElement)
        {
            if (xml.name() == "sems")
                continue;
    254c:	90                   	nop

            }

    QXmlStreamReader xml(&file);

    while (!xml.atEnd() && !xml.hasError())
    254d:	e9 fb fe ff ff       	jmpq   244d <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x6f>
    2552:	bb 01 00 00 00       	mov    $0x1,%ebx
    2557:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    255b:	48 89 c7             	mov    %rax,%rdi
    255e:	e8 00 00 00 00       	callq  2563 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x185>
    2563:	83 fb 01             	cmp    $0x1,%ebx
    2566:	74 07                	je     256f <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x191>
    2568:	bb 00 00 00 00       	mov    $0x0,%ebx
    256d:	eb 06                	jmp    2575 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x197>
    if (!file.open(QIODevice::ReadOnly | QIODevice::Text))
            {

            }

    QXmlStreamReader xml(&file);
    256f:	90                   	nop
    2570:	bb 01 00 00 00       	mov    $0x1,%ebx
    2575:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2579:	48 89 c7             	mov    %rax,%rdi
    257c:	e8 00 00 00 00       	callq  2581 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1a3>
    2581:	83 fb 01             	cmp    $0x1,%ebx
    }
}

void Parser::fetchSems(QString FileName, QMap<QString, int> &sems)
{
    QFile file(FileName);
    2584:	90                   	nop
                    return;
                }
            }
        }
    }
}
    2585:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2589:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    2590:	00 00 
    2592:	74 54                	je     25e8 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x20a>
    2594:	eb 4d                	jmp    25e3 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x205>
    2596:	48 89 c3             	mov    %rax,%rbx
        QXmlStreamReader::TokenType token = xml.readNext();
        if (token == QXmlStreamReader::StartDocument)
            continue;
        if (token == QXmlStreamReader::StartElement)
        {
            if (xml.name() == "sems")
    2599:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    259d:	48 89 c7             	mov    %rax,%rdi
    25a0:	e8 00 00 00 00       	callq  25a5 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1c7>
    25a5:	eb 14                	jmp    25bb <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1dd>
    25a7:	48 89 c3             	mov    %rax,%rbx
                continue;
            if (xml.name() == "sem"){
    25aa:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    25ae:	48 89 c7             	mov    %rax,%rdi
    25b1:	e8 00 00 00 00       	callq  25b6 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1d8>
    25b6:	eb 03                	jmp    25bb <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1dd>
    25b8:	48 89 c3             	mov    %rax,%rbx
    if (!file.open(QIODevice::ReadOnly | QIODevice::Text))
            {

            }

    QXmlStreamReader xml(&file);
    25bb:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    25bf:	48 89 c7             	mov    %rax,%rdi
    25c2:	e8 00 00 00 00       	callq  25c7 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1e9>
    25c7:	eb 03                	jmp    25cc <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1ee>
    25c9:	48 89 c3             	mov    %rax,%rbx
    }
}

void Parser::fetchSems(QString FileName, QMap<QString, int> &sems)
{
    QFile file(FileName);
    25cc:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    25d0:	48 89 c7             	mov    %rax,%rdi
    25d3:	e8 00 00 00 00       	callq  25d8 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x1fa>
    25d8:	48 89 d8             	mov    %rbx,%rax
    25db:	48 89 c7             	mov    %rax,%rdi
    25de:	e8 00 00 00 00       	callq  25e3 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x205>
                    return;
                }
            }
        }
    }
}
    25e3:	e8 00 00 00 00       	callq  25e8 <_ZN6Parser9fetchSemsE7QStringR4QMapIS0_iE+0x20a>
    25e8:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
    25ef:	5b                   	pop    %rbx
    25f0:	5d                   	pop    %rbp
    25f1:	c3                   	retq   

00000000000025f2 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi>:

void Parser::parseBlock(QString Block, QMap<QString,int> &sems, int line)// all deprecated?
{
    25f2:	55                   	push   %rbp
    25f3:	48 89 e5             	mov    %rsp,%rbp
    25f6:	53                   	push   %rbx
    25f7:	48 81 ec 58 01 00 00 	sub    $0x158,%rsp
    25fe:	48 89 bd b8 fe ff ff 	mov    %rdi,-0x148(%rbp)
    2605:	48 89 b5 b0 fe ff ff 	mov    %rsi,-0x150(%rbp)
    260c:	48 89 95 a8 fe ff ff 	mov    %rdx,-0x158(%rbp)
    2613:	89 8d a4 fe ff ff    	mov    %ecx,-0x15c(%rbp)
    2619:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    2620:	00 00 
    2622:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    2626:	31 c0                	xor    %eax,%eax


    QString str = Block;
    2628:	48 8b 95 b0 fe ff ff 	mov    -0x150(%rbp),%rdx
    262f:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    2636:	48 89 d6             	mov    %rdx,%rsi
    2639:	48 89 c7             	mov    %rax,%rdi
    263c:	e8 00 00 00 00       	callq  2641 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x4f>
    QString str_copy = str;
    2641:	48 8d 95 e0 fe ff ff 	lea    -0x120(%rbp),%rdx
    2648:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    264f:	48 89 d6             	mov    %rdx,%rsi
    2652:	48 89 c7             	mov    %rax,%rdi
    2655:	e8 00 00 00 00       	callq  265a <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x68>

    QRegExp QR("[S|s]tep\\d+\\s");
    265a:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    2661:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2668 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x76>
    2668:	48 89 c7             	mov    %rax,%rdi
    266b:	e8 00 00 00 00       	callq  2670 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x7e>
    2670:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
    2677:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    267e:	b9 00 00 00 00       	mov    $0x0,%ecx
    2683:	ba 01 00 00 00       	mov    $0x1,%edx
    2688:	48 89 c7             	mov    %rax,%rdi
    268b:	e8 00 00 00 00       	callq  2690 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x9e>
    2690:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    2697:	48 89 c7             	mov    %rax,%rdi
    269a:	e8 00 00 00 00       	callq  269f <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0xad>
    QR.setMinimal(true);
    269f:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    26a6:	be 01 00 00 00       	mov    $0x1,%esi
    26ab:	48 89 c7             	mov    %rax,%rdi
    26ae:	e8 00 00 00 00       	callq  26b3 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0xc1>
    QChar qc;
    26b3:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    26ba:	48 89 c7             	mov    %rax,%rdi
    26bd:	e8 00 00 00 00       	callq  26c2 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0xd0>
    QRegExp QRStepN("\\d+");
    26c2:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    26c9:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 26d0 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0xde>
    26d0:	48 89 c7             	mov    %rax,%rdi
    26d3:	e8 00 00 00 00       	callq  26d8 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0xe6>
    26d8:	48 8d b5 30 ff ff ff 	lea    -0xd0(%rbp),%rsi
    26df:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    26e6:	b9 00 00 00 00       	mov    $0x0,%ecx
    26eb:	ba 01 00 00 00       	mov    $0x1,%edx
    26f0:	48 89 c7             	mov    %rax,%rdi
    26f3:	e8 00 00 00 00       	callq  26f8 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x106>
    26f8:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    26ff:	48 89 c7             	mov    %rax,%rdi
    2702:	e8 00 00 00 00       	callq  2707 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x115>
    QString StepArgs;
    2707:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    270e:	48 89 c7             	mov    %rax,%rdi
    2711:	e8 00 00 00 00       	callq  2716 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x124>

    QString StepN;
    2716:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    271d:	48 89 c7             	mov    %rax,%rdi
    2720:	e8 00 00 00 00       	callq  2725 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x133>
    QString step;
    2725:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    272c:	48 89 c7             	mov    %rax,%rdi
    272f:	e8 00 00 00 00       	callq  2734 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x142>
    QStringList ThreeParts;
    2734:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    273b:	48 89 c7             	mov    %rax,%rdi
    273e:	e8 00 00 00 00       	callq  2743 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x151>

    int lineBase = 0;
    2743:	c7 85 c8 fe ff ff 00 	movl   $0x0,-0x138(%rbp)
    274a:	00 00 00 
    int lineInner = 0;
    274d:	c7 85 d8 fe ff ff 00 	movl   $0x0,-0x128(%rbp)
    2754:	00 00 00 

    while(1==1)
    {
        int i = QR.indexIn(str);
    2757:	48 8d b5 e0 fe ff ff 	lea    -0x120(%rbp),%rsi
    275e:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    2765:	b9 00 00 00 00       	mov    $0x0,%ecx
    276a:	ba 00 00 00 00       	mov    $0x0,%edx
    276f:	48 89 c7             	mov    %rax,%rdi
    2772:	e8 00 00 00 00       	callq  2777 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x185>
    2777:	89 85 dc fe ff ff    	mov    %eax,-0x124(%rbp)
        if(i<0) return;
    277d:	83 bd dc fe ff ff 00 	cmpl   $0x0,-0x124(%rbp)
    2784:	0f 88 35 03 00 00    	js     2abf <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x4cd>


        lineInner = whatLine(str_copy, lineBase + i);
    278a:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
    2790:	8b 85 dc fe ff ff    	mov    -0x124(%rbp),%eax
    2796:	8d 1c 02             	lea    (%rdx,%rax,1),%ebx
    2799:	48 8d 95 f0 fe ff ff 	lea    -0x110(%rbp),%rdx
    27a0:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    27a4:	48 89 d6             	mov    %rdx,%rsi
    27a7:	48 89 c7             	mov    %rax,%rdi
    27aa:	e8 00 00 00 00       	callq  27af <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x1bd>
    27af:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
    27b3:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
    27ba:	89 da                	mov    %ebx,%edx
    27bc:	48 89 ce             	mov    %rcx,%rsi
    27bf:	48 89 c7             	mov    %rax,%rdi
    27c2:	e8 00 00 00 00       	callq  27c7 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x1d5>
    27c7:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%rbp)
    27cd:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    27d1:	48 89 c7             	mov    %rax,%rdi
    27d4:	e8 00 00 00 00       	callq  27d9 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x1e7>
        if(lineBase == 0) lineBase = i;
    27d9:	83 bd c8 fe ff ff 00 	cmpl   $0x0,-0x138(%rbp)
    27e0:	75 0c                	jne    27ee <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x1fc>
    27e2:	8b 85 dc fe ff ff    	mov    -0x124(%rbp),%eax
    27e8:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%rbp)

        StepArgs = QR.cap(0);
    27ee:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    27f2:	48 8d 8d 00 ff ff ff 	lea    -0x100(%rbp),%rcx
    27f9:	ba 00 00 00 00       	mov    $0x0,%edx
    27fe:	48 89 ce             	mov    %rcx,%rsi
    2801:	48 89 c7             	mov    %rax,%rdi
    2804:	e8 00 00 00 00       	callq  2809 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x217>
    2809:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    280d:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    2814:	48 89 d6             	mov    %rdx,%rsi
    2817:	48 89 c7             	mov    %rax,%rdi
    281a:	e8 00 00 00 00       	callq  281f <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x22d>
    281f:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    2823:	48 89 c7             	mov    %rax,%rdi
    2826:	e8 00 00 00 00       	callq  282b <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x239>
        str = str.right(str.length() - StepArgs.length());
    282b:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    2832:	48 89 c7             	mov    %rax,%rdi
    2835:	e8 00 00 00 00       	callq  283a <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x248>
    283a:	89 c3                	mov    %eax,%ebx
    283c:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    2843:	48 89 c7             	mov    %rax,%rdi
    2846:	e8 00 00 00 00       	callq  284b <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x259>
    284b:	89 da                	mov    %ebx,%edx
    284d:	29 c2                	sub    %eax,%edx
    284f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    2853:	48 8d 8d e0 fe ff ff 	lea    -0x120(%rbp),%rcx
    285a:	48 89 ce             	mov    %rcx,%rsi
    285d:	48 89 c7             	mov    %rax,%rdi
    2860:	e8 00 00 00 00       	callq  2865 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x273>
    2865:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    2869:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    2870:	48 89 d6             	mov    %rdx,%rsi
    2873:	48 89 c7             	mov    %rax,%rdi
    2876:	e8 00 00 00 00       	callq  287b <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x289>
    287b:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    287f:	48 89 c7             	mov    %rax,%rdi
    2882:	e8 00 00 00 00       	callq  2887 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x295>


        QRStepN.indexIn(StepArgs);
    2887:	48 8d b5 40 ff ff ff 	lea    -0xc0(%rbp),%rsi
    288e:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    2895:	b9 00 00 00 00       	mov    $0x0,%ecx
    289a:	ba 00 00 00 00       	mov    $0x0,%edx
    289f:	48 89 c7             	mov    %rax,%rdi
    28a2:	e8 00 00 00 00       	callq  28a7 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x2b5>
        StepN = QRStepN.cap(0);
    28a7:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    28ab:	48 8d 8d 20 ff ff ff 	lea    -0xe0(%rbp),%rcx
    28b2:	ba 00 00 00 00       	mov    $0x0,%edx
    28b7:	48 89 ce             	mov    %rcx,%rsi
    28ba:	48 89 c7             	mov    %rax,%rdi
    28bd:	e8 00 00 00 00       	callq  28c2 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x2d0>
    28c2:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    28c6:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    28cd:	48 89 d6             	mov    %rdx,%rsi
    28d0:	48 89 c7             	mov    %rax,%rdi
    28d3:	e8 00 00 00 00       	callq  28d8 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x2e6>
    28d8:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    28dc:	48 89 c7             	mov    %rax,%rdi
    28df:	e8 00 00 00 00       	callq  28e4 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x2f2>
        //globalStepNumber = StepN.toInt();

        int j = str.indexOf('{',i);
    28e4:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    28e8:	be 7b 00 00 00       	mov    $0x7b,%esi
    28ed:	48 89 c7             	mov    %rax,%rdi
    28f0:	e8 00 00 00 00       	callq  28f5 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x303>
    28f5:	8b 95 dc fe ff ff    	mov    -0x124(%rbp),%edx
    28fb:	0f b7 75 d0          	movzwl -0x30(%rbp),%esi
    28ff:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    2906:	b9 01 00 00 00       	mov    $0x1,%ecx
    290b:	48 89 c7             	mov    %rax,%rdi
    290e:	e8 00 00 00 00       	callq  2913 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x321>
    2913:	89 85 cc fe ff ff    	mov    %eax,-0x134(%rbp)

        qc = str[j];
    2919:	8b 95 cc fe ff ff    	mov    -0x134(%rbp),%edx
    291f:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    2926:	89 d6                	mov    %edx,%esi
    2928:	48 89 c7             	mov    %rax,%rdi
    292b:	e8 00 00 00 00       	callq  2930 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x33e>
    2930:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    2934:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    2938:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    293c:	48 89 c7             	mov    %rax,%rdi
    293f:	e8 00 00 00 00       	callq  2944 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x352>
    2944:	66 89 85 c0 fe ff ff 	mov    %ax,-0x140(%rbp)

        int bl=1;
    294b:	c7 85 d0 fe ff ff 01 	movl   $0x1,-0x130(%rbp)
    2952:	00 00 00 
        int br=0;
    2955:	c7 85 d4 fe ff ff 00 	movl   $0x0,-0x12c(%rbp)
    295c:	00 00 00 

        while(bl != br)
    295f:	8b 85 d0 fe ff ff    	mov    -0x130(%rbp),%eax
    2965:	3b 85 d4 fe ff ff    	cmp    -0x12c(%rbp),%eax
    296b:	0f 84 a2 00 00 00    	je     2a13 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x421>
        {
            j++;
    2971:	83 85 cc fe ff ff 01 	addl   $0x1,-0x134(%rbp)
            qc = str[j];
    2978:	8b 95 cc fe ff ff    	mov    -0x134(%rbp),%edx
    297e:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    2985:	89 d6                	mov    %edx,%esi
    2987:	48 89 c7             	mov    %rax,%rdi
    298a:	e8 00 00 00 00       	callq  298f <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x39d>
    298f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    2993:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    2997:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    299b:	48 89 c7             	mov    %rax,%rdi
    299e:	e8 00 00 00 00       	callq  29a3 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x3b1>
    29a3:	66 89 85 c0 fe ff ff 	mov    %ax,-0x140(%rbp)
            if(qc=='{') bl++;
    29aa:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    29ae:	be 7b 00 00 00       	mov    $0x7b,%esi
    29b3:	48 89 c7             	mov    %rax,%rdi
    29b6:	e8 00 00 00 00       	callq  29bb <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x3c9>
    29bb:	0f b7 55 d0          	movzwl -0x30(%rbp),%edx
    29bf:	0f b7 85 c0 fe ff ff 	movzwl -0x140(%rbp),%eax
    29c6:	89 d6                	mov    %edx,%esi
    29c8:	89 c7                	mov    %eax,%edi
    29ca:	e8 00 00 00 00       	callq  29cf <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x3dd>
    29cf:	84 c0                	test   %al,%al
    29d1:	74 07                	je     29da <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x3e8>
    29d3:	83 85 d0 fe ff ff 01 	addl   $0x1,-0x130(%rbp)
            if(qc=='}') br++;
    29da:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    29de:	be 7d 00 00 00       	mov    $0x7d,%esi
    29e3:	48 89 c7             	mov    %rax,%rdi
    29e6:	e8 00 00 00 00       	callq  29eb <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x3f9>
    29eb:	0f b7 55 d0          	movzwl -0x30(%rbp),%edx
    29ef:	0f b7 85 c0 fe ff ff 	movzwl -0x140(%rbp),%eax
    29f6:	89 d6                	mov    %edx,%esi
    29f8:	89 c7                	mov    %eax,%edi
    29fa:	e8 00 00 00 00       	callq  29ff <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x40d>
    29ff:	84 c0                	test   %al,%al
    2a01:	0f 84 58 ff ff ff    	je     295f <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x36d>
    2a07:	83 85 d4 fe ff ff 01 	addl   $0x1,-0x12c(%rbp)
        qc = str[j];

        int bl=1;
        int br=0;

        while(bl != br)
    2a0e:	e9 4c ff ff ff       	jmpq   295f <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x36d>
            qc = str[j];
            if(qc=='{') bl++;
            if(qc=='}') br++;
        }

        step = str.mid(i,j-i);
    2a13:	8b 85 cc fe ff ff    	mov    -0x134(%rbp),%eax
    2a19:	2b 85 dc fe ff ff    	sub    -0x124(%rbp),%eax
    2a1f:	89 c1                	mov    %eax,%ecx
    2a21:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2a25:	8b 95 dc fe ff ff    	mov    -0x124(%rbp),%edx
    2a2b:	48 8d b5 e0 fe ff ff 	lea    -0x120(%rbp),%rsi
    2a32:	48 89 c7             	mov    %rax,%rdi
    2a35:	e8 00 00 00 00       	callq  2a3a <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x448>
    2a3a:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    2a3e:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    2a45:	48 89 d6             	mov    %rdx,%rsi
    2a48:	48 89 c7             	mov    %rax,%rdi
    2a4b:	e8 00 00 00 00       	callq  2a50 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x45e>
    2a50:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2a54:	48 89 c7             	mov    %rax,%rdi
    2a57:	e8 00 00 00 00       	callq  2a5c <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x46a>
        str = str.right(str.length() - j);
    2a5c:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    2a63:	48 89 c7             	mov    %rax,%rdi
    2a66:	e8 00 00 00 00       	callq  2a6b <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x479>
    2a6b:	2b 85 cc fe ff ff    	sub    -0x134(%rbp),%eax
    2a71:	89 c2                	mov    %eax,%edx
    2a73:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2a77:	48 8d 8d e0 fe ff ff 	lea    -0x120(%rbp),%rcx
    2a7e:	48 89 ce             	mov    %rcx,%rsi
    2a81:	48 89 c7             	mov    %rax,%rdi
    2a84:	e8 00 00 00 00       	callq  2a89 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x497>
    2a89:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    2a8d:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    2a94:	48 89 d6             	mov    %rdx,%rsi
    2a97:	48 89 c7             	mov    %rax,%rdi
    2a9a:	e8 00 00 00 00       	callq  2a9f <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x4ad>
    2a9f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2aa3:	48 89 c7             	mov    %rax,%rdi
    2aa6:	e8 00 00 00 00       	callq  2aab <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x4b9>
        lineBase += j + 1;
    2aab:	8b 85 cc fe ff ff    	mov    -0x134(%rbp),%eax
    2ab1:	83 c0 01             	add    $0x1,%eax
    2ab4:	01 85 c8 fe ff ff    	add    %eax,-0x138(%rbp)
    QStringList ThreeParts;

    int lineBase = 0;
    int lineInner = 0;

    while(1==1)
    2aba:	e9 98 fc ff ff       	jmpq   2757 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x165>
    {
        int i = QR.indexIn(str);
        if(i<0) return;
    2abf:	90                   	nop
    QRegExp QRStepN("\\d+");
    QString StepArgs;

    QString StepN;
    QString step;
    QStringList ThreeParts;
    2ac0:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    2ac7:	48 89 c7             	mov    %rax,%rdi
    2aca:	e8 00 00 00 00       	callq  2acf <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x4dd>
    QChar qc;
    QRegExp QRStepN("\\d+");
    QString StepArgs;

    QString StepN;
    QString step;
    2acf:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    2ad6:	48 89 c7             	mov    %rax,%rdi
    2ad9:	e8 00 00 00 00       	callq  2ade <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x4ec>
    QR.setMinimal(true);
    QChar qc;
    QRegExp QRStepN("\\d+");
    QString StepArgs;

    QString StepN;
    2ade:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    2ae5:	48 89 c7             	mov    %rax,%rdi
    2ae8:	e8 00 00 00 00       	callq  2aed <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x4fb>

    QRegExp QR("[S|s]tep\\d+\\s");
    QR.setMinimal(true);
    QChar qc;
    QRegExp QRStepN("\\d+");
    QString StepArgs;
    2aed:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    2af4:	48 89 c7             	mov    %rax,%rdi
    2af7:	e8 00 00 00 00       	callq  2afc <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x50a>
    QString str_copy = str;

    QRegExp QR("[S|s]tep\\d+\\s");
    QR.setMinimal(true);
    QChar qc;
    QRegExp QRStepN("\\d+");
    2afc:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    2b03:	48 89 c7             	mov    %rax,%rdi
    2b06:	e8 00 00 00 00       	callq  2b0b <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x519>


    QString str = Block;
    QString str_copy = str;

    QRegExp QR("[S|s]tep\\d+\\s");
    2b0b:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    2b12:	48 89 c7             	mov    %rax,%rdi
    2b15:	e8 00 00 00 00       	callq  2b1a <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x528>
void Parser::parseBlock(QString Block, QMap<QString,int> &sems, int line)// all deprecated?
{


    QString str = Block;
    QString str_copy = str;
    2b1a:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    2b21:	48 89 c7             	mov    %rax,%rdi
    2b24:	e8 00 00 00 00       	callq  2b29 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x537>

void Parser::parseBlock(QString Block, QMap<QString,int> &sems, int line)// all deprecated?
{


    QString str = Block;
    2b29:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    2b30:	48 89 c7             	mov    %rax,%rdi
    2b33:	e8 00 00 00 00       	callq  2b38 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x546>
    int lineInner = 0;

    while(1==1)
    {
        int i = QR.indexIn(str);
        if(i<0) return;
    2b38:	90                   	nop
        step = str.mid(i,j-i);
        str = str.right(str.length() - j);
        lineBase += j + 1;
    }

}
    2b39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2b3d:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    2b44:	00 00 
    2b46:	0f 84 75 01 00 00    	je     2cc1 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x6cf>
    2b4c:	e9 6b 01 00 00       	jmpq   2cbc <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x6ca>
    2b51:	48 89 c3             	mov    %rax,%rbx
    2b54:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    2b5b:	48 89 c7             	mov    %rax,%rdi
    2b5e:	e8 00 00 00 00       	callq  2b63 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x571>
    2b63:	e9 26 01 00 00       	jmpq   2c8e <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x69c>
    2b68:	48 89 c3             	mov    %rax,%rbx
    2b6b:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    2b72:	48 89 c7             	mov    %rax,%rdi
    2b75:	e8 00 00 00 00       	callq  2b7a <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x588>
    2b7a:	e9 0f 01 00 00       	jmpq   2c8e <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x69c>
    2b7f:	48 89 c3             	mov    %rax,%rbx
    2b82:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    2b89:	48 89 c7             	mov    %rax,%rdi
    2b8c:	e8 00 00 00 00       	callq  2b91 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x59f>
    2b91:	e9 e4 00 00 00       	jmpq   2c7a <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x688>
    2b96:	48 89 c3             	mov    %rax,%rbx
    2b99:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    2ba0:	48 89 c7             	mov    %rax,%rdi
    2ba3:	e8 00 00 00 00       	callq  2ba8 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x5b6>
    2ba8:	e9 cd 00 00 00       	jmpq   2c7a <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x688>
    2bad:	48 89 c3             	mov    %rax,%rbx
    {
        int i = QR.indexIn(str);
        if(i<0) return;


        lineInner = whatLine(str_copy, lineBase + i);
    2bb0:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    2bb4:	48 89 c7             	mov    %rax,%rdi
    2bb7:	e8 00 00 00 00       	callq  2bbc <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x5ca>
    2bbc:	eb 58                	jmp    2c16 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x624>
    2bbe:	48 89 c3             	mov    %rax,%rbx
        if(lineBase == 0) lineBase = i;

        StepArgs = QR.cap(0);
    2bc1:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    2bc5:	48 89 c7             	mov    %rax,%rdi
    2bc8:	e8 00 00 00 00       	callq  2bcd <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x5db>
    2bcd:	eb 47                	jmp    2c16 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x624>
    2bcf:	48 89 c3             	mov    %rax,%rbx
        str = str.right(str.length() - StepArgs.length());
    2bd2:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    2bd6:	48 89 c7             	mov    %rax,%rdi
    2bd9:	e8 00 00 00 00       	callq  2bde <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x5ec>
    2bde:	eb 36                	jmp    2c16 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x624>
    2be0:	48 89 c3             	mov    %rax,%rbx


        QRStepN.indexIn(StepArgs);
        StepN = QRStepN.cap(0);
    2be3:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    2be7:	48 89 c7             	mov    %rax,%rdi
    2bea:	e8 00 00 00 00       	callq  2bef <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x5fd>
    2bef:	eb 25                	jmp    2c16 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x624>
    2bf1:	48 89 c3             	mov    %rax,%rbx
            qc = str[j];
            if(qc=='{') bl++;
            if(qc=='}') br++;
        }

        step = str.mid(i,j-i);
    2bf4:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2bf8:	48 89 c7             	mov    %rax,%rdi
    2bfb:	e8 00 00 00 00       	callq  2c00 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x60e>
    2c00:	eb 14                	jmp    2c16 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x624>
    2c02:	48 89 c3             	mov    %rax,%rbx
        str = str.right(str.length() - j);
    2c05:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2c09:	48 89 c7             	mov    %rax,%rdi
    2c0c:	e8 00 00 00 00       	callq  2c11 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x61f>
    2c11:	eb 03                	jmp    2c16 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x624>
    2c13:	48 89 c3             	mov    %rax,%rbx
    QRegExp QRStepN("\\d+");
    QString StepArgs;

    QString StepN;
    QString step;
    QStringList ThreeParts;
    2c16:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    2c1d:	48 89 c7             	mov    %rax,%rdi
    2c20:	e8 00 00 00 00       	callq  2c25 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x633>
    2c25:	eb 03                	jmp    2c2a <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x638>
    2c27:	48 89 c3             	mov    %rax,%rbx
    QChar qc;
    QRegExp QRStepN("\\d+");
    QString StepArgs;

    QString StepN;
    QString step;
    2c2a:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    2c31:	48 89 c7             	mov    %rax,%rdi
    2c34:	e8 00 00 00 00       	callq  2c39 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x647>
    2c39:	eb 03                	jmp    2c3e <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x64c>
    2c3b:	48 89 c3             	mov    %rax,%rbx
    QR.setMinimal(true);
    QChar qc;
    QRegExp QRStepN("\\d+");
    QString StepArgs;

    QString StepN;
    2c3e:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    2c45:	48 89 c7             	mov    %rax,%rdi
    2c48:	e8 00 00 00 00       	callq  2c4d <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x65b>
    2c4d:	eb 03                	jmp    2c52 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x660>
    2c4f:	48 89 c3             	mov    %rax,%rbx

    QRegExp QR("[S|s]tep\\d+\\s");
    QR.setMinimal(true);
    QChar qc;
    QRegExp QRStepN("\\d+");
    QString StepArgs;
    2c52:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    2c59:	48 89 c7             	mov    %rax,%rdi
    2c5c:	e8 00 00 00 00       	callq  2c61 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x66f>
    2c61:	eb 03                	jmp    2c66 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x674>
    2c63:	48 89 c3             	mov    %rax,%rbx
    QString str_copy = str;

    QRegExp QR("[S|s]tep\\d+\\s");
    QR.setMinimal(true);
    QChar qc;
    QRegExp QRStepN("\\d+");
    2c66:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    2c6d:	48 89 c7             	mov    %rax,%rdi
    2c70:	e8 00 00 00 00       	callq  2c75 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x683>
    2c75:	eb 03                	jmp    2c7a <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x688>
    2c77:	48 89 c3             	mov    %rax,%rbx


    QString str = Block;
    QString str_copy = str;

    QRegExp QR("[S|s]tep\\d+\\s");
    2c7a:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    2c81:	48 89 c7             	mov    %rax,%rdi
    2c84:	e8 00 00 00 00       	callq  2c89 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x697>
    2c89:	eb 03                	jmp    2c8e <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x69c>
    2c8b:	48 89 c3             	mov    %rax,%rbx
void Parser::parseBlock(QString Block, QMap<QString,int> &sems, int line)// all deprecated?
{


    QString str = Block;
    QString str_copy = str;
    2c8e:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    2c95:	48 89 c7             	mov    %rax,%rdi
    2c98:	e8 00 00 00 00       	callq  2c9d <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x6ab>
    2c9d:	eb 03                	jmp    2ca2 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x6b0>
    2c9f:	48 89 c3             	mov    %rax,%rbx

void Parser::parseBlock(QString Block, QMap<QString,int> &sems, int line)// all deprecated?
{


    QString str = Block;
    2ca2:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    2ca9:	48 89 c7             	mov    %rax,%rdi
    2cac:	e8 00 00 00 00       	callq  2cb1 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x6bf>
    2cb1:	48 89 d8             	mov    %rbx,%rax
    2cb4:	48 89 c7             	mov    %rax,%rdi
    2cb7:	e8 00 00 00 00       	callq  2cbc <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x6ca>
        step = str.mid(i,j-i);
        str = str.right(str.length() - j);
        lineBase += j + 1;
    }

}
    2cbc:	e8 00 00 00 00       	callq  2cc1 <_ZN6Parser10parseBlockE7QStringR4QMapIS0_iEi+0x6cf>
    2cc1:	48 81 c4 58 01 00 00 	add    $0x158,%rsp
    2cc8:	5b                   	pop    %rbx
    2cc9:	5d                   	pop    %rbp
    2cca:	c3                   	retq   
    2ccb:	90                   	nop

0000000000002ccc <_ZN6Parser2peE7QString>:

void Parser::pe(QString str){
    2ccc:	55                   	push   %rbp
    2ccd:	48 89 e5             	mov    %rsp,%rbp
    2cd0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    2cd4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)

};
    2cd8:	90                   	nop
    2cd9:	5d                   	pop    %rbp
    2cda:	c3                   	retq   
    2cdb:	90                   	nop

0000000000002cdc <_ZN6Parser11splitBlocksE7QString>:

void Parser::splitBlocks(QString code)
{
    2cdc:	55                   	push   %rbp
    2cdd:	48 89 e5             	mov    %rsp,%rbp
    2ce0:	53                   	push   %rbx
    2ce1:	48 81 ec 68 01 00 00 	sub    $0x168,%rsp
    2ce8:	48 89 bd 98 fe ff ff 	mov    %rdi,-0x168(%rbp)
    2cef:	48 89 b5 90 fe ff ff 	mov    %rsi,-0x170(%rbp)
    2cf6:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    2cfd:	00 00 
    2cff:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    2d03:	31 c0                	xor    %eax,%eax
    QString str  = code;
    2d05:	48 8b 95 90 fe ff ff 	mov    -0x170(%rbp),%rdx
    2d0c:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    2d13:	48 89 d6             	mov    %rdx,%rsi
    2d16:	48 89 c7             	mov    %rax,%rdi
    2d19:	e8 00 00 00 00       	callq  2d1e <_ZN6Parser11splitBlocksE7QString+0x42>
    QString str_copy = str;
    2d1e:	48 8d 95 d0 fe ff ff 	lea    -0x130(%rbp),%rdx
    2d25:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    2d2c:	48 89 d6             	mov    %rdx,%rsi
    2d2f:	48 89 c7             	mov    %rax,%rdi
    2d32:	e8 00 00 00 00       	callq  2d37 <_ZN6Parser11splitBlocksE7QString+0x5b>

    unsigned int BFL = str.count("{");
    2d37:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    2d3e:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2d45 <_ZN6Parser11splitBlocksE7QString+0x69>
    2d45:	48 89 c7             	mov    %rax,%rdi
    2d48:	e8 00 00 00 00       	callq  2d4d <_ZN6Parser11splitBlocksE7QString+0x71>
    2d4d:	48 8d 8d f0 fe ff ff 	lea    -0x110(%rbp),%rcx
    2d54:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    2d5b:	ba 01 00 00 00       	mov    $0x1,%edx
    2d60:	48 89 ce             	mov    %rcx,%rsi
    2d63:	48 89 c7             	mov    %rax,%rdi
    2d66:	e8 00 00 00 00       	callq  2d6b <_ZN6Parser11splitBlocksE7QString+0x8f>
    2d6b:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%rbp)
    2d71:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    2d78:	48 89 c7             	mov    %rax,%rdi
    2d7b:	e8 00 00 00 00       	callq  2d80 <_ZN6Parser11splitBlocksE7QString+0xa4>
    unsigned int BFR = str.count("}");
    2d80:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    2d87:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2d8e <_ZN6Parser11splitBlocksE7QString+0xb2>
    2d8e:	48 89 c7             	mov    %rax,%rdi
    2d91:	e8 00 00 00 00       	callq  2d96 <_ZN6Parser11splitBlocksE7QString+0xba>
    2d96:	48 8d 8d 00 ff ff ff 	lea    -0x100(%rbp),%rcx
    2d9d:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    2da4:	ba 01 00 00 00       	mov    $0x1,%edx
    2da9:	48 89 ce             	mov    %rcx,%rsi
    2dac:	48 89 c7             	mov    %rax,%rdi
    2daf:	e8 00 00 00 00       	callq  2db4 <_ZN6Parser11splitBlocksE7QString+0xd8>
    2db4:	89 85 bc fe ff ff    	mov    %eax,-0x144(%rbp)
    2dba:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    2dc1:	48 89 c7             	mov    %rax,%rdi
    2dc4:	e8 00 00 00 00       	callq  2dc9 <_ZN6Parser11splitBlocksE7QString+0xed>
    unsigned int BCL = str.count("(");
    2dc9:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    2dd0:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2dd7 <_ZN6Parser11splitBlocksE7QString+0xfb>
    2dd7:	48 89 c7             	mov    %rax,%rdi
    2dda:	e8 00 00 00 00       	callq  2ddf <_ZN6Parser11splitBlocksE7QString+0x103>
    2ddf:	48 8d 8d 10 ff ff ff 	lea    -0xf0(%rbp),%rcx
    2de6:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    2ded:	ba 01 00 00 00       	mov    $0x1,%edx
    2df2:	48 89 ce             	mov    %rcx,%rsi
    2df5:	48 89 c7             	mov    %rax,%rdi
    2df8:	e8 00 00 00 00       	callq  2dfd <_ZN6Parser11splitBlocksE7QString+0x121>
    2dfd:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%rbp)
    2e03:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    2e0a:	48 89 c7             	mov    %rax,%rdi
    2e0d:	e8 00 00 00 00       	callq  2e12 <_ZN6Parser11splitBlocksE7QString+0x136>
    unsigned int BCR = str.count(")");
    2e12:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    2e19:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2e20 <_ZN6Parser11splitBlocksE7QString+0x144>
    2e20:	48 89 c7             	mov    %rax,%rdi
    2e23:	e8 00 00 00 00       	callq  2e28 <_ZN6Parser11splitBlocksE7QString+0x14c>
    2e28:	48 8d 8d 20 ff ff ff 	lea    -0xe0(%rbp),%rcx
    2e2f:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    2e36:	ba 01 00 00 00       	mov    $0x1,%edx
    2e3b:	48 89 ce             	mov    %rcx,%rsi
    2e3e:	48 89 c7             	mov    %rax,%rdi
    2e41:	e8 00 00 00 00       	callq  2e46 <_ZN6Parser11splitBlocksE7QString+0x16a>
    2e46:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%rbp)
    2e4c:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    2e53:	48 89 c7             	mov    %rax,%rdi
    2e56:	e8 00 00 00 00       	callq  2e5b <_ZN6Parser11splitBlocksE7QString+0x17f>

    if(BFL!=BFR){
    2e5b:	8b 85 b8 fe ff ff    	mov    -0x148(%rbp),%eax
    2e61:	3b 85 bc fe ff ff    	cmp    -0x144(%rbp),%eax
    2e67:	74 43                	je     2eac <_ZN6Parser11splitBlocksE7QString+0x1d0>
        pe("Err. 1: Brakes {} are not pair.");
    2e69:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    2e70:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2e77 <_ZN6Parser11splitBlocksE7QString+0x19b>
    2e77:	48 89 c7             	mov    %rax,%rdi
    2e7a:	e8 00 00 00 00       	callq  2e7f <_ZN6Parser11splitBlocksE7QString+0x1a3>
    2e7f:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
    2e86:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
    2e8d:	48 89 d6             	mov    %rdx,%rsi
    2e90:	48 89 c7             	mov    %rax,%rdi
    2e93:	e8 00 00 00 00       	callq  2e98 <_ZN6Parser11splitBlocksE7QString+0x1bc>
    2e98:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    2e9f:	48 89 c7             	mov    %rax,%rdi
    2ea2:	e8 00 00 00 00       	callq  2ea7 <_ZN6Parser11splitBlocksE7QString+0x1cb>
        return;
    2ea7:	e9 d2 03 00 00       	jmpq   327e <_ZN6Parser11splitBlocksE7QString+0x5a2>
    }

    if(BCL!=BCR){
    2eac:	8b 85 c0 fe ff ff    	mov    -0x140(%rbp),%eax
    2eb2:	3b 85 c4 fe ff ff    	cmp    -0x13c(%rbp),%eax
    2eb8:	74 43                	je     2efd <_ZN6Parser11splitBlocksE7QString+0x221>
        pe("Err. 2: Brakes () are not pair.");
    2eba:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    2ec1:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2ec8 <_ZN6Parser11splitBlocksE7QString+0x1ec>
    2ec8:	48 89 c7             	mov    %rax,%rdi
    2ecb:	e8 00 00 00 00       	callq  2ed0 <_ZN6Parser11splitBlocksE7QString+0x1f4>
    2ed0:	48 8d 95 40 ff ff ff 	lea    -0xc0(%rbp),%rdx
    2ed7:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
    2ede:	48 89 d6             	mov    %rdx,%rsi
    2ee1:	48 89 c7             	mov    %rax,%rdi
    2ee4:	e8 00 00 00 00       	callq  2ee9 <_ZN6Parser11splitBlocksE7QString+0x20d>
    2ee9:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    2ef0:	48 89 c7             	mov    %rax,%rdi
    2ef3:	e8 00 00 00 00       	callq  2ef8 <_ZN6Parser11splitBlocksE7QString+0x21c>
        return;
    2ef8:	e9 81 03 00 00       	jmpq   327e <_ZN6Parser11splitBlocksE7QString+0x5a2>
    }

    QByteArray BlockResult;
    2efd:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    2f04:	48 89 c7             	mov    %rax,%rdi
    2f07:	e8 00 00 00 00       	callq  2f0c <_ZN6Parser11splitBlocksE7QString+0x230>
    QRegExp Block("module[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\,[\\s\\t]*([\\w]*)[\\s\\t]*\\)");
    2f0c:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    2f13:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2f1a <_ZN6Parser11splitBlocksE7QString+0x23e>
    2f1a:	48 89 c7             	mov    %rax,%rdi
    2f1d:	e8 00 00 00 00       	callq  2f22 <_ZN6Parser11splitBlocksE7QString+0x246>
    2f22:	48 8d b5 70 ff ff ff 	lea    -0x90(%rbp),%rsi
    2f29:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    2f30:	b9 00 00 00 00       	mov    $0x0,%ecx
    2f35:	ba 01 00 00 00       	mov    $0x1,%edx
    2f3a:	48 89 c7             	mov    %rax,%rdi
    2f3d:	e8 00 00 00 00       	callq  2f42 <_ZN6Parser11splitBlocksE7QString+0x266>
    2f42:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    2f49:	48 89 c7             	mov    %rax,%rdi
    2f4c:	e8 00 00 00 00       	callq  2f51 <_ZN6Parser11splitBlocksE7QString+0x275>
    int i = 0;
    2f51:	c7 85 c8 fe ff ff 00 	movl   $0x0,-0x138(%rbp)
    2f58:	00 00 00 
    QString blockName;
    2f5b:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    2f5f:	48 89 c7             	mov    %rax,%rdi
    2f62:	e8 00 00 00 00       	callq  2f67 <_ZN6Parser11splitBlocksE7QString+0x28b>
    QChar qc;
    2f67:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    2f6e:	48 89 c7             	mov    %rax,%rdi
    2f71:	e8 00 00 00 00       	callq  2f76 <_ZN6Parser11splitBlocksE7QString+0x29a>

    int     lineBase = 0;
    2f76:	c7 85 a8 fe ff ff 00 	movl   $0x0,-0x158(%rbp)
    2f7d:	00 00 00 
    int     line     = 0;
    2f80:	c7 85 cc fe ff ff 00 	movl   $0x0,-0x134(%rbp)
    2f87:	00 00 00 
    QString block;
    2f8a:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    2f8e:	48 89 c7             	mov    %rax,%rdi
    2f91:	e8 00 00 00 00       	callq  2f96 <_ZN6Parser11splitBlocksE7QString+0x2ba>

    while(1==1)
    {
        i = Block.indexIn(str);if(i<0)return;
    2f96:	48 8d b5 d0 fe ff ff 	lea    -0x130(%rbp),%rsi
    2f9d:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    2fa4:	b9 00 00 00 00       	mov    $0x0,%ecx
    2fa9:	ba 00 00 00 00       	mov    $0x0,%edx
    2fae:	48 89 c7             	mov    %rax,%rdi
    2fb1:	e8 00 00 00 00       	callq  2fb6 <_ZN6Parser11splitBlocksE7QString+0x2da>
    2fb6:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%rbp)
    2fbc:	83 bd c8 fe ff ff 00 	cmpl   $0x0,-0x138(%rbp)
    2fc3:	0f 88 7e 02 00 00    	js     3247 <_ZN6Parser11splitBlocksE7QString+0x56b>

        line = whatLine(str_copy, lineBase + i) + 1;
    2fc9:	8b 95 a8 fe ff ff    	mov    -0x158(%rbp),%edx
    2fcf:	8b 85 c8 fe ff ff    	mov    -0x138(%rbp),%eax
    2fd5:	8d 1c 02             	lea    (%rdx,%rax,1),%ebx
    2fd8:	48 8d 95 e0 fe ff ff 	lea    -0x120(%rbp),%rdx
    2fdf:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    2fe3:	48 89 d6             	mov    %rdx,%rsi
    2fe6:	48 89 c7             	mov    %rax,%rdi
    2fe9:	e8 00 00 00 00       	callq  2fee <_ZN6Parser11splitBlocksE7QString+0x312>
    2fee:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
    2ff2:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
    2ff9:	89 da                	mov    %ebx,%edx
    2ffb:	48 89 ce             	mov    %rcx,%rsi
    2ffe:	48 89 c7             	mov    %rax,%rdi
    3001:	e8 00 00 00 00       	callq  3006 <_ZN6Parser11splitBlocksE7QString+0x32a>
    3006:	83 c0 01             	add    $0x1,%eax
    3009:	89 85 cc fe ff ff    	mov    %eax,-0x134(%rbp)
    300f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    3013:	48 89 c7             	mov    %rax,%rdi
    3016:	e8 00 00 00 00       	callq  301b <_ZN6Parser11splitBlocksE7QString+0x33f>
        blockName = Block.cap(1);
    301b:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    301f:	48 8d 8d 60 ff ff ff 	lea    -0xa0(%rbp),%rcx
    3026:	ba 01 00 00 00       	mov    $0x1,%edx
    302b:	48 89 ce             	mov    %rcx,%rsi
    302e:	48 89 c7             	mov    %rax,%rdi
    3031:	e8 00 00 00 00       	callq  3036 <_ZN6Parser11splitBlocksE7QString+0x35a>
    3036:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    303a:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    303e:	48 89 d6             	mov    %rdx,%rsi
    3041:	48 89 c7             	mov    %rax,%rdi
    3044:	e8 00 00 00 00       	callq  3049 <_ZN6Parser11splitBlocksE7QString+0x36d>
    3049:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    304d:	48 89 c7             	mov    %rax,%rdi
    3050:	e8 00 00 00 00       	callq  3055 <_ZN6Parser11splitBlocksE7QString+0x379>
        int j = str.indexOf('{',i);
    3055:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3059:	be 7b 00 00 00       	mov    $0x7b,%esi
    305e:	48 89 c7             	mov    %rax,%rdi
    3061:	e8 00 00 00 00       	callq  3066 <_ZN6Parser11splitBlocksE7QString+0x38a>
    3066:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
    306c:	0f b7 75 d0          	movzwl -0x30(%rbp),%esi
    3070:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    3077:	b9 01 00 00 00       	mov    $0x1,%ecx
    307c:	48 89 c7             	mov    %rax,%rdi
    307f:	e8 00 00 00 00       	callq  3084 <_ZN6Parser11splitBlocksE7QString+0x3a8>
    3084:	89 85 ac fe ff ff    	mov    %eax,-0x154(%rbp)

        qc = str[j];
    308a:	8b 95 ac fe ff ff    	mov    -0x154(%rbp),%edx
    3090:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    3097:	89 d6                	mov    %edx,%esi
    3099:	48 89 c7             	mov    %rax,%rdi
    309c:	e8 00 00 00 00       	callq  30a1 <_ZN6Parser11splitBlocksE7QString+0x3c5>
    30a1:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    30a5:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    30a9:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    30ad:	48 89 c7             	mov    %rax,%rdi
    30b0:	e8 00 00 00 00       	callq  30b5 <_ZN6Parser11splitBlocksE7QString+0x3d9>
    30b5:	66 89 85 a0 fe ff ff 	mov    %ax,-0x160(%rbp)

        int bl=1;
    30bc:	c7 85 b0 fe ff ff 01 	movl   $0x1,-0x150(%rbp)
    30c3:	00 00 00 
        int br=0;
    30c6:	c7 85 b4 fe ff ff 00 	movl   $0x0,-0x14c(%rbp)
    30cd:	00 00 00 

        while(bl != br)
    30d0:	8b 85 b0 fe ff ff    	mov    -0x150(%rbp),%eax
    30d6:	3b 85 b4 fe ff ff    	cmp    -0x14c(%rbp),%eax
    30dc:	0f 84 a2 00 00 00    	je     3184 <_ZN6Parser11splitBlocksE7QString+0x4a8>
        {
            j++;
    30e2:	83 85 ac fe ff ff 01 	addl   $0x1,-0x154(%rbp)
            qc = str[j];
    30e9:	8b 95 ac fe ff ff    	mov    -0x154(%rbp),%edx
    30ef:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    30f6:	89 d6                	mov    %edx,%esi
    30f8:	48 89 c7             	mov    %rax,%rdi
    30fb:	e8 00 00 00 00       	callq  3100 <_ZN6Parser11splitBlocksE7QString+0x424>
    3100:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    3104:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    3108:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    310c:	48 89 c7             	mov    %rax,%rdi
    310f:	e8 00 00 00 00       	callq  3114 <_ZN6Parser11splitBlocksE7QString+0x438>
    3114:	66 89 85 a0 fe ff ff 	mov    %ax,-0x160(%rbp)
            if(qc=='{') bl++;
    311b:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    311f:	be 7b 00 00 00       	mov    $0x7b,%esi
    3124:	48 89 c7             	mov    %rax,%rdi
    3127:	e8 00 00 00 00       	callq  312c <_ZN6Parser11splitBlocksE7QString+0x450>
    312c:	0f b7 55 d0          	movzwl -0x30(%rbp),%edx
    3130:	0f b7 85 a0 fe ff ff 	movzwl -0x160(%rbp),%eax
    3137:	89 d6                	mov    %edx,%esi
    3139:	89 c7                	mov    %eax,%edi
    313b:	e8 00 00 00 00       	callq  3140 <_ZN6Parser11splitBlocksE7QString+0x464>
    3140:	84 c0                	test   %al,%al
    3142:	74 07                	je     314b <_ZN6Parser11splitBlocksE7QString+0x46f>
    3144:	83 85 b0 fe ff ff 01 	addl   $0x1,-0x150(%rbp)
            if(qc=='}') br++;
    314b:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    314f:	be 7d 00 00 00       	mov    $0x7d,%esi
    3154:	48 89 c7             	mov    %rax,%rdi
    3157:	e8 00 00 00 00       	callq  315c <_ZN6Parser11splitBlocksE7QString+0x480>
    315c:	0f b7 55 d0          	movzwl -0x30(%rbp),%edx
    3160:	0f b7 85 a0 fe ff ff 	movzwl -0x160(%rbp),%eax
    3167:	89 d6                	mov    %edx,%esi
    3169:	89 c7                	mov    %eax,%edi
    316b:	e8 00 00 00 00       	callq  3170 <_ZN6Parser11splitBlocksE7QString+0x494>
    3170:	84 c0                	test   %al,%al
    3172:	0f 84 58 ff ff ff    	je     30d0 <_ZN6Parser11splitBlocksE7QString+0x3f4>
    3178:	83 85 b4 fe ff ff 01 	addl   $0x1,-0x14c(%rbp)
        qc = str[j];

        int bl=1;
        int br=0;

        while(bl != br)
    317f:	e9 4c ff ff ff       	jmpq   30d0 <_ZN6Parser11splitBlocksE7QString+0x3f4>
            qc = str[j];
            if(qc=='{') bl++;
            if(qc=='}') br++;
        }

        block = str.mid(i,j-i);
    3184:	8b 85 ac fe ff ff    	mov    -0x154(%rbp),%eax
    318a:	2b 85 c8 fe ff ff    	sub    -0x138(%rbp),%eax
    3190:	89 c1                	mov    %eax,%ecx
    3192:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3196:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
    319c:	48 8d b5 d0 fe ff ff 	lea    -0x130(%rbp),%rsi
    31a3:	48 89 c7             	mov    %rax,%rdi
    31a6:	e8 00 00 00 00       	callq  31ab <_ZN6Parser11splitBlocksE7QString+0x4cf>
    31ab:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    31af:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    31b3:	48 89 d6             	mov    %rdx,%rsi
    31b6:	48 89 c7             	mov    %rax,%rdi
    31b9:	e8 00 00 00 00       	callq  31be <_ZN6Parser11splitBlocksE7QString+0x4e2>
    31be:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    31c2:	48 89 c7             	mov    %rax,%rdi
    31c5:	e8 00 00 00 00       	callq  31ca <_ZN6Parser11splitBlocksE7QString+0x4ee>

        str = str.right(str.length()-j);
    31ca:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    31d1:	48 89 c7             	mov    %rax,%rdi
    31d4:	e8 00 00 00 00       	callq  31d9 <_ZN6Parser11splitBlocksE7QString+0x4fd>
    31d9:	2b 85 ac fe ff ff    	sub    -0x154(%rbp),%eax
    31df:	89 c2                	mov    %eax,%edx
    31e1:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    31e5:	48 8d 8d d0 fe ff ff 	lea    -0x130(%rbp),%rcx
    31ec:	48 89 ce             	mov    %rcx,%rsi
    31ef:	48 89 c7             	mov    %rax,%rdi
    31f2:	e8 00 00 00 00       	callq  31f7 <_ZN6Parser11splitBlocksE7QString+0x51b>
    31f7:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    31fb:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    3202:	48 89 d6             	mov    %rdx,%rsi
    3205:	48 89 c7             	mov    %rax,%rdi
    3208:	e8 00 00 00 00       	callq  320d <_ZN6Parser11splitBlocksE7QString+0x531>
    320d:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3211:	48 89 c7             	mov    %rax,%rdi
    3214:	e8 00 00 00 00       	callq  3219 <_ZN6Parser11splitBlocksE7QString+0x53d>
        lineBase += j;
    3219:	8b 85 ac fe ff ff    	mov    -0x154(%rbp),%eax
    321f:	01 85 a8 fe ff ff    	add    %eax,-0x158(%rbp)

    this->Blocks.append(block);
    3225:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
    322c:	48 8d 90 a0 00 00 00 	lea    0xa0(%rax),%rdx
    3233:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3237:	48 89 c6             	mov    %rax,%rsi
    323a:	48 89 d7             	mov    %rdx,%rdi
    323d:	e8 00 00 00 00       	callq  3242 <_ZN6Parser11splitBlocksE7QString+0x566>

    int     lineBase = 0;
    int     line     = 0;
    QString block;

    while(1==1)
    3242:	e9 4f fd ff ff       	jmpq   2f96 <_ZN6Parser11splitBlocksE7QString+0x2ba>
    {
        i = Block.indexIn(str);if(i<0)return;
    3247:	90                   	nop
    QString blockName;
    QChar qc;

    int     lineBase = 0;
    int     line     = 0;
    QString block;
    3248:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    324c:	48 89 c7             	mov    %rax,%rdi
    324f:	e8 00 00 00 00       	callq  3254 <_ZN6Parser11splitBlocksE7QString+0x578>
    }

    QByteArray BlockResult;
    QRegExp Block("module[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\,[\\s\\t]*([\\w]*)[\\s\\t]*\\)");
    int i = 0;
    QString blockName;
    3254:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3258:	48 89 c7             	mov    %rax,%rdi
    325b:	e8 00 00 00 00       	callq  3260 <_ZN6Parser11splitBlocksE7QString+0x584>
        pe("Err. 2: Brakes () are not pair.");
        return;
    }

    QByteArray BlockResult;
    QRegExp Block("module[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\,[\\s\\t]*([\\w]*)[\\s\\t]*\\)");
    3260:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    3267:	48 89 c7             	mov    %rax,%rdi
    326a:	e8 00 00 00 00       	callq  326f <_ZN6Parser11splitBlocksE7QString+0x593>
    if(BCL!=BCR){
        pe("Err. 2: Brakes () are not pair.");
        return;
    }

    QByteArray BlockResult;
    326f:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    3276:	48 89 c7             	mov    %rax,%rdi
    3279:	e8 00 00 00 00       	callq  327e <_ZN6Parser11splitBlocksE7QString+0x5a2>
};

void Parser::splitBlocks(QString code)
{
    QString str  = code;
    QString str_copy = str;
    327e:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    3285:	48 89 c7             	mov    %rax,%rdi
    3288:	e8 00 00 00 00       	callq  328d <_ZN6Parser11splitBlocksE7QString+0x5b1>

};

void Parser::splitBlocks(QString code)
{
    QString str  = code;
    328d:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    3294:	48 89 c7             	mov    %rax,%rdi
    3297:	e8 00 00 00 00       	callq  329c <_ZN6Parser11splitBlocksE7QString+0x5c0>
        str = str.right(str.length()-j);
        lineBase += j;

    this->Blocks.append(block);
   }
}
    329c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    32a0:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    32a7:	00 00 
    32a9:	0f 84 7e 01 00 00    	je     342d <_ZN6Parser11splitBlocksE7QString+0x751>
    32af:	e9 74 01 00 00       	jmpq   3428 <_ZN6Parser11splitBlocksE7QString+0x74c>
    32b4:	48 89 c3             	mov    %rax,%rbx
void Parser::splitBlocks(QString code)
{
    QString str  = code;
    QString str_copy = str;

    unsigned int BFL = str.count("{");
    32b7:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    32be:	48 89 c7             	mov    %rax,%rdi
    32c1:	e8 00 00 00 00       	callq  32c6 <_ZN6Parser11splitBlocksE7QString+0x5ea>
    32c6:	e9 2f 01 00 00       	jmpq   33fa <_ZN6Parser11splitBlocksE7QString+0x71e>
    32cb:	48 89 c3             	mov    %rax,%rbx
    unsigned int BFR = str.count("}");
    32ce:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    32d5:	48 89 c7             	mov    %rax,%rdi
    32d8:	e8 00 00 00 00       	callq  32dd <_ZN6Parser11splitBlocksE7QString+0x601>
    32dd:	e9 18 01 00 00       	jmpq   33fa <_ZN6Parser11splitBlocksE7QString+0x71e>
    32e2:	48 89 c3             	mov    %rax,%rbx
    unsigned int BCL = str.count("(");
    32e5:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    32ec:	48 89 c7             	mov    %rax,%rdi
    32ef:	e8 00 00 00 00       	callq  32f4 <_ZN6Parser11splitBlocksE7QString+0x618>
    32f4:	e9 01 01 00 00       	jmpq   33fa <_ZN6Parser11splitBlocksE7QString+0x71e>
    32f9:	48 89 c3             	mov    %rax,%rbx
    unsigned int BCR = str.count(")");
    32fc:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    3303:	48 89 c7             	mov    %rax,%rdi
    3306:	e8 00 00 00 00       	callq  330b <_ZN6Parser11splitBlocksE7QString+0x62f>
    330b:	e9 ea 00 00 00       	jmpq   33fa <_ZN6Parser11splitBlocksE7QString+0x71e>
    3310:	48 89 c3             	mov    %rax,%rbx

    if(BFL!=BFR){
        pe("Err. 1: Brakes {} are not pair.");
    3313:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    331a:	48 89 c7             	mov    %rax,%rdi
    331d:	e8 00 00 00 00       	callq  3322 <_ZN6Parser11splitBlocksE7QString+0x646>
    3322:	e9 d3 00 00 00       	jmpq   33fa <_ZN6Parser11splitBlocksE7QString+0x71e>
    3327:	48 89 c3             	mov    %rax,%rbx
        return;
    }

    if(BCL!=BCR){
        pe("Err. 2: Brakes () are not pair.");
    332a:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    3331:	48 89 c7             	mov    %rax,%rdi
    3334:	e8 00 00 00 00       	callq  3339 <_ZN6Parser11splitBlocksE7QString+0x65d>
    3339:	e9 bc 00 00 00       	jmpq   33fa <_ZN6Parser11splitBlocksE7QString+0x71e>
    333e:	48 89 c3             	mov    %rax,%rbx
    3341:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3348:	48 89 c7             	mov    %rax,%rdi
    334b:	e8 00 00 00 00       	callq  3350 <_ZN6Parser11splitBlocksE7QString+0x674>
    3350:	e9 91 00 00 00       	jmpq   33e6 <_ZN6Parser11splitBlocksE7QString+0x70a>
    3355:	48 89 c3             	mov    %rax,%rbx
    3358:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    335f:	48 89 c7             	mov    %rax,%rdi
    3362:	e8 00 00 00 00       	callq  3367 <_ZN6Parser11splitBlocksE7QString+0x68b>
    3367:	eb 7d                	jmp    33e6 <_ZN6Parser11splitBlocksE7QString+0x70a>
    3369:	48 89 c3             	mov    %rax,%rbx

    while(1==1)
    {
        i = Block.indexIn(str);if(i<0)return;

        line = whatLine(str_copy, lineBase + i) + 1;
    336c:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    3370:	48 89 c7             	mov    %rax,%rdi
    3373:	e8 00 00 00 00       	callq  3378 <_ZN6Parser11splitBlocksE7QString+0x69c>
    3378:	eb 36                	jmp    33b0 <_ZN6Parser11splitBlocksE7QString+0x6d4>
    337a:	48 89 c3             	mov    %rax,%rbx
        blockName = Block.cap(1);
    337d:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3381:	48 89 c7             	mov    %rax,%rdi
    3384:	e8 00 00 00 00       	callq  3389 <_ZN6Parser11splitBlocksE7QString+0x6ad>
    3389:	eb 25                	jmp    33b0 <_ZN6Parser11splitBlocksE7QString+0x6d4>
    338b:	48 89 c3             	mov    %rax,%rbx
            qc = str[j];
            if(qc=='{') bl++;
            if(qc=='}') br++;
        }

        block = str.mid(i,j-i);
    338e:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3392:	48 89 c7             	mov    %rax,%rdi
    3395:	e8 00 00 00 00       	callq  339a <_ZN6Parser11splitBlocksE7QString+0x6be>
    339a:	eb 14                	jmp    33b0 <_ZN6Parser11splitBlocksE7QString+0x6d4>
    339c:	48 89 c3             	mov    %rax,%rbx

        str = str.right(str.length()-j);
    339f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    33a3:	48 89 c7             	mov    %rax,%rdi
    33a6:	e8 00 00 00 00       	callq  33ab <_ZN6Parser11splitBlocksE7QString+0x6cf>
    33ab:	eb 03                	jmp    33b0 <_ZN6Parser11splitBlocksE7QString+0x6d4>
    33ad:	48 89 c3             	mov    %rax,%rbx
    QString blockName;
    QChar qc;

    int     lineBase = 0;
    int     line     = 0;
    QString block;
    33b0:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    33b4:	48 89 c7             	mov    %rax,%rdi
    33b7:	e8 00 00 00 00       	callq  33bc <_ZN6Parser11splitBlocksE7QString+0x6e0>
    33bc:	eb 03                	jmp    33c1 <_ZN6Parser11splitBlocksE7QString+0x6e5>
    33be:	48 89 c3             	mov    %rax,%rbx
    }

    QByteArray BlockResult;
    QRegExp Block("module[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\,[\\s\\t]*([\\w]*)[\\s\\t]*\\)");
    int i = 0;
    QString blockName;
    33c1:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    33c5:	48 89 c7             	mov    %rax,%rdi
    33c8:	e8 00 00 00 00       	callq  33cd <_ZN6Parser11splitBlocksE7QString+0x6f1>
    33cd:	eb 03                	jmp    33d2 <_ZN6Parser11splitBlocksE7QString+0x6f6>
    33cf:	48 89 c3             	mov    %rax,%rbx
        pe("Err. 2: Brakes () are not pair.");
        return;
    }

    QByteArray BlockResult;
    QRegExp Block("module[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\,[\\s\\t]*([\\w]*)[\\s\\t]*\\)");
    33d2:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    33d9:	48 89 c7             	mov    %rax,%rdi
    33dc:	e8 00 00 00 00       	callq  33e1 <_ZN6Parser11splitBlocksE7QString+0x705>
    33e1:	eb 03                	jmp    33e6 <_ZN6Parser11splitBlocksE7QString+0x70a>
    33e3:	48 89 c3             	mov    %rax,%rbx
    if(BCL!=BCR){
        pe("Err. 2: Brakes () are not pair.");
        return;
    }

    QByteArray BlockResult;
    33e6:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    33ed:	48 89 c7             	mov    %rax,%rdi
    33f0:	e8 00 00 00 00       	callq  33f5 <_ZN6Parser11splitBlocksE7QString+0x719>
    33f5:	eb 03                	jmp    33fa <_ZN6Parser11splitBlocksE7QString+0x71e>
    33f7:	48 89 c3             	mov    %rax,%rbx
};

void Parser::splitBlocks(QString code)
{
    QString str  = code;
    QString str_copy = str;
    33fa:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    3401:	48 89 c7             	mov    %rax,%rdi
    3404:	e8 00 00 00 00       	callq  3409 <_ZN6Parser11splitBlocksE7QString+0x72d>
    3409:	eb 03                	jmp    340e <_ZN6Parser11splitBlocksE7QString+0x732>
    340b:	48 89 c3             	mov    %rax,%rbx

};

void Parser::splitBlocks(QString code)
{
    QString str  = code;
    340e:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    3415:	48 89 c7             	mov    %rax,%rdi
    3418:	e8 00 00 00 00       	callq  341d <_ZN6Parser11splitBlocksE7QString+0x741>
    341d:	48 89 d8             	mov    %rbx,%rax
    3420:	48 89 c7             	mov    %rax,%rdi
    3423:	e8 00 00 00 00       	callq  3428 <_ZN6Parser11splitBlocksE7QString+0x74c>
        str = str.right(str.length()-j);
        lineBase += j;

    this->Blocks.append(block);
   }
}
    3428:	e8 00 00 00 00       	callq  342d <_ZN6Parser11splitBlocksE7QString+0x751>
    342d:	48 81 c4 68 01 00 00 	add    $0x168,%rsp
    3434:	5b                   	pop    %rbx
    3435:	5d                   	pop    %rbp
    3436:	c3                   	retq   
    3437:	90                   	nop

0000000000003438 <_ZN6Parser10globalSemsEv>:

void Parser::globalSems(){
    3438:	55                   	push   %rbp
    3439:	48 89 e5             	mov    %rsp,%rbp
    343c:	53                   	push   %rbx
    343d:	48 83 ec 48          	sub    $0x48,%rsp
    3441:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    3445:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    344c:	00 00 
    344e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    3452:	31 c0                	xor    %eax,%eax
    QMap<QString, int> globalSems;
    3454:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3458:	48 89 c7             	mov    %rax,%rdi
    345b:	e8 00 00 00 00       	callq  3460 <_ZN6Parser10globalSemsEv+0x28>
    fetchSems(":/config.xml", globalSems);
    3460:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3464:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 346b <_ZN6Parser10globalSemsEv+0x33>
    346b:	48 89 c7             	mov    %rax,%rdi
    346e:	e8 00 00 00 00       	callq  3473 <_ZN6Parser10globalSemsEv+0x3b>
    3473:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    3477:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
    347b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    347f:	48 89 ce             	mov    %rcx,%rsi
    3482:	48 89 c7             	mov    %rax,%rdi
    3485:	e8 00 00 00 00       	callq  348a <_ZN6Parser10globalSemsEv+0x52>
    348a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    348e:	48 89 c7             	mov    %rax,%rdi
    3491:	e8 00 00 00 00       	callq  3496 <_ZN6Parser10globalSemsEv+0x5e>
    displaySems(globalSems);
    3496:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    349a:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    349e:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
    34a2:	48 89 ce             	mov    %rcx,%rsi
    34a5:	48 89 c7             	mov    %rax,%rdi
    34a8:	e8 00 00 00 00       	callq  34ad <_ZN6Parser10globalSemsEv+0x75>
    34ad:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    34b1:	48 89 c7             	mov    %rax,%rdi
    34b4:	e8 00 00 00 00       	callq  34b9 <_ZN6Parser10globalSemsEv+0x81>
    this->Blocks.append(block);
   }
}

void Parser::globalSems(){
    QMap<QString, int> globalSems;
    34b9:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    34bd:	48 89 c7             	mov    %rax,%rdi
    34c0:	e8 00 00 00 00       	callq  34c5 <_ZN6Parser10globalSemsEv+0x8d>
    fetchSems(":/config.xml", globalSems);
    displaySems(globalSems);
}
    34c5:	90                   	nop
    34c6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    34ca:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    34d1:	00 00 
    34d3:	74 32                	je     3507 <_ZN6Parser10globalSemsEv+0xcf>
    34d5:	eb 2b                	jmp    3502 <_ZN6Parser10globalSemsEv+0xca>
    34d7:	48 89 c3             	mov    %rax,%rbx
   }
}

void Parser::globalSems(){
    QMap<QString, int> globalSems;
    fetchSems(":/config.xml", globalSems);
    34da:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    34de:	48 89 c7             	mov    %rax,%rdi
    34e1:	e8 00 00 00 00       	callq  34e6 <_ZN6Parser10globalSemsEv+0xae>
    34e6:	eb 03                	jmp    34eb <_ZN6Parser10globalSemsEv+0xb3>
    34e8:	48 89 c3             	mov    %rax,%rbx
    this->Blocks.append(block);
   }
}

void Parser::globalSems(){
    QMap<QString, int> globalSems;
    34eb:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    34ef:	48 89 c7             	mov    %rax,%rdi
    34f2:	e8 00 00 00 00       	callq  34f7 <_ZN6Parser10globalSemsEv+0xbf>
    34f7:	48 89 d8             	mov    %rbx,%rax
    34fa:	48 89 c7             	mov    %rax,%rdi
    34fd:	e8 00 00 00 00       	callq  3502 <_ZN6Parser10globalSemsEv+0xca>
    fetchSems(":/config.xml", globalSems);
    displaySems(globalSems);
}
    3502:	e8 00 00 00 00       	callq  3507 <_ZN6Parser10globalSemsEv+0xcf>
    3507:	48 83 c4 48          	add    $0x48,%rsp
    350b:	5b                   	pop    %rbx
    350c:	5d                   	pop    %rbp
    350d:	c3                   	retq   

000000000000350e <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi>:

void Parser::parseFragment(QString text, int StepN, const QMap<QString, int> &sems, int line)
{
    350e:	55                   	push   %rbp
    350f:	48 89 e5             	mov    %rsp,%rbp
    3512:	53                   	push   %rbx
    3513:	48 81 ec 18 01 00 00 	sub    $0x118,%rsp
    351a:	48 89 bd f8 fe ff ff 	mov    %rdi,-0x108(%rbp)
    3521:	48 89 b5 f0 fe ff ff 	mov    %rsi,-0x110(%rbp)
    3528:	89 95 ec fe ff ff    	mov    %edx,-0x114(%rbp)
    352e:	48 89 8d e0 fe ff ff 	mov    %rcx,-0x120(%rbp)
    3535:	44 89 85 e8 fe ff ff 	mov    %r8d,-0x118(%rbp)
    353c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    3543:	00 00 
    3545:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    3549:	31 c0                	xor    %eax,%eax
        QByteArray result;
    354b:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    3552:	48 89 c7             	mov    %rax,%rdi
    3555:	e8 00 00 00 00       	callq  355a <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4c>

        result += StepN;
    355a:	8b 85 ec fe ff ff    	mov    -0x114(%rbp),%eax
    3560:	0f be d0             	movsbl %al,%edx
    3563:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    356a:	89 d6                	mov    %edx,%esi
    356c:	48 89 c7             	mov    %rax,%rdi
    356f:	e8 00 00 00 00       	callq  3574 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x66>

        text.replace("}"," ");
    3574:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    357b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3582 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x74>
    3582:	48 89 c7             	mov    %rax,%rdi
    3585:	e8 00 00 00 00       	callq  358a <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x7c>
    358a:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    3591:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3598 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x8a>
    3598:	48 89 c7             	mov    %rax,%rdi
    359b:	e8 00 00 00 00       	callq  35a0 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x92>
    35a0:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
    35a7:	48 8d b5 20 ff ff ff 	lea    -0xe0(%rbp),%rsi
    35ae:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    35b5:	b9 01 00 00 00       	mov    $0x1,%ecx
    35ba:	48 89 c7             	mov    %rax,%rdi
    35bd:	e8 00 00 00 00       	callq  35c2 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0xb4>
    35c2:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    35c9:	48 89 c7             	mov    %rax,%rdi
    35cc:	e8 00 00 00 00       	callq  35d1 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0xc3>
    35d1:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    35d8:	48 89 c7             	mov    %rax,%rdi
    35db:	e8 00 00 00 00       	callq  35e0 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0xd2>
        text.replace("{"," ");
    35e0:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    35e7:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 35ee <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0xe0>
    35ee:	48 89 c7             	mov    %rax,%rdi
    35f1:	e8 00 00 00 00       	callq  35f6 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0xe8>
    35f6:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    35fd:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3604 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0xf6>
    3604:	48 89 c7             	mov    %rax,%rdi
    3607:	e8 00 00 00 00       	callq  360c <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0xfe>
    360c:	48 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%rdx
    3613:	48 8d b5 40 ff ff ff 	lea    -0xc0(%rbp),%rsi
    361a:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    3621:	b9 01 00 00 00       	mov    $0x1,%ecx
    3626:	48 89 c7             	mov    %rax,%rdi
    3629:	e8 00 00 00 00       	callq  362e <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x120>
    362e:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    3635:	48 89 c7             	mov    %rax,%rdi
    3638:	e8 00 00 00 00       	callq  363d <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x12f>
    363d:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    3644:	48 89 c7             	mov    %rax,%rdi
    3647:	e8 00 00 00 00       	callq  364c <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x13e>
        text.replace("\'", "");
    364c:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3653:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 365a <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x14c>
    365a:	48 89 c7             	mov    %rax,%rdi
    365d:	e8 00 00 00 00       	callq  3662 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x154>
    3662:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    3669:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3670 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x162>
    3670:	48 89 c7             	mov    %rax,%rdi
    3673:	e8 00 00 00 00       	callq  3678 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x16a>
    3678:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    367f:	48 8d b5 60 ff ff ff 	lea    -0xa0(%rbp),%rsi
    3686:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    368d:	b9 01 00 00 00       	mov    $0x1,%ecx
    3692:	48 89 c7             	mov    %rax,%rdi
    3695:	e8 00 00 00 00       	callq  369a <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x18c>
    369a:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    36a1:	48 89 c7             	mov    %rax,%rdi
    36a4:	e8 00 00 00 00       	callq  36a9 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x19b>
    36a9:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    36b0:	48 89 c7             	mov    %rax,%rdi
    36b3:	e8 00 00 00 00       	callq  36b8 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x1aa>
        //text.replace("\‘", "");
        //text.replace("\’", "");

        text.replace("Command ", "", Qt::CaseInsensitive);
    36b8:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    36bc:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 36c3 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x1b5>
    36c3:	48 89 c7             	mov    %rax,%rdi
    36c6:	e8 00 00 00 00       	callq  36cb <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x1bd>
    36cb:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    36cf:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 36d6 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x1c8>
    36d6:	48 89 c7             	mov    %rax,%rdi
    36d9:	e8 00 00 00 00       	callq  36de <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x1d0>
    36de:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    36e2:	48 8d 75 80          	lea    -0x80(%rbp),%rsi
    36e6:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    36ed:	b9 00 00 00 00       	mov    $0x0,%ecx
    36f2:	48 89 c7             	mov    %rax,%rdi
    36f5:	e8 00 00 00 00       	callq  36fa <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x1ec>
    36fa:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    36fe:	48 89 c7             	mov    %rax,%rdi
    3701:	e8 00 00 00 00       	callq  3706 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x1f8>
    3706:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    370a:	48 89 c7             	mov    %rax,%rdi
    370d:	e8 00 00 00 00       	callq  3712 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x204>
        //text.replace("Options", "", Qt::CaseInsensitive); // потому что у Options есть код.
        text.replace("Control_by", "", Qt::CaseInsensitive);
    3712:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3716:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 371d <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x20f>
    371d:	48 89 c7             	mov    %rax,%rdi
    3720:	e8 00 00 00 00       	callq  3725 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x217>
    3725:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    3729:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3730 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x222>
    3730:	48 89 c7             	mov    %rax,%rdi
    3733:	e8 00 00 00 00       	callq  3738 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x22a>
    3738:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    373c:	48 8d 75 a0          	lea    -0x60(%rbp),%rsi
    3740:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    3747:	b9 00 00 00 00       	mov    $0x0,%ecx
    374c:	48 89 c7             	mov    %rax,%rdi
    374f:	e8 00 00 00 00       	callq  3754 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x246>
    3754:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    3758:	48 89 c7             	mov    %rax,%rdi
    375b:	e8 00 00 00 00       	callq  3760 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x252>
    3760:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3764:	48 89 c7             	mov    %rax,%rdi
    3767:	e8 00 00 00 00       	callq  376c <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x25e>

        QStringList lines = text.split("\n");
    376c:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3770:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3777 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x269>
    3777:	48 89 c7             	mov    %rax,%rdi
    377a:	e8 00 00 00 00       	callq  377f <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x271>
    377f:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3783:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    3787:	48 8b b5 f0 fe ff ff 	mov    -0x110(%rbp),%rsi
    378e:	41 b8 01 00 00 00    	mov    $0x1,%r8d
    3794:	b9 00 00 00 00       	mov    $0x0,%ecx
    3799:	48 89 c7             	mov    %rax,%rdi
    379c:	e8 00 00 00 00       	callq  37a1 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x293>
    37a1:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    37a5:	48 89 c7             	mov    %rax,%rdi
    37a8:	e8 00 00 00 00       	callq  37ad <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x29f>

        for (int i = 0; i < lines.length(); i++)
    37ad:	c7 85 04 ff ff ff 00 	movl   $0x0,-0xfc(%rbp)
    37b4:	00 00 00 
    37b7:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    37bb:	48 89 c7             	mov    %rax,%rdi
    37be:	e8 00 00 00 00       	callq  37c3 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x2b5>
    37c3:	3b 85 04 ff ff ff    	cmp    -0xfc(%rbp),%eax
    37c9:	0f 9f c0             	setg   %al
    37cc:	84 c0                	test   %al,%al
    37ce:	74 6e                	je     383e <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x330>
        {
            result += parseLine(lines[i], sems, line);
    37d0:	8b 95 04 ff ff ff    	mov    -0xfc(%rbp),%edx
    37d6:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    37da:	89 d6                	mov    %edx,%esi
    37dc:	48 89 c7             	mov    %rax,%rdi
    37df:	e8 00 00 00 00       	callq  37e4 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x2d6>
    37e4:	48 89 c7             	mov    %rax,%rdi
    37e7:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    37eb:	8b 8d e8 fe ff ff    	mov    -0x118(%rbp),%ecx
    37f1:	48 8b 95 e0 fe ff ff 	mov    -0x120(%rbp),%rdx
    37f8:	48 8b b5 f8 fe ff ff 	mov    -0x108(%rbp),%rsi
    37ff:	41 89 c8             	mov    %ecx,%r8d
    3802:	48 89 d1             	mov    %rdx,%rcx
    3805:	48 89 fa             	mov    %rdi,%rdx
    3808:	48 89 c7             	mov    %rax,%rdi
    380b:	e8 00 00 00 00       	callq  3810 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x302>
    3810:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    3814:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    381b:	48 89 d6             	mov    %rdx,%rsi
    381e:	48 89 c7             	mov    %rax,%rdi
    3821:	e8 00 00 00 00       	callq  3826 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x318>
    3826:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    382a:	48 89 c7             	mov    %rax,%rdi
    382d:	e8 00 00 00 00       	callq  3832 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x324>
        //text.replace("Options", "", Qt::CaseInsensitive); // потому что у Options есть код.
        text.replace("Control_by", "", Qt::CaseInsensitive);

        QStringList lines = text.split("\n");

        for (int i = 0; i < lines.length(); i++)
    3832:	83 85 04 ff ff ff 01 	addl   $0x1,-0xfc(%rbp)
    3839:	e9 79 ff ff ff       	jmpq   37b7 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x2a9>
        {
            result += parseLine(lines[i], sems, line);
        }

        int t = result.length();
    383e:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    3845:	48 89 c7             	mov    %rax,%rdi
    3848:	e8 00 00 00 00       	callq  384d <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x33f>
    384d:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%rbp)
        for(int i=0; i<(LineSize-1-t); i++){
    3853:	c7 85 08 ff ff ff 00 	movl   $0x0,-0xf8(%rbp)
    385a:	00 00 00 
    385d:	b8 1f 00 00 00       	mov    $0x1f,%eax
    3862:	2b 85 0c ff ff ff    	sub    -0xf4(%rbp),%eax
    3868:	3b 85 08 ff ff ff    	cmp    -0xf8(%rbp),%eax
    386e:	7e 1d                	jle    388d <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x37f>
            result.append((char)0);
    3870:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    3877:	be 00 00 00 00       	mov    $0x0,%esi
    387c:	48 89 c7             	mov    %rax,%rdi
    387f:	e8 00 00 00 00       	callq  3884 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x376>
        {
            result += parseLine(lines[i], sems, line);
        }

        int t = result.length();
        for(int i=0; i<(LineSize-1-t); i++){
    3884:	83 85 08 ff ff ff 01 	addl   $0x1,-0xf8(%rbp)
    388b:	eb d0                	jmp    385d <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x34f>
            result.append((char)0);
        }

        result.append(line);
    388d:	8b 85 e8 fe ff ff    	mov    -0x118(%rbp),%eax
    3893:	0f be d0             	movsbl %al,%edx
    3896:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    389d:	89 d6                	mov    %edx,%esi
    389f:	48 89 c7             	mov    %rax,%rdi
    38a2:	e8 00 00 00 00       	callq  38a7 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x399>

        globalResult += result;
    38a7:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    38ae:	48 8d 90 f0 00 00 00 	lea    0xf0(%rax),%rdx
    38b5:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    38bc:	48 89 c6             	mov    %rax,%rsi
    38bf:	48 89 d7             	mov    %rdx,%rdi
    38c2:	e8 00 00 00 00       	callq  38c7 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x3b9>

        text.replace("Command ", "", Qt::CaseInsensitive);
        //text.replace("Options", "", Qt::CaseInsensitive); // потому что у Options есть код.
        text.replace("Control_by", "", Qt::CaseInsensitive);

        QStringList lines = text.split("\n");
    38c7:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    38cb:	48 89 c7             	mov    %rax,%rdi
    38ce:	e8 00 00 00 00       	callq  38d3 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x3c5>
    displaySems(globalSems);
}

void Parser::parseFragment(QString text, int StepN, const QMap<QString, int> &sems, int line)
{
        QByteArray result;
    38d3:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    38da:	48 89 c7             	mov    %rax,%rdi
    38dd:	e8 00 00 00 00       	callq  38e2 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x3d4>

        result.append(line);

        globalResult += result;
        //rr(result.toHex());
}
    38e2:	90                   	nop
    38e3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    38e7:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    38ee:	00 00 
    38f0:	0f 84 30 01 00 00    	je     3a26 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x518>
    38f6:	e9 26 01 00 00       	jmpq   3a21 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x513>
    38fb:	48 89 c3             	mov    %rax,%rbx
{
        QByteArray result;

        result += StepN;

        text.replace("}"," ");
    38fe:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    3905:	48 89 c7             	mov    %rax,%rdi
    3908:	e8 00 00 00 00       	callq  390d <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x3ff>
    390d:	eb 03                	jmp    3912 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x404>
    390f:	48 89 c3             	mov    %rax,%rbx
    3912:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    3919:	48 89 c7             	mov    %rax,%rdi
    391c:	e8 00 00 00 00       	callq  3921 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x413>
    3921:	e9 e1 00 00 00       	jmpq   3a07 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    3926:	48 89 c3             	mov    %rax,%rbx
        text.replace("{"," ");
    3929:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    3930:	48 89 c7             	mov    %rax,%rdi
    3933:	e8 00 00 00 00       	callq  3938 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x42a>
    3938:	eb 03                	jmp    393d <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x42f>
    393a:	48 89 c3             	mov    %rax,%rbx
    393d:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    3944:	48 89 c7             	mov    %rax,%rdi
    3947:	e8 00 00 00 00       	callq  394c <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x43e>
    394c:	e9 b6 00 00 00       	jmpq   3a07 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    3951:	48 89 c3             	mov    %rax,%rbx
        text.replace("\'", "");
    3954:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    395b:	48 89 c7             	mov    %rax,%rdi
    395e:	e8 00 00 00 00       	callq  3963 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x455>
    3963:	eb 03                	jmp    3968 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x45a>
    3965:	48 89 c3             	mov    %rax,%rbx
    3968:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    396f:	48 89 c7             	mov    %rax,%rdi
    3972:	e8 00 00 00 00       	callq  3977 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x469>
    3977:	e9 8b 00 00 00       	jmpq   3a07 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    397c:	48 89 c3             	mov    %rax,%rbx
        //text.replace("\‘", "");
        //text.replace("\’", "");

        text.replace("Command ", "", Qt::CaseInsensitive);
    397f:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3983:	48 89 c7             	mov    %rax,%rdi
    3986:	e8 00 00 00 00       	callq  398b <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x47d>
    398b:	eb 03                	jmp    3990 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x482>
    398d:	48 89 c3             	mov    %rax,%rbx
    3990:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3994:	48 89 c7             	mov    %rax,%rdi
    3997:	e8 00 00 00 00       	callq  399c <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x48e>
    399c:	eb 69                	jmp    3a07 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    399e:	48 89 c3             	mov    %rax,%rbx
        //text.replace("Options", "", Qt::CaseInsensitive); // потому что у Options есть код.
        text.replace("Control_by", "", Qt::CaseInsensitive);
    39a1:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    39a5:	48 89 c7             	mov    %rax,%rdi
    39a8:	e8 00 00 00 00       	callq  39ad <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x49f>
    39ad:	eb 03                	jmp    39b2 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4a4>
    39af:	48 89 c3             	mov    %rax,%rbx
    39b2:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    39b6:	48 89 c7             	mov    %rax,%rdi
    39b9:	e8 00 00 00 00       	callq  39be <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4b0>
    39be:	eb 47                	jmp    3a07 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    39c0:	48 89 c3             	mov    %rax,%rbx
    39c3:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    39c7:	48 89 c7             	mov    %rax,%rdi
    39ca:	e8 00 00 00 00       	callq  39cf <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4c1>
    39cf:	eb 36                	jmp    3a07 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    39d1:	48 89 c3             	mov    %rax,%rbx
    39d4:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    39d8:	48 89 c7             	mov    %rax,%rdi
    39db:	e8 00 00 00 00       	callq  39e0 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4d2>
    39e0:	eb 25                	jmp    3a07 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    39e2:	48 89 c3             	mov    %rax,%rbx

        QStringList lines = text.split("\n");

        for (int i = 0; i < lines.length(); i++)
        {
            result += parseLine(lines[i], sems, line);
    39e5:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    39e9:	48 89 c7             	mov    %rax,%rdi
    39ec:	e8 00 00 00 00       	callq  39f1 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4e3>
    39f1:	eb 03                	jmp    39f6 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4e8>
    39f3:	48 89 c3             	mov    %rax,%rbx

        text.replace("Command ", "", Qt::CaseInsensitive);
        //text.replace("Options", "", Qt::CaseInsensitive); // потому что у Options есть код.
        text.replace("Control_by", "", Qt::CaseInsensitive);

        QStringList lines = text.split("\n");
    39f6:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    39fa:	48 89 c7             	mov    %rax,%rdi
    39fd:	e8 00 00 00 00       	callq  3a02 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f4>
    3a02:	eb 03                	jmp    3a07 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x4f9>
    3a04:	48 89 c3             	mov    %rax,%rbx
    displaySems(globalSems);
}

void Parser::parseFragment(QString text, int StepN, const QMap<QString, int> &sems, int line)
{
        QByteArray result;
    3a07:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    3a0e:	48 89 c7             	mov    %rax,%rdi
    3a11:	e8 00 00 00 00       	callq  3a16 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x508>
    3a16:	48 89 d8             	mov    %rbx,%rax
    3a19:	48 89 c7             	mov    %rax,%rdi
    3a1c:	e8 00 00 00 00       	callq  3a21 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x513>

        result.append(line);

        globalResult += result;
        //rr(result.toHex());
}
    3a21:	e8 00 00 00 00       	callq  3a26 <_ZN6Parser13parseFragmentE7QStringiRK4QMapIS0_iEi+0x518>
    3a26:	48 81 c4 18 01 00 00 	add    $0x118,%rsp
    3a2d:	5b                   	pop    %rbx
    3a2e:	5d                   	pop    %rbp
    3a2f:	c3                   	retq   

0000000000003a30 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi>:

QByteArray Parser::parseLine(const QString &text, const QMap<QString, int> &sems, int line)
{
    3a30:	55                   	push   %rbp
    3a31:	48 89 e5             	mov    %rsp,%rbp
    3a34:	53                   	push   %rbx
    3a35:	48 81 ec c8 00 00 00 	sub    $0xc8,%rsp
    3a3c:	48 89 bd 58 ff ff ff 	mov    %rdi,-0xa8(%rbp)
    3a43:	48 89 b5 50 ff ff ff 	mov    %rsi,-0xb0(%rbp)
    3a4a:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
    3a51:	48 89 8d 40 ff ff ff 	mov    %rcx,-0xc0(%rbp)
    3a58:	44 89 85 3c ff ff ff 	mov    %r8d,-0xc4(%rbp)
    3a5f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    3a66:	00 00 
    3a68:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    3a6c:	31 c0                	xor    %eax,%eax
    //r("PARSE LINE " + text);

    int i = text.indexOf(' ');
    3a6e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    3a72:	be 20 00 00 00       	mov    $0x20,%esi
    3a77:	48 89 c7             	mov    %rax,%rdi
    3a7a:	e8 00 00 00 00       	callq  3a7f <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x4f>
    3a7f:	0f b7 75 e0          	movzwl -0x20(%rbp),%esi
    3a83:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    3a8a:	b9 01 00 00 00       	mov    $0x1,%ecx
    3a8f:	ba 00 00 00 00       	mov    $0x0,%edx
    3a94:	48 89 c7             	mov    %rax,%rdi
    3a97:	e8 00 00 00 00       	callq  3a9c <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x6c>
    3a9c:	89 85 68 ff ff ff    	mov    %eax,-0x98(%rbp)
    QString type = text.mid(0, i);
    3aa2:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3aa9:	8b 95 68 ff ff ff    	mov    -0x98(%rbp),%edx
    3aaf:	48 8b b5 48 ff ff ff 	mov    -0xb8(%rbp),%rsi
    3ab6:	89 d1                	mov    %edx,%ecx
    3ab8:	ba 00 00 00 00       	mov    $0x0,%edx
    3abd:	48 89 c7             	mov    %rax,%rdi
    3ac0:	e8 00 00 00 00       	callq  3ac5 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x95>
    int lastPosition = 0;
    3ac5:	c7 85 6c ff ff ff 00 	movl   $0x0,-0x94(%rbp)
    3acc:	00 00 00 

    i = text.indexOf('(', lastPosition);
    3acf:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    3ad3:	be 28 00 00 00       	mov    $0x28,%esi
    3ad8:	48 89 c7             	mov    %rax,%rdi
    3adb:	e8 00 00 00 00       	callq  3ae0 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0xb0>
    3ae0:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
    3ae6:	0f b7 75 e0          	movzwl -0x20(%rbp),%esi
    3aea:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    3af1:	b9 01 00 00 00       	mov    $0x1,%ecx
    3af6:	48 89 c7             	mov    %rax,%rdi
    3af9:	e8 00 00 00 00       	callq  3afe <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0xce>
    3afe:	89 85 68 ff ff ff    	mov    %eax,-0x98(%rbp)
    QString value = text.mid(lastPosition, i - lastPosition).trimmed();
    3b04:	8b 85 68 ff ff ff    	mov    -0x98(%rbp),%eax
    3b0a:	2b 85 6c ff ff ff    	sub    -0x94(%rbp),%eax
    3b10:	89 c1                	mov    %eax,%ecx
    3b12:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3b16:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
    3b1c:	48 8b b5 48 ff ff ff 	mov    -0xb8(%rbp),%rsi
    3b23:	48 89 c7             	mov    %rax,%rdi
    3b26:	e8 00 00 00 00       	callq  3b2b <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0xfb>
    3b2b:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3b2f:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    3b33:	48 89 d6             	mov    %rdx,%rsi
    3b36:	48 89 c7             	mov    %rax,%rdi
    3b39:	e8 00 00 00 00       	callq  3b3e <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x10e>
    3b3e:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3b42:	48 89 c7             	mov    %rax,%rdi
    3b45:	e8 00 00 00 00       	callq  3b4a <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x11a>
    lastPosition = i;
    3b4a:	8b 85 68 ff ff ff    	mov    -0x98(%rbp),%eax
    3b50:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
    i = text.indexOf(')', lastPosition);
    3b56:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    3b5a:	be 29 00 00 00       	mov    $0x29,%esi
    3b5f:	48 89 c7             	mov    %rax,%rdi
    3b62:	e8 00 00 00 00       	callq  3b67 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x137>
    3b67:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
    3b6d:	0f b7 75 e0          	movzwl -0x20(%rbp),%esi
    3b71:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    3b78:	b9 01 00 00 00       	mov    $0x1,%ecx
    3b7d:	48 89 c7             	mov    %rax,%rdi
    3b80:	e8 00 00 00 00       	callq  3b85 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x155>
    3b85:	89 85 68 ff ff ff    	mov    %eax,-0x98(%rbp)

    //Текст между скобками
    QString betweenBrackets =  text.mid(lastPosition+1, i - lastPosition - 1);
    3b8b:	8b 85 68 ff ff ff    	mov    -0x98(%rbp),%eax
    3b91:	2b 85 6c ff ff ff    	sub    -0x94(%rbp),%eax
    3b97:	8d 48 ff             	lea    -0x1(%rax),%ecx
    3b9a:	8b 85 6c ff ff ff    	mov    -0x94(%rbp),%eax
    3ba0:	8d 50 01             	lea    0x1(%rax),%edx
    3ba3:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    3ba7:	48 8b b5 48 ff ff ff 	mov    -0xb8(%rbp),%rsi
    3bae:	48 89 c7             	mov    %rax,%rdi
    3bb1:	e8 00 00 00 00       	callq  3bb6 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x186>
    //Массив чисел
    QStringList numbers = betweenBrackets.split(",", QString::SkipEmptyParts);
    3bb6:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3bba:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3bc1 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x191>
    3bc1:	48 89 c7             	mov    %rax,%rdi
    3bc4:	e8 00 00 00 00       	callq  3bc9 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x199>
    3bc9:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3bcd:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    3bd1:	48 8d 75 a0          	lea    -0x60(%rbp),%rsi
    3bd5:	41 b8 01 00 00 00    	mov    $0x1,%r8d
    3bdb:	b9 01 00 00 00       	mov    $0x1,%ecx
    3be0:	48 89 c7             	mov    %rax,%rdi
    3be3:	e8 00 00 00 00       	callq  3be8 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x1b8>
    3be8:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3bec:	48 89 c7             	mov    %rax,%rdi
    3bef:	e8 00 00 00 00       	callq  3bf4 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x1c4>

    QByteArray result = processScript(value, numbers, sems, line);
    3bf4:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    3bf8:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    3bfc:	48 89 d6             	mov    %rdx,%rsi
    3bff:	48 89 c7             	mov    %rax,%rdi
    3c02:	e8 00 00 00 00       	callq  3c07 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x1d7>
    3c07:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    3c0b:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3c0f:	48 89 d6             	mov    %rdx,%rsi
    3c12:	48 89 c7             	mov    %rax,%rdi
    3c15:	e8 00 00 00 00       	callq  3c1a <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x1ea>
    3c1a:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    3c21:	44 8b 85 3c ff ff ff 	mov    -0xc4(%rbp),%r8d
    3c28:	48 8b bd 40 ff ff ff 	mov    -0xc0(%rbp),%rdi
    3c2f:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
    3c33:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    3c37:	48 8b b5 50 ff ff ff 	mov    -0xb0(%rbp),%rsi
    3c3e:	45 89 c1             	mov    %r8d,%r9d
    3c41:	49 89 f8             	mov    %rdi,%r8
    3c44:	48 89 c7             	mov    %rax,%rdi
    3c47:	e8 00 00 00 00       	callq  3c4c <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x21c>
    3c4c:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3c50:	48 89 c7             	mov    %rax,%rdi
    3c53:	e8 00 00 00 00       	callq  3c58 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x228>
    3c58:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    3c5c:	48 89 c7             	mov    %rax,%rdi
    3c5f:	e8 00 00 00 00       	callq  3c64 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x234>

    return result;
    3c64:	90                   	nop
    i = text.indexOf(')', lastPosition);

    //Текст между скобками
    QString betweenBrackets =  text.mid(lastPosition+1, i - lastPosition - 1);
    //Массив чисел
    QStringList numbers = betweenBrackets.split(",", QString::SkipEmptyParts);
    3c65:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3c69:	48 89 c7             	mov    %rax,%rdi
    3c6c:	e8 00 00 00 00       	callq  3c71 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x241>
    QString value = text.mid(lastPosition, i - lastPosition).trimmed();
    lastPosition = i;
    i = text.indexOf(')', lastPosition);

    //Текст между скобками
    QString betweenBrackets =  text.mid(lastPosition+1, i - lastPosition - 1);
    3c71:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    3c75:	48 89 c7             	mov    %rax,%rdi
    3c78:	e8 00 00 00 00       	callq  3c7d <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x24d>
    int i = text.indexOf(' ');
    QString type = text.mid(0, i);
    int lastPosition = 0;

    i = text.indexOf('(', lastPosition);
    QString value = text.mid(lastPosition, i - lastPosition).trimmed();
    3c7d:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3c81:	48 89 c7             	mov    %rax,%rdi
    3c84:	e8 00 00 00 00       	callq  3c89 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x259>
QByteArray Parser::parseLine(const QString &text, const QMap<QString, int> &sems, int line)
{
    //r("PARSE LINE " + text);

    int i = text.indexOf(' ');
    QString type = text.mid(0, i);
    3c89:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3c90:	48 89 c7             	mov    %rax,%rdi
    3c93:	e8 00 00 00 00       	callq  3c98 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x268>
    //Массив чисел
    QStringList numbers = betweenBrackets.split(",", QString::SkipEmptyParts);

    QByteArray result = processScript(value, numbers, sems, line);

    return result;
    3c98:	90                   	nop
}
    3c99:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    3ca0:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    3ca4:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    3cab:	00 00 
    3cad:	0f 84 ee 00 00 00    	je     3da1 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x371>
    3cb3:	e9 e4 00 00 00       	jmpq   3d9c <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x36c>
    3cb8:	48 89 c3             	mov    %rax,%rbx
    3cbb:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3cbf:	48 89 c7             	mov    %rax,%rdi
    3cc2:	e8 00 00 00 00       	callq  3cc7 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x297>
    3cc7:	e9 b6 00 00 00       	jmpq   3d82 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x352>
    3ccc:	48 89 c3             	mov    %rax,%rbx
    3ccf:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3cd3:	48 89 c7             	mov    %rax,%rdi
    3cd6:	e8 00 00 00 00       	callq  3cdb <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x2ab>
    3cdb:	e9 a2 00 00 00       	jmpq   3d82 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x352>
    3ce0:	48 89 c3             	mov    %rax,%rbx
    3ce3:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    3ce7:	48 89 c7             	mov    %rax,%rdi
    3cea:	e8 00 00 00 00       	callq  3cef <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x2bf>
    3cef:	eb 6f                	jmp    3d60 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x330>
    3cf1:	48 89 c3             	mov    %rax,%rbx
    3cf4:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3cf8:	48 89 c7             	mov    %rax,%rdi
    3cfb:	e8 00 00 00 00       	callq  3d00 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x2d0>
    3d00:	eb 5e                	jmp    3d60 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x330>
    3d02:	48 89 c3             	mov    %rax,%rbx
    3d05:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    3d09:	48 89 c7             	mov    %rax,%rdi
    3d0c:	e8 00 00 00 00       	callq  3d11 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x2e1>
    3d11:	eb 17                	jmp    3d2a <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x2fa>
    3d13:	48 89 c3             	mov    %rax,%rbx
    3d16:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    3d1d:	48 89 c7             	mov    %rax,%rdi
    3d20:	e8 00 00 00 00       	callq  3d25 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x2f5>
    3d25:	eb 03                	jmp    3d2a <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x2fa>
    3d27:	48 89 c3             	mov    %rax,%rbx
    3d2a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    3d2e:	48 89 c7             	mov    %rax,%rdi
    3d31:	e8 00 00 00 00       	callq  3d36 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x306>
    3d36:	eb 17                	jmp    3d4f <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x31f>
    3d38:	48 89 c3             	mov    %rax,%rbx
    3d3b:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
    3d42:	48 89 c7             	mov    %rax,%rdi
    3d45:	e8 00 00 00 00       	callq  3d4a <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x31a>
    3d4a:	eb 03                	jmp    3d4f <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x31f>
    3d4c:	48 89 c3             	mov    %rax,%rbx
    i = text.indexOf(')', lastPosition);

    //Текст между скобками
    QString betweenBrackets =  text.mid(lastPosition+1, i - lastPosition - 1);
    //Массив чисел
    QStringList numbers = betweenBrackets.split(",", QString::SkipEmptyParts);
    3d4f:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3d53:	48 89 c7             	mov    %rax,%rdi
    3d56:	e8 00 00 00 00       	callq  3d5b <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x32b>
    3d5b:	eb 03                	jmp    3d60 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x330>
    3d5d:	48 89 c3             	mov    %rax,%rbx
    QString value = text.mid(lastPosition, i - lastPosition).trimmed();
    lastPosition = i;
    i = text.indexOf(')', lastPosition);

    //Текст между скобками
    QString betweenBrackets =  text.mid(lastPosition+1, i - lastPosition - 1);
    3d60:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    3d64:	48 89 c7             	mov    %rax,%rdi
    3d67:	e8 00 00 00 00       	callq  3d6c <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x33c>
    3d6c:	eb 03                	jmp    3d71 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x341>
    3d6e:	48 89 c3             	mov    %rax,%rbx
    int i = text.indexOf(' ');
    QString type = text.mid(0, i);
    int lastPosition = 0;

    i = text.indexOf('(', lastPosition);
    QString value = text.mid(lastPosition, i - lastPosition).trimmed();
    3d71:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3d75:	48 89 c7             	mov    %rax,%rdi
    3d78:	e8 00 00 00 00       	callq  3d7d <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x34d>
    3d7d:	eb 03                	jmp    3d82 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x352>
    3d7f:	48 89 c3             	mov    %rax,%rbx
QByteArray Parser::parseLine(const QString &text, const QMap<QString, int> &sems, int line)
{
    //r("PARSE LINE " + text);

    int i = text.indexOf(' ');
    QString type = text.mid(0, i);
    3d82:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3d89:	48 89 c7             	mov    %rax,%rdi
    3d8c:	e8 00 00 00 00       	callq  3d91 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x361>
    3d91:	48 89 d8             	mov    %rbx,%rax
    3d94:	48 89 c7             	mov    %rax,%rdi
    3d97:	e8 00 00 00 00       	callq  3d9c <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x36c>
    QStringList numbers = betweenBrackets.split(",", QString::SkipEmptyParts);

    QByteArray result = processScript(value, numbers, sems, line);

    return result;
}
    3d9c:	e8 00 00 00 00       	callq  3da1 <_ZN6Parser9parseLineERK7QStringRK4QMapIS0_iEi+0x371>
    3da1:	48 81 c4 c8 00 00 00 	add    $0xc8,%rsp
    3da8:	5b                   	pop    %rbx
    3da9:	5d                   	pop    %rbp
    3daa:	c3                   	retq   
    3dab:	90                   	nop

0000000000003dac <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi>:

QByteArray Parser::processScript(QString value, QStringList numbers, const QMap<QString, int> &sems, int line)
{
    3dac:	55                   	push   %rbp
    3dad:	48 89 e5             	mov    %rsp,%rbp
    3db0:	53                   	push   %rbx
    3db1:	48 81 ec e8 00 00 00 	sub    $0xe8,%rsp
    3db8:	48 89 bd 38 ff ff ff 	mov    %rdi,-0xc8(%rbp)
    3dbf:	48 89 b5 30 ff ff ff 	mov    %rsi,-0xd0(%rbp)
    3dc6:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
    3dcd:	48 89 8d 20 ff ff ff 	mov    %rcx,-0xe0(%rbp)
    3dd4:	4c 89 85 18 ff ff ff 	mov    %r8,-0xe8(%rbp)
    3ddb:	44 89 8d 14 ff ff ff 	mov    %r9d,-0xec(%rbp)
    3de2:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    3de9:	00 00 
    3deb:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    3def:	31 c0                	xor    %eax,%eax
    //  line - номер линии
    //  value - команда
    //  numbers - параметры (если есть)
    //  sems - всегда одинаковый набор, можно было бы запихнуть это в глобальную область, если не лень.

    QByteArray result;
    3df1:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    3df8:	48 89 c7             	mov    %rax,%rdi
    3dfb:	e8 00 00 00 00       	callq  3e00 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x54>
    QString SLine = QString::number(line);
    3e00:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    3e07:	8b 8d 14 ff ff ff    	mov    -0xec(%rbp),%ecx
    3e0d:	ba 0a 00 00 00       	mov    $0xa,%edx
    3e12:	89 ce                	mov    %ecx,%esi
    3e14:	48 89 c7             	mov    %rax,%rdi
    3e17:	e8 00 00 00 00       	callq  3e1c <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x70>

    value = value.toLower();
    3e1c:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    3e23:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
    3e2a:	48 89 d6             	mov    %rdx,%rsi
    3e2d:	48 89 c7             	mov    %rax,%rdi
    3e30:	e8 00 00 00 00       	callq  3e35 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x89>
    3e35:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
    3e3c:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    3e43:	48 89 d6             	mov    %rdx,%rsi
    3e46:	48 89 c7             	mov    %rax,%rdi
    3e49:	e8 00 00 00 00       	callq  3e4e <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0xa2>
    3e4e:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    3e55:	48 89 c7             	mov    %rax,%rdi
    3e58:	e8 00 00 00 00       	callq  3e5d <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0xb1>
    //Ищем, есть ли нужный семафор из xml файла
    if (!sems.contains(value)) // нет такого ключевого слова
    3e5d:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
    3e64:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    3e6b:	48 89 d6             	mov    %rdx,%rsi
    3e6e:	48 89 c7             	mov    %rax,%rdi
    3e71:	e8 00 00 00 00       	callq  3e76 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0xca>
    3e76:	83 f0 01             	xor    $0x1,%eax
    3e79:	84 c0                	test   %al,%al
    3e7b:	0f 84 b5 00 00 00    	je     3f36 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x18a>
    {
        int VL = value.length();
    3e81:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
    3e88:	48 89 c7             	mov    %rax,%rdi
    3e8b:	e8 00 00 00 00       	callq  3e90 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0xe4>
    3e90:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%rbp)
        //int test_options = value.indexOf("options", Qt::CaseInsensitive);


        if(VL > 0) // если ключевое слово длинее нуля символов
    3e96:	83 bd 48 ff ff ff 00 	cmpl   $0x0,-0xb8(%rbp)
    3e9d:	0f 8e c0 00 00 00    	jle    3f63 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x1b7>
        {
            pe("Err.3 Wrong keyword. " + value + " at line " + SLine); // // + " has not sem. length = " + QString::number(VL));
    3ea3:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3eaa:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
    3eb1:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3eb8 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x10c>
    3eb8:	48 89 c7             	mov    %rax,%rdi
    3ebb:	e8 00 00 00 00       	callq  3ec0 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x114>
    3ec0:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3ec4:	48 8d 8d 70 ff ff ff 	lea    -0x90(%rbp),%rcx
    3ecb:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 3ed2 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x126>
    3ed2:	48 89 ce             	mov    %rcx,%rsi
    3ed5:	48 89 c7             	mov    %rax,%rdi
    3ed8:	e8 00 00 00 00       	callq  3edd <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x131>
    3edd:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3ee1:	48 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%rdx
    3ee8:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
    3eec:	48 89 ce             	mov    %rcx,%rsi
    3eef:	48 89 c7             	mov    %rax,%rdi
    3ef2:	e8 00 00 00 00       	callq  3ef7 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x14b>
    3ef7:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    3efb:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    3f02:	48 89 d6             	mov    %rdx,%rsi
    3f05:	48 89 c7             	mov    %rax,%rdi
    3f08:	e8 00 00 00 00       	callq  3f0d <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x161>
    3f0d:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    3f11:	48 89 c7             	mov    %rax,%rdi
    3f14:	e8 00 00 00 00       	callq  3f19 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x16d>
    3f19:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    3f1d:	48 89 c7             	mov    %rax,%rdi
    3f20:	e8 00 00 00 00       	callq  3f25 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x179>
    3f25:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3f2c:	48 89 c7             	mov    %rax,%rdi
    3f2f:	e8 00 00 00 00       	callq  3f34 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x188>
    3f34:	eb 2d                	jmp    3f63 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x1b7>
        }
    }
    else
    {
        result.append(sems[value]);
    3f36:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
    3f3d:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    3f44:	48 89 d6             	mov    %rdx,%rsi
    3f47:	48 89 c7             	mov    %rax,%rdi
    3f4a:	e8 00 00 00 00       	callq  3f4f <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x1a3>
    3f4f:	0f be d0             	movsbl %al,%edx
    3f52:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    3f59:	89 d6                	mov    %edx,%esi
    3f5b:	48 89 c7             	mov    %rax,%rdi
    3f5e:	e8 00 00 00 00       	callq  3f63 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x1b7>
    }

    //обработка символа *
      for (int i = 0; i < numbers.size(); i++) {
    3f63:	c7 85 44 ff ff ff 00 	movl   $0x0,-0xbc(%rbp)
    3f6a:	00 00 00 
    3f6d:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    3f74:	48 89 c7             	mov    %rax,%rdi
    3f77:	e8 00 00 00 00       	callq  3f7c <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x1d0>
    3f7c:	3b 85 44 ff ff ff    	cmp    -0xbc(%rbp),%eax
    3f82:	0f 9f c0             	setg   %al
    3f85:	84 c0                	test   %al,%al
    3f87:	0f 84 e2 02 00 00    	je     426f <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x4c3>
        QString number = numbers[i].trimmed();
    3f8d:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
    3f94:	8b 95 44 ff ff ff    	mov    -0xbc(%rbp),%edx
    3f9a:	89 d6                	mov    %edx,%esi
    3f9c:	48 89 c7             	mov    %rax,%rdi
    3f9f:	e8 00 00 00 00       	callq  3fa4 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x1f8>
    3fa4:	48 89 c2             	mov    %rax,%rdx
    3fa7:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3fae:	48 89 d6             	mov    %rdx,%rsi
    3fb1:	48 89 c7             	mov    %rax,%rdi
    3fb4:	e8 00 00 00 00       	callq  3fb9 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x20d>
            if (number == "*")
    3fb9:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    3fc0:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3fc7 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x21b>
    3fc7:	48 89 c7             	mov    %rax,%rdi
    3fca:	e8 00 00 00 00       	callq  3fcf <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x223>
    3fcf:	84 c0                	test   %al,%al
    3fd1:	74 19                	je     3fec <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x240>
                result += (char)0x19;
    3fd3:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    3fda:	be 19 00 00 00       	mov    $0x19,%esi
    3fdf:	48 89 c7             	mov    %rax,%rdi
    3fe2:	e8 00 00 00 00       	callq  3fe7 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x23b>
    3fe7:	e9 68 02 00 00       	jmpq   4254 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x4a8>
            else {
                bool ok = false;
    3fec:	c6 85 60 ff ff ff 00 	movb   $0x0,-0xa0(%rbp)
                int e = number.indexOf("=");
    3ff3:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    3ff7:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3ffe <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x252>
    3ffe:	48 89 c7             	mov    %rax,%rdi
    4001:	e8 00 00 00 00       	callq  4006 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x25a>
    4006:	48 8d 75 b0          	lea    -0x50(%rbp),%rsi
    400a:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    4011:	b9 01 00 00 00       	mov    $0x1,%ecx
    4016:	ba 00 00 00 00       	mov    $0x0,%edx
    401b:	48 89 c7             	mov    %rax,%rdi
    401e:	e8 00 00 00 00       	callq  4023 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x277>
    4023:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
    4029:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    402d:	48 89 c7             	mov    %rax,%rdi
    4030:	e8 00 00 00 00       	callq  4035 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x289>
                QString leftPart  = number.left(e).trimmed();
    4035:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    4039:	8b 95 4c ff ff ff    	mov    -0xb4(%rbp),%edx
    403f:	48 8d 8d 70 ff ff ff 	lea    -0x90(%rbp),%rcx
    4046:	48 89 ce             	mov    %rcx,%rsi
    4049:	48 89 c7             	mov    %rax,%rdi
    404c:	e8 00 00 00 00       	callq  4051 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x2a5>
    4051:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    4055:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    4059:	48 89 d6             	mov    %rdx,%rsi
    405c:	48 89 c7             	mov    %rax,%rdi
    405f:	e8 00 00 00 00       	callq  4064 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x2b8>
    4064:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    4068:	48 89 c7             	mov    %rax,%rdi
    406b:	e8 00 00 00 00       	callq  4070 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x2c4>
                QString rightPart = number.right(number.size()-e-1).trimmed();
    4070:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    4077:	48 89 c7             	mov    %rax,%rdi
    407a:	e8 00 00 00 00       	callq  407f <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x2d3>
    407f:	2b 85 4c ff ff ff    	sub    -0xb4(%rbp),%eax
    4085:	8d 50 ff             	lea    -0x1(%rax),%edx
    4088:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    408c:	48 8d 8d 70 ff ff ff 	lea    -0x90(%rbp),%rcx
    4093:	48 89 ce             	mov    %rcx,%rsi
    4096:	48 89 c7             	mov    %rax,%rdi
    4099:	e8 00 00 00 00       	callq  409e <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x2f2>
    409e:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    40a2:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    40a6:	48 89 d6             	mov    %rdx,%rsi
    40a9:	48 89 c7             	mov    %rax,%rdi
    40ac:	e8 00 00 00 00       	callq  40b1 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x305>
    40b1:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    40b5:	48 89 c7             	mov    %rax,%rdi
    40b8:	e8 00 00 00 00       	callq  40bd <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x311>

                QString leftPartSem = "";
    40bd:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    40c1:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 40c8 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x31c>
    40c8:	48 89 c7             	mov    %rax,%rdi
    40cb:	e8 00 00 00 00       	callq  40d0 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x324>
                QString rightPartSem= "";
    40d0:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    40d4:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 40db <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x32f>
    40db:	48 89 c7             	mov    %rax,%rdi
    40de:	e8 00 00 00 00       	callq  40e3 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x337>

                if (!sems.contains(leftPart)){
    40e3:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    40e7:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    40ee:	48 89 d6             	mov    %rdx,%rsi
    40f1:	48 89 c7             	mov    %rax,%rdi
    40f4:	e8 00 00 00 00       	callq  40f9 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x34d>
    40f9:	83 f0 01             	xor    $0x1,%eax
    40fc:	84 c0                	test   %al,%al
    40fe:	74 38                	je     4138 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x38c>

                    leftPartSem += "QDEBUG: erro sedm " + leftPart;
    4100:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    4104:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    4108:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 410f <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x363>
    410f:	48 89 c7             	mov    %rax,%rdi
    4112:	e8 00 00 00 00       	callq  4117 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x36b>
    4117:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    411b:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    411f:	48 89 d6             	mov    %rdx,%rsi
    4122:	48 89 c7             	mov    %rax,%rdi
    4125:	e8 00 00 00 00       	callq  412a <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x37e>
    412a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    412e:	48 89 c7             	mov    %rax,%rdi
    4131:	e8 00 00 00 00       	callq  4136 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x38a>
    4136:	eb 74                	jmp    41ac <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x400>
                }
                else{
                    result.append(sems[leftPart]);
    4138:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    413c:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    4143:	48 89 d6             	mov    %rdx,%rsi
    4146:	48 89 c7             	mov    %rax,%rdi
    4149:	e8 00 00 00 00       	callq  414e <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x3a2>
    414e:	0f be d0             	movsbl %al,%edx
    4151:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    4158:	89 d6                	mov    %edx,%esi
    415a:	48 89 c7             	mov    %rax,%rdi
    415d:	e8 00 00 00 00       	callq  4162 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x3b6>
                    leftPartSem += QString::number(sems[leftPart]);
    4162:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    4166:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    416d:	48 89 d6             	mov    %rdx,%rsi
    4170:	48 89 c7             	mov    %rax,%rdi
    4173:	e8 00 00 00 00       	callq  4178 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x3cc>
    4178:	89 c1                	mov    %eax,%ecx
    417a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    417e:	ba 0a 00 00 00       	mov    $0xa,%edx
    4183:	89 ce                	mov    %ecx,%esi
    4185:	48 89 c7             	mov    %rax,%rdi
    4188:	e8 00 00 00 00       	callq  418d <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x3e1>
    418d:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    4191:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    4195:	48 89 d6             	mov    %rdx,%rsi
    4198:	48 89 c7             	mov    %rax,%rdi
    419b:	e8 00 00 00 00       	callq  41a0 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x3f4>
    41a0:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    41a4:	48 89 c7             	mov    %rax,%rdi
    41a7:	e8 00 00 00 00       	callq  41ac <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x400>
                }

                if (!sems.contains(rightPart)){
    41ac:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    41b0:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    41b7:	48 89 d6             	mov    %rdx,%rsi
    41ba:	48 89 c7             	mov    %rax,%rdi
    41bd:	e8 00 00 00 00       	callq  41c2 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x416>
    41c2:	83 f0 01             	xor    $0x1,%eax
    41c5:	84 c0                	test   %al,%al
    41c7:	74 31                	je     41fa <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x44e>
                    // преобразование правой части параметра в число
                    result += (char)rightPart.toUInt(&ok);
    41c9:	48 8d 8d 60 ff ff ff 	lea    -0xa0(%rbp),%rcx
    41d0:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    41d4:	ba 0a 00 00 00       	mov    $0xa,%edx
    41d9:	48 89 ce             	mov    %rcx,%rsi
    41dc:	48 89 c7             	mov    %rax,%rdi
    41df:	e8 00 00 00 00       	callq  41e4 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x438>
    41e4:	0f be d0             	movsbl %al,%edx
    41e7:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    41ee:	89 d6                	mov    %edx,%esi
    41f0:	48 89 c7             	mov    %rax,%rdi
    41f3:	e8 00 00 00 00       	callq  41f8 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x44c>
    41f8:	eb 2a                	jmp    4224 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x478>
                    //rightPartSem += (int)rightPart.toUInt(&ok);
                }
                else{
                    result.append(sems[rightPart]);
    41fa:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    41fe:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
    4205:	48 89 d6             	mov    %rdx,%rsi
    4208:	48 89 c7             	mov    %rax,%rdi
    420b:	e8 00 00 00 00       	callq  4210 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x464>
    4210:	0f be d0             	movsbl %al,%edx
    4213:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    421a:	89 d6                	mov    %edx,%esi
    421c:	48 89 c7             	mov    %rax,%rdi
    421f:	e8 00 00 00 00       	callq  4224 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x478>
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
                QString rightPart = number.right(number.size()-e-1).trimmed();

                QString leftPartSem = "";
                QString rightPartSem= "";
    4224:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    4228:	48 89 c7             	mov    %rax,%rdi
    422b:	e8 00 00 00 00       	callq  4230 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x484>
                bool ok = false;
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
                QString rightPart = number.right(number.size()-e-1).trimmed();

                QString leftPartSem = "";
    4230:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    4234:	48 89 c7             	mov    %rax,%rdi
    4237:	e8 00 00 00 00       	callq  423c <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x490>
                result += (char)0x19;
            else {
                bool ok = false;
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
                QString rightPart = number.right(number.size()-e-1).trimmed();
    423c:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    4240:	48 89 c7             	mov    %rax,%rdi
    4243:	e8 00 00 00 00       	callq  4248 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x49c>
            if (number == "*")
                result += (char)0x19;
            else {
                bool ok = false;
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
    4248:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    424c:	48 89 c7             	mov    %rax,%rdi
    424f:	e8 00 00 00 00       	callq  4254 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x4a8>
        result.append(sems[value]);
    }

    //обработка символа *
      for (int i = 0; i < numbers.size(); i++) {
        QString number = numbers[i].trimmed();
    4254:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    425b:	48 89 c7             	mov    %rax,%rdi
    425e:	e8 00 00 00 00       	callq  4263 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x4b7>
    {
        result.append(sems[value]);
    }

    //обработка символа *
      for (int i = 0; i < numbers.size(); i++) {
    4263:	83 85 44 ff ff ff 01 	addl   $0x1,-0xbc(%rbp)
    426a:	e9 fe fc ff ff       	jmpq   3f6d <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x1c1>
                    //rightPartSem += QString::number(sems[rightPart]);
                }
            }
    }

    return result;
    426f:	90                   	nop
    //  value - команда
    //  numbers - параметры (если есть)
    //  sems - всегда одинаковый набор, можно было бы запихнуть это в глобальную область, если не лень.

    QByteArray result;
    QString SLine = QString::number(line);
    4270:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    4277:	48 89 c7             	mov    %rax,%rdi
    427a:	e8 00 00 00 00       	callq  427f <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x4d3>
                    //rightPartSem += QString::number(sems[rightPart]);
                }
            }
    }

    return result;
    427f:	e9 59 01 00 00       	jmpq   43dd <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x631>
    4284:	48 89 c3             	mov    %rax,%rbx
    //  sems - всегда одинаковый набор, можно было бы запихнуть это в глобальную область, если не лень.

    QByteArray result;
    QString SLine = QString::number(line);

    value = value.toLower();
    4287:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    428e:	48 89 c7             	mov    %rax,%rdi
    4291:	e8 00 00 00 00       	callq  4296 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x4ea>
    4296:	e9 14 01 00 00       	jmpq   43af <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x603>
    429b:	48 89 c3             	mov    %rax,%rbx
        //int test_options = value.indexOf("options", Qt::CaseInsensitive);


        if(VL > 0) // если ключевое слово длинее нуля символов
        {
            pe("Err.3 Wrong keyword. " + value + " at line " + SLine); // // + " has not sem. length = " + QString::number(VL));
    429e:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    42a2:	48 89 c7             	mov    %rax,%rdi
    42a5:	e8 00 00 00 00       	callq  42aa <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x4fe>
    42aa:	eb 03                	jmp    42af <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x503>
    42ac:	48 89 c3             	mov    %rax,%rbx
    42af:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    42b3:	48 89 c7             	mov    %rax,%rdi
    42b6:	e8 00 00 00 00       	callq  42bb <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x50f>
    42bb:	eb 03                	jmp    42c0 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x514>
    42bd:	48 89 c3             	mov    %rax,%rbx
    42c0:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    42c7:	48 89 c7             	mov    %rax,%rdi
    42ca:	e8 00 00 00 00       	callq  42cf <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x523>
    42cf:	e9 db 00 00 00       	jmpq   43af <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x603>
    42d4:	48 89 c3             	mov    %rax,%rbx
        QString number = numbers[i].trimmed();
            if (number == "*")
                result += (char)0x19;
            else {
                bool ok = false;
                int e = number.indexOf("=");
    42d7:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    42db:	48 89 c7             	mov    %rax,%rdi
    42de:	e8 00 00 00 00       	callq  42e3 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x537>
    42e3:	e9 b3 00 00 00       	jmpq   439b <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5ef>
    42e8:	48 89 c3             	mov    %rax,%rbx
    42eb:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    42ef:	48 89 c7             	mov    %rax,%rdi
    42f2:	e8 00 00 00 00       	callq  42f7 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x54b>
    42f7:	e9 9f 00 00 00       	jmpq   439b <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5ef>
    42fc:	48 89 c3             	mov    %rax,%rbx
    42ff:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    4303:	48 89 c7             	mov    %rax,%rdi
    4306:	e8 00 00 00 00       	callq  430b <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x55f>
    430b:	e9 8b 00 00 00       	jmpq   439b <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5ef>
    4310:	48 89 c3             	mov    %rax,%rbx
    4313:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4317:	48 89 c7             	mov    %rax,%rdi
    431a:	e8 00 00 00 00       	callq  431f <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x573>
    431f:	eb 69                	jmp    438a <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5de>
    4321:	48 89 c3             	mov    %rax,%rbx
    4324:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    4328:	48 89 c7             	mov    %rax,%rdi
    432b:	e8 00 00 00 00       	callq  4330 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x584>
    4330:	eb 58                	jmp    438a <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5de>
    4332:	48 89 c3             	mov    %rax,%rbx
                QString leftPartSem = "";
                QString rightPartSem= "";

                if (!sems.contains(leftPart)){

                    leftPartSem += "QDEBUG: erro sedm " + leftPart;
    4335:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    4339:	48 89 c7             	mov    %rax,%rdi
    433c:	e8 00 00 00 00       	callq  4341 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x595>
    4341:	eb 14                	jmp    4357 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5ab>
    4343:	48 89 c3             	mov    %rax,%rbx
                }
                else{
                    result.append(sems[leftPart]);
                    leftPartSem += QString::number(sems[leftPart]);
    4346:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    434a:	48 89 c7             	mov    %rax,%rdi
    434d:	e8 00 00 00 00       	callq  4352 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5a6>
    4352:	eb 03                	jmp    4357 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5ab>
    4354:	48 89 c3             	mov    %rax,%rbx
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
                QString rightPart = number.right(number.size()-e-1).trimmed();

                QString leftPartSem = "";
                QString rightPartSem= "";
    4357:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    435b:	48 89 c7             	mov    %rax,%rdi
    435e:	e8 00 00 00 00       	callq  4363 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5b7>
    4363:	eb 03                	jmp    4368 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5bc>
    4365:	48 89 c3             	mov    %rax,%rbx
                bool ok = false;
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
                QString rightPart = number.right(number.size()-e-1).trimmed();

                QString leftPartSem = "";
    4368:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    436c:	48 89 c7             	mov    %rax,%rdi
    436f:	e8 00 00 00 00       	callq  4374 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5c8>
    4374:	eb 03                	jmp    4379 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5cd>
    4376:	48 89 c3             	mov    %rax,%rbx
                result += (char)0x19;
            else {
                bool ok = false;
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
                QString rightPart = number.right(number.size()-e-1).trimmed();
    4379:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    437d:	48 89 c7             	mov    %rax,%rdi
    4380:	e8 00 00 00 00       	callq  4385 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5d9>
    4385:	eb 03                	jmp    438a <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5de>
    4387:	48 89 c3             	mov    %rax,%rbx
            if (number == "*")
                result += (char)0x19;
            else {
                bool ok = false;
                int e = number.indexOf("=");
                QString leftPart  = number.left(e).trimmed();
    438a:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    438e:	48 89 c7             	mov    %rax,%rdi
    4391:	e8 00 00 00 00       	callq  4396 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5ea>
    4396:	eb 03                	jmp    439b <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5ef>
    4398:	48 89 c3             	mov    %rax,%rbx
        result.append(sems[value]);
    }

    //обработка символа *
      for (int i = 0; i < numbers.size(); i++) {
        QString number = numbers[i].trimmed();
    439b:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    43a2:	48 89 c7             	mov    %rax,%rdi
    43a5:	e8 00 00 00 00       	callq  43aa <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x5fe>
    43aa:	eb 03                	jmp    43af <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x603>
    43ac:	48 89 c3             	mov    %rax,%rbx
    //  value - команда
    //  numbers - параметры (если есть)
    //  sems - всегда одинаковый набор, можно было бы запихнуть это в глобальную область, если не лень.

    QByteArray result;
    QString SLine = QString::number(line);
    43af:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    43b6:	48 89 c7             	mov    %rax,%rdi
    43b9:	e8 00 00 00 00       	callq  43be <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x612>
    43be:	eb 03                	jmp    43c3 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x617>
    43c0:	48 89 c3             	mov    %rax,%rbx
    43c3:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    43ca:	48 89 c7             	mov    %rax,%rdi
    43cd:	e8 00 00 00 00       	callq  43d2 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x626>
    43d2:	48 89 d8             	mov    %rbx,%rax
    43d5:	48 89 c7             	mov    %rax,%rdi
    43d8:	e8 00 00 00 00       	callq  43dd <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x631>
                }
            }
    }

    return result;
}
    43dd:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
    43e4:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    43e8:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    43ef:	00 00 
    43f1:	74 05                	je     43f8 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x64c>
    43f3:	e8 00 00 00 00       	callq  43f8 <_ZN6Parser13processScriptE7QString11QStringListRK4QMapIS0_iEi+0x64c>
    43f8:	48 81 c4 e8 00 00 00 	add    $0xe8,%rsp
    43ff:	5b                   	pop    %rbx
    4400:	5d                   	pop    %rbp
    4401:	c3                   	retq   

0000000000004402 <_ZN6Parser11compileAtomE7QString>:

QByteArray Parser::compileAtom(QString atom){
    4402:	55                   	push   %rbp
    4403:	48 89 e5             	mov    %rsp,%rbp
    4406:	53                   	push   %rbx
    4407:	48 81 ec c8 01 00 00 	sub    $0x1c8,%rsp
    440e:	48 89 bd 48 fe ff ff 	mov    %rdi,-0x1b8(%rbp)
    4415:	48 89 b5 40 fe ff ff 	mov    %rsi,-0x1c0(%rbp)
    441c:	48 89 95 38 fe ff ff 	mov    %rdx,-0x1c8(%rbp)
    4423:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    442a:	00 00 
    442c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    4430:	31 c0                	xor    %eax,%eax
    QByteArray result;
    4432:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
    4439:	48 89 c7             	mov    %rax,%rdi
    443c:	e8 00 00 00 00       	callq  4441 <_ZN6Parser11compileAtomE7QString+0x3f>

    //QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]");

    QRegExp QRE_FUNCTION("[\w]+");
    4441:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
    4448:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 444f <_ZN6Parser11compileAtomE7QString+0x4d>
    444f:	48 89 c7             	mov    %rax,%rdi
    4452:	e8 00 00 00 00       	callq  4457 <_ZN6Parser11compileAtomE7QString+0x55>
    4457:	48 8d b5 60 fe ff ff 	lea    -0x1a0(%rbp),%rsi
    445e:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    4465:	b9 00 00 00 00       	mov    $0x0,%ecx
    446a:	ba 01 00 00 00       	mov    $0x1,%edx
    446f:	48 89 c7             	mov    %rax,%rdi
    4472:	e8 00 00 00 00       	callq  4477 <_ZN6Parser11compileAtomE7QString+0x75>
    4477:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
    447e:	48 89 c7             	mov    %rax,%rdi
    4481:	e8 00 00 00 00       	callq  4486 <_ZN6Parser11compileAtomE7QString+0x84>
    QRegExp QRE_COMMA("\,");
    4486:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
    448d:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4494 <_ZN6Parser11compileAtomE7QString+0x92>
    4494:	48 89 c7             	mov    %rax,%rdi
    4497:	e8 00 00 00 00       	callq  449c <_ZN6Parser11compileAtomE7QString+0x9a>
    449c:	48 8d b5 80 fe ff ff 	lea    -0x180(%rbp),%rsi
    44a3:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    44aa:	b9 00 00 00 00       	mov    $0x0,%ecx
    44af:	ba 01 00 00 00       	mov    $0x1,%edx
    44b4:	48 89 c7             	mov    %rax,%rdi
    44b7:	e8 00 00 00 00       	callq  44bc <_ZN6Parser11compileAtomE7QString+0xba>
    44bc:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
    44c3:	48 89 c7             	mov    %rax,%rdi
    44c6:	e8 00 00 00 00       	callq  44cb <_ZN6Parser11compileAtomE7QString+0xc9>
    QRegExp QRE_TEXT("\"([\w\s\d]+)\"");
    44cb:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    44d2:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 44d9 <_ZN6Parser11compileAtomE7QString+0xd7>
    44d9:	48 89 c7             	mov    %rax,%rdi
    44dc:	e8 00 00 00 00       	callq  44e1 <_ZN6Parser11compileAtomE7QString+0xdf>
    44e1:	48 8d b5 a0 fe ff ff 	lea    -0x160(%rbp),%rsi
    44e8:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    44ef:	b9 00 00 00 00       	mov    $0x0,%ecx
    44f4:	ba 01 00 00 00       	mov    $0x1,%edx
    44f9:	48 89 c7             	mov    %rax,%rdi
    44fc:	e8 00 00 00 00       	callq  4501 <_ZN6Parser11compileAtomE7QString+0xff>
    4501:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    4508:	48 89 c7             	mov    %rax,%rdi
    450b:	e8 00 00 00 00       	callq  4510 <_ZN6Parser11compileAtomE7QString+0x10e>
     * 6. Запятая
     *
     * 7. Номер строки - Получим другим путем
     * */

    Sems SEMS;
    4510:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    4514:	48 89 c7             	mov    %rax,%rdi
    4517:	e8 00 00 00 00       	callq  451c <_ZN6Parser11compileAtomE7QString+0x11a>
    QString functions  = SEMS.allFunctions();
    451c:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    4523:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    4527:	48 89 d6             	mov    %rdx,%rsi
    452a:	48 89 c7             	mov    %rax,%rdi
    452d:	e8 00 00 00 00       	callq  4532 <_ZN6Parser11compileAtomE7QString+0x130>
    QString operations = SEMS.allOps();
    4532:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    4539:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    453d:	48 89 d6             	mov    %rdx,%rsi
    4540:	48 89 c7             	mov    %rax,%rdi
    4543:	e8 00 00 00 00       	callq  4548 <_ZN6Parser11compileAtomE7QString+0x146>

    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";
    4548:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    454f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4556 <_ZN6Parser11compileAtomE7QString+0x154>
    4556:	48 89 c7             	mov    %rax,%rdi
    4559:	e8 00 00 00 00       	callq  455e <_ZN6Parser11compileAtomE7QString+0x15c>

    QRegExp QR_function(functions);         // 1
    455e:	48 8d b5 b0 fe ff ff 	lea    -0x150(%rbp),%rsi
    4565:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    456c:	b9 00 00 00 00       	mov    $0x0,%ecx
    4571:	ba 01 00 00 00       	mov    $0x1,%edx
    4576:	48 89 c7             	mov    %rax,%rdi
    4579:	e8 00 00 00 00       	callq  457e <_ZN6Parser11compileAtomE7QString+0x17c>
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    457e:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    4585:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 458c <_ZN6Parser11compileAtomE7QString+0x18a>
    458c:	48 89 c7             	mov    %rax,%rdi
    458f:	e8 00 00 00 00       	callq  4594 <_ZN6Parser11compileAtomE7QString+0x192>
    4594:	48 8d b5 00 ff ff ff 	lea    -0x100(%rbp),%rsi
    459b:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    45a2:	b9 00 00 00 00       	mov    $0x0,%ecx
    45a7:	ba 01 00 00 00       	mov    $0x1,%edx
    45ac:	48 89 c7             	mov    %rax,%rdi
    45af:	e8 00 00 00 00       	callq  45b4 <_ZN6Parser11compileAtomE7QString+0x1b2>
    45b4:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    45bb:	48 89 c7             	mov    %rax,%rdi
    45be:	e8 00 00 00 00       	callq  45c3 <_ZN6Parser11compileAtomE7QString+0x1c1>
    QRegExp QR_continue("continue");        // 4
    45c3:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    45ca:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 45d1 <_ZN6Parser11compileAtomE7QString+0x1cf>
    45d1:	48 89 c7             	mov    %rax,%rdi
    45d4:	e8 00 00 00 00       	callq  45d9 <_ZN6Parser11compileAtomE7QString+0x1d7>
    45d9:	48 8d b5 20 ff ff ff 	lea    -0xe0(%rbp),%rsi
    45e0:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    45e7:	b9 00 00 00 00       	mov    $0x0,%ecx
    45ec:	ba 01 00 00 00       	mov    $0x1,%edx
    45f1:	48 89 c7             	mov    %rax,%rdi
    45f4:	e8 00 00 00 00       	callq  45f9 <_ZN6Parser11compileAtomE7QString+0x1f7>
    45f9:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    4600:	48 89 c7             	mov    %rax,%rdi
    4603:	e8 00 00 00 00       	callq  4608 <_ZN6Parser11compileAtomE7QString+0x206>
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    4608:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    460f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4616 <_ZN6Parser11compileAtomE7QString+0x214>
    4616:	48 89 c7             	mov    %rax,%rdi
    4619:	e8 00 00 00 00       	callq  461e <_ZN6Parser11compileAtomE7QString+0x21c>
    461e:	48 8d b5 40 ff ff ff 	lea    -0xc0(%rbp),%rsi
    4625:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    462c:	b9 00 00 00 00       	mov    $0x0,%ecx
    4631:	ba 01 00 00 00       	mov    $0x1,%edx
    4636:	48 89 c7             	mov    %rax,%rdi
    4639:	e8 00 00 00 00       	callq  463e <_ZN6Parser11compileAtomE7QString+0x23c>
    463e:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    4645:	48 89 c7             	mov    %rax,%rdi
    4648:	e8 00 00 00 00       	callq  464d <_ZN6Parser11compileAtomE7QString+0x24b>
    QRegExp QR_comma("\\,");                 // 6
    464d:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    4654:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 465b <_ZN6Parser11compileAtomE7QString+0x259>
    465b:	48 89 c7             	mov    %rax,%rdi
    465e:	e8 00 00 00 00       	callq  4663 <_ZN6Parser11compileAtomE7QString+0x261>
    4663:	48 8d b5 60 ff ff ff 	lea    -0xa0(%rbp),%rsi
    466a:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    4671:	b9 00 00 00 00       	mov    $0x0,%ecx
    4676:	ba 01 00 00 00       	mov    $0x1,%edx
    467b:	48 89 c7             	mov    %rax,%rdi
    467e:	e8 00 00 00 00       	callq  4683 <_ZN6Parser11compileAtomE7QString+0x281>
    4683:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    468a:	48 89 c7             	mov    %rax,%rdi
    468d:	e8 00 00 00 00       	callq  4692 <_ZN6Parser11compileAtomE7QString+0x290>
     // 7 - other way

    QRegExp QR_procedure("procedure"+QRSBrakes); // 8
    4692:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    4696:	48 8d 95 d0 fe ff ff 	lea    -0x130(%rbp),%rdx
    469d:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 46a4 <_ZN6Parser11compileAtomE7QString+0x2a2>
    46a4:	48 89 c7             	mov    %rax,%rdi
    46a7:	e8 00 00 00 00       	callq  46ac <_ZN6Parser11compileAtomE7QString+0x2aa>
    46ac:	48 8d 75 80          	lea    -0x80(%rbp),%rsi
    46b0:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    46b7:	b9 00 00 00 00       	mov    $0x0,%ecx
    46bc:	ba 01 00 00 00       	mov    $0x1,%edx
    46c1:	48 89 c7             	mov    %rax,%rdi
    46c4:	e8 00 00 00 00       	callq  46c9 <_ZN6Parser11compileAtomE7QString+0x2c7>
    46c9:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    46cd:	48 89 c7             	mov    %rax,%rdi
    46d0:	e8 00 00 00 00       	callq  46d5 <_ZN6Parser11compileAtomE7QString+0x2d3>
    QRegExp QR_operand(operations);              // 9
    46d5:	48 8d b5 c0 fe ff ff 	lea    -0x140(%rbp),%rsi
    46dc:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    46e0:	b9 00 00 00 00       	mov    $0x0,%ecx
    46e5:	ba 01 00 00 00       	mov    $0x1,%edx
    46ea:	48 89 c7             	mov    %rax,%rdi
    46ed:	e8 00 00 00 00       	callq  46f2 <_ZN6Parser11compileAtomE7QString+0x2f0>

    QRegExp QR_end("");  // 10 end of Program - other way
    46f2:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    46f6:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 46fd <_ZN6Parser11compileAtomE7QString+0x2fb>
    46fd:	48 89 c7             	mov    %rax,%rdi
    4700:	e8 00 00 00 00       	callq  4705 <_ZN6Parser11compileAtomE7QString+0x303>
    4705:	48 8d 75 b0          	lea    -0x50(%rbp),%rsi
    4709:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    470d:	b9 00 00 00 00       	mov    $0x0,%ecx
    4712:	ba 01 00 00 00       	mov    $0x1,%edx
    4717:	48 89 c7             	mov    %rax,%rdi
    471a:	e8 00 00 00 00       	callq  471f <_ZN6Parser11compileAtomE7QString+0x31d>
    471f:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    4723:	48 89 c7             	mov    %rax,%rdi
    4726:	e8 00 00 00 00       	callq  472b <_ZN6Parser11compileAtomE7QString+0x329>
     * шаблон выражений
     * шаблон объявления переменной "тип переменная"

    */

    return result;
    472b:	90                   	nop
     // 7 - other way

    QRegExp QR_procedure("procedure"+QRSBrakes); // 8
    QRegExp QR_operand(operations);              // 9

    QRegExp QR_end("");  // 10 end of Program - other way
    472c:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4730:	48 89 c7             	mov    %rax,%rdi
    4733:	e8 00 00 00 00       	callq  4738 <_ZN6Parser11compileAtomE7QString+0x336>
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    QRegExp QR_comma("\\,");                 // 6
     // 7 - other way

    QRegExp QR_procedure("procedure"+QRSBrakes); // 8
    QRegExp QR_operand(operations);              // 9
    4738:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    473c:	48 89 c7             	mov    %rax,%rdi
    473f:	e8 00 00 00 00       	callq  4744 <_ZN6Parser11compileAtomE7QString+0x342>
    QRegExp QR_continue("continue");        // 4
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    QRegExp QR_comma("\\,");                 // 6
     // 7 - other way

    QRegExp QR_procedure("procedure"+QRSBrakes); // 8
    4744:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    474b:	48 89 c7             	mov    %rax,%rdi
    474e:	e8 00 00 00 00       	callq  4753 <_ZN6Parser11compileAtomE7QString+0x351>
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    QRegExp QR_continue("continue");        // 4
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    QRegExp QR_comma("\\,");                 // 6
    4753:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    475a:	48 89 c7             	mov    %rax,%rdi
    475d:	e8 00 00 00 00       	callq  4762 <_ZN6Parser11compileAtomE7QString+0x360>
    QRegExp QR_function(functions);         // 1
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    QRegExp QR_continue("continue");        // 4
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    4762:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    4769:	48 89 c7             	mov    %rax,%rdi
    476c:	e8 00 00 00 00       	callq  4771 <_ZN6Parser11compileAtomE7QString+0x36f>

    QRegExp QR_function(functions);         // 1
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    QRegExp QR_continue("continue");        // 4
    4771:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    4778:	48 89 c7             	mov    %rax,%rdi
    477b:	e8 00 00 00 00       	callq  4780 <_ZN6Parser11compileAtomE7QString+0x37e>
    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";

    QRegExp QR_function(functions);         // 1
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    4780:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    4787:	48 89 c7             	mov    %rax,%rdi
    478a:	e8 00 00 00 00       	callq  478f <_ZN6Parser11compileAtomE7QString+0x38d>
    QString functions  = SEMS.allFunctions();
    QString operations = SEMS.allOps();

    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";

    QRegExp QR_function(functions);         // 1
    478f:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    4796:	48 89 c7             	mov    %rax,%rdi
    4799:	e8 00 00 00 00       	callq  479e <_ZN6Parser11compileAtomE7QString+0x39c>

    Sems SEMS;
    QString functions  = SEMS.allFunctions();
    QString operations = SEMS.allOps();

    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";
    479e:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    47a5:	48 89 c7             	mov    %rax,%rdi
    47a8:	e8 00 00 00 00       	callq  47ad <_ZN6Parser11compileAtomE7QString+0x3ab>
     * 7. Номер строки - Получим другим путем
     * */

    Sems SEMS;
    QString functions  = SEMS.allFunctions();
    QString operations = SEMS.allOps();
    47ad:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    47b4:	48 89 c7             	mov    %rax,%rdi
    47b7:	e8 00 00 00 00       	callq  47bc <_ZN6Parser11compileAtomE7QString+0x3ba>
     *
     * 7. Номер строки - Получим другим путем
     * */

    Sems SEMS;
    QString functions  = SEMS.allFunctions();
    47bc:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    47c3:	48 89 c7             	mov    %rax,%rdi
    47c6:	e8 00 00 00 00       	callq  47cb <_ZN6Parser11compileAtomE7QString+0x3c9>
     * 6. Запятая
     *
     * 7. Номер строки - Получим другим путем
     * */

    Sems SEMS;
    47cb:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    47cf:	48 89 c7             	mov    %rax,%rdi
    47d2:	e8 00 00 00 00       	callq  47d7 <_ZN6Parser11compileAtomE7QString+0x3d5>

    //QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]");

    QRegExp QRE_FUNCTION("[\w]+");
    QRegExp QRE_COMMA("\,");
    QRegExp QRE_TEXT("\"([\w\s\d]+)\"");
    47d7:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    47de:	48 89 c7             	mov    %rax,%rdi
    47e1:	e8 00 00 00 00       	callq  47e6 <_ZN6Parser11compileAtomE7QString+0x3e4>
    QByteArray result;

    //QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]");

    QRegExp QRE_FUNCTION("[\w]+");
    QRegExp QRE_COMMA("\,");
    47e6:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    47ed:	48 89 c7             	mov    %rax,%rdi
    47f0:	e8 00 00 00 00       	callq  47f5 <_ZN6Parser11compileAtomE7QString+0x3f3>
QByteArray Parser::compileAtom(QString atom){
    QByteArray result;

    //QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]");

    QRegExp QRE_FUNCTION("[\w]+");
    47f5:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    47fc:	48 89 c7             	mov    %rax,%rdi
    47ff:	e8 00 00 00 00       	callq  4804 <_ZN6Parser11compileAtomE7QString+0x402>
     * шаблон выражений
     * шаблон объявления переменной "тип переменная"

    */

    return result;
    4804:	e9 b8 02 00 00       	jmpq   4ac1 <_ZN6Parser11compileAtomE7QString+0x6bf>
    4809:	48 89 c3             	mov    %rax,%rbx
    480c:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
    4813:	48 89 c7             	mov    %rax,%rdi
    4816:	e8 00 00 00 00       	callq  481b <_ZN6Parser11compileAtomE7QString+0x419>
    481b:	e9 87 02 00 00       	jmpq   4aa7 <_ZN6Parser11compileAtomE7QString+0x6a5>
    4820:	48 89 c3             	mov    %rax,%rbx
    4823:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    482a:	48 89 c7             	mov    %rax,%rdi
    482d:	e8 00 00 00 00       	callq  4832 <_ZN6Parser11compileAtomE7QString+0x430>
    4832:	e9 70 02 00 00       	jmpq   4aa7 <_ZN6Parser11compileAtomE7QString+0x6a5>
    4837:	48 89 c3             	mov    %rax,%rbx
    483a:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
    4841:	48 89 c7             	mov    %rax,%rdi
    4844:	e8 00 00 00 00       	callq  4849 <_ZN6Parser11compileAtomE7QString+0x447>
    4849:	e9 45 02 00 00       	jmpq   4a93 <_ZN6Parser11compileAtomE7QString+0x691>
    484e:	48 89 c3             	mov    %rax,%rbx
    4851:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    4858:	48 89 c7             	mov    %rax,%rdi
    485b:	e8 00 00 00 00       	callq  4860 <_ZN6Parser11compileAtomE7QString+0x45e>
    4860:	e9 2e 02 00 00       	jmpq   4a93 <_ZN6Parser11compileAtomE7QString+0x691>
    4865:	48 89 c3             	mov    %rax,%rbx
    4868:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    486f:	48 89 c7             	mov    %rax,%rdi
    4872:	e8 00 00 00 00       	callq  4877 <_ZN6Parser11compileAtomE7QString+0x475>
    4877:	e9 03 02 00 00       	jmpq   4a7f <_ZN6Parser11compileAtomE7QString+0x67d>
    487c:	48 89 c3             	mov    %rax,%rbx
    487f:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    4886:	48 89 c7             	mov    %rax,%rdi
    4889:	e8 00 00 00 00       	callq  488e <_ZN6Parser11compileAtomE7QString+0x48c>
    488e:	e9 ec 01 00 00       	jmpq   4a7f <_ZN6Parser11compileAtomE7QString+0x67d>
    4893:	48 89 c3             	mov    %rax,%rbx
    4896:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    489d:	48 89 c7             	mov    %rax,%rdi
    48a0:	e8 00 00 00 00       	callq  48a5 <_ZN6Parser11compileAtomE7QString+0x4a3>
    48a5:	e9 60 01 00 00       	jmpq   4a0a <_ZN6Parser11compileAtomE7QString+0x608>
    48aa:	48 89 c3             	mov    %rax,%rbx
    48ad:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    48b4:	48 89 c7             	mov    %rax,%rdi
    48b7:	e8 00 00 00 00       	callq  48bc <_ZN6Parser11compileAtomE7QString+0x4ba>
    48bc:	e9 49 01 00 00       	jmpq   4a0a <_ZN6Parser11compileAtomE7QString+0x608>
    48c1:	48 89 c3             	mov    %rax,%rbx
    48c4:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    48cb:	48 89 c7             	mov    %rax,%rdi
    48ce:	e8 00 00 00 00       	callq  48d3 <_ZN6Parser11compileAtomE7QString+0x4d1>
    48d3:	e9 1e 01 00 00       	jmpq   49f6 <_ZN6Parser11compileAtomE7QString+0x5f4>
    48d8:	48 89 c3             	mov    %rax,%rbx
    48db:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    48e2:	48 89 c7             	mov    %rax,%rdi
    48e5:	e8 00 00 00 00       	callq  48ea <_ZN6Parser11compileAtomE7QString+0x4e8>
    48ea:	e9 07 01 00 00       	jmpq   49f6 <_ZN6Parser11compileAtomE7QString+0x5f4>
    48ef:	48 89 c3             	mov    %rax,%rbx
    48f2:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    48f9:	48 89 c7             	mov    %rax,%rdi
    48fc:	e8 00 00 00 00       	callq  4901 <_ZN6Parser11compileAtomE7QString+0x4ff>
    4901:	e9 dc 00 00 00       	jmpq   49e2 <_ZN6Parser11compileAtomE7QString+0x5e0>
    4906:	48 89 c3             	mov    %rax,%rbx
    4909:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    4910:	48 89 c7             	mov    %rax,%rdi
    4913:	e8 00 00 00 00       	callq  4918 <_ZN6Parser11compileAtomE7QString+0x516>
    4918:	e9 c5 00 00 00       	jmpq   49e2 <_ZN6Parser11compileAtomE7QString+0x5e0>
    491d:	48 89 c3             	mov    %rax,%rbx
    4920:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    4927:	48 89 c7             	mov    %rax,%rdi
    492a:	e8 00 00 00 00       	callq  492f <_ZN6Parser11compileAtomE7QString+0x52d>
    492f:	e9 9a 00 00 00       	jmpq   49ce <_ZN6Parser11compileAtomE7QString+0x5cc>
    4934:	48 89 c3             	mov    %rax,%rbx
    4937:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    493e:	48 89 c7             	mov    %rax,%rdi
    4941:	e8 00 00 00 00       	callq  4946 <_ZN6Parser11compileAtomE7QString+0x544>
    4946:	e9 83 00 00 00       	jmpq   49ce <_ZN6Parser11compileAtomE7QString+0x5cc>
    494b:	48 89 c3             	mov    %rax,%rbx
    494e:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    4952:	48 89 c7             	mov    %rax,%rdi
    4955:	e8 00 00 00 00       	callq  495a <_ZN6Parser11compileAtomE7QString+0x558>
    495a:	eb 5e                	jmp    49ba <_ZN6Parser11compileAtomE7QString+0x5b8>
    495c:	48 89 c3             	mov    %rax,%rbx
    495f:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    4966:	48 89 c7             	mov    %rax,%rdi
    4969:	e8 00 00 00 00       	callq  496e <_ZN6Parser11compileAtomE7QString+0x56c>
    496e:	eb 4a                	jmp    49ba <_ZN6Parser11compileAtomE7QString+0x5b8>
    4970:	48 89 c3             	mov    %rax,%rbx
    4973:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    4977:	48 89 c7             	mov    %rax,%rdi
    497a:	e8 00 00 00 00       	callq  497f <_ZN6Parser11compileAtomE7QString+0x57d>
    497f:	eb 14                	jmp    4995 <_ZN6Parser11compileAtomE7QString+0x593>
    4981:	48 89 c3             	mov    %rax,%rbx
    4984:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4988:	48 89 c7             	mov    %rax,%rdi
    498b:	e8 00 00 00 00       	callq  4990 <_ZN6Parser11compileAtomE7QString+0x58e>
    4990:	eb 03                	jmp    4995 <_ZN6Parser11compileAtomE7QString+0x593>
    4992:	48 89 c3             	mov    %rax,%rbx
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    QRegExp QR_comma("\\,");                 // 6
     // 7 - other way

    QRegExp QR_procedure("procedure"+QRSBrakes); // 8
    QRegExp QR_operand(operations);              // 9
    4995:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    4999:	48 89 c7             	mov    %rax,%rdi
    499c:	e8 00 00 00 00       	callq  49a1 <_ZN6Parser11compileAtomE7QString+0x59f>
    49a1:	eb 03                	jmp    49a6 <_ZN6Parser11compileAtomE7QString+0x5a4>
    49a3:	48 89 c3             	mov    %rax,%rbx
    QRegExp QR_continue("continue");        // 4
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    QRegExp QR_comma("\\,");                 // 6
     // 7 - other way

    QRegExp QR_procedure("procedure"+QRSBrakes); // 8
    49a6:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    49ad:	48 89 c7             	mov    %rax,%rdi
    49b0:	e8 00 00 00 00       	callq  49b5 <_ZN6Parser11compileAtomE7QString+0x5b3>
    49b5:	eb 03                	jmp    49ba <_ZN6Parser11compileAtomE7QString+0x5b8>
    49b7:	48 89 c3             	mov    %rax,%rbx
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    QRegExp QR_continue("continue");        // 4
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    QRegExp QR_comma("\\,");                 // 6
    49ba:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    49c1:	48 89 c7             	mov    %rax,%rdi
    49c4:	e8 00 00 00 00       	callq  49c9 <_ZN6Parser11compileAtomE7QString+0x5c7>
    49c9:	eb 03                	jmp    49ce <_ZN6Parser11compileAtomE7QString+0x5cc>
    49cb:	48 89 c3             	mov    %rax,%rbx
    QRegExp QR_function(functions);         // 1
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    QRegExp QR_continue("continue");        // 4
    QRegExp QR_separaror("\\;|\\{|\\}");       // 5
    49ce:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    49d5:	48 89 c7             	mov    %rax,%rdi
    49d8:	e8 00 00 00 00       	callq  49dd <_ZN6Parser11compileAtomE7QString+0x5db>
    49dd:	eb 03                	jmp    49e2 <_ZN6Parser11compileAtomE7QString+0x5e0>
    49df:	48 89 c3             	mov    %rax,%rbx

    QRegExp QR_function(functions);         // 1
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    QRegExp QR_continue("continue");        // 4
    49e2:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    49e9:	48 89 c7             	mov    %rax,%rdi
    49ec:	e8 00 00 00 00       	callq  49f1 <_ZN6Parser11compileAtomE7QString+0x5ef>
    49f1:	eb 03                	jmp    49f6 <_ZN6Parser11compileAtomE7QString+0x5f4>
    49f3:	48 89 c3             	mov    %rax,%rbx
    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";

    QRegExp QR_function(functions);         // 1
      // 2 - pass, eoF will received in other way

    QRegExp QR_if("if[\\s\\t]*\\([\\w\\W]*\\)");  // 3
    49f6:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    49fd:	48 89 c7             	mov    %rax,%rdi
    4a00:	e8 00 00 00 00       	callq  4a05 <_ZN6Parser11compileAtomE7QString+0x603>
    4a05:	eb 03                	jmp    4a0a <_ZN6Parser11compileAtomE7QString+0x608>
    4a07:	48 89 c3             	mov    %rax,%rbx
    QString functions  = SEMS.allFunctions();
    QString operations = SEMS.allOps();

    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";

    QRegExp QR_function(functions);         // 1
    4a0a:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    4a11:	48 89 c7             	mov    %rax,%rdi
    4a14:	e8 00 00 00 00       	callq  4a19 <_ZN6Parser11compileAtomE7QString+0x617>
    4a19:	eb 03                	jmp    4a1e <_ZN6Parser11compileAtomE7QString+0x61c>
    4a1b:	48 89 c3             	mov    %rax,%rbx

    Sems SEMS;
    QString functions  = SEMS.allFunctions();
    QString operations = SEMS.allOps();

    QString QRSBrakes = "[\\s\\t]*\\([\\w\\W]*\\)";
    4a1e:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    4a25:	48 89 c7             	mov    %rax,%rdi
    4a28:	e8 00 00 00 00       	callq  4a2d <_ZN6Parser11compileAtomE7QString+0x62b>
    4a2d:	eb 03                	jmp    4a32 <_ZN6Parser11compileAtomE7QString+0x630>
    4a2f:	48 89 c3             	mov    %rax,%rbx
     * 7. Номер строки - Получим другим путем
     * */

    Sems SEMS;
    QString functions  = SEMS.allFunctions();
    QString operations = SEMS.allOps();
    4a32:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    4a39:	48 89 c7             	mov    %rax,%rdi
    4a3c:	e8 00 00 00 00       	callq  4a41 <_ZN6Parser11compileAtomE7QString+0x63f>
    4a41:	eb 03                	jmp    4a46 <_ZN6Parser11compileAtomE7QString+0x644>
    4a43:	48 89 c3             	mov    %rax,%rbx
     *
     * 7. Номер строки - Получим другим путем
     * */

    Sems SEMS;
    QString functions  = SEMS.allFunctions();
    4a46:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    4a4d:	48 89 c7             	mov    %rax,%rdi
    4a50:	e8 00 00 00 00       	callq  4a55 <_ZN6Parser11compileAtomE7QString+0x653>
    4a55:	eb 03                	jmp    4a5a <_ZN6Parser11compileAtomE7QString+0x658>
    4a57:	48 89 c3             	mov    %rax,%rbx
     * 6. Запятая
     *
     * 7. Номер строки - Получим другим путем
     * */

    Sems SEMS;
    4a5a:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    4a5e:	48 89 c7             	mov    %rax,%rdi
    4a61:	e8 00 00 00 00       	callq  4a66 <_ZN6Parser11compileAtomE7QString+0x664>
    4a66:	eb 03                	jmp    4a6b <_ZN6Parser11compileAtomE7QString+0x669>
    4a68:	48 89 c3             	mov    %rax,%rbx

    //QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]");

    QRegExp QRE_FUNCTION("[\w]+");
    QRegExp QRE_COMMA("\,");
    QRegExp QRE_TEXT("\"([\w\s\d]+)\"");
    4a6b:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    4a72:	48 89 c7             	mov    %rax,%rdi
    4a75:	e8 00 00 00 00       	callq  4a7a <_ZN6Parser11compileAtomE7QString+0x678>
    4a7a:	eb 03                	jmp    4a7f <_ZN6Parser11compileAtomE7QString+0x67d>
    4a7c:	48 89 c3             	mov    %rax,%rbx
    QByteArray result;

    //QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]");

    QRegExp QRE_FUNCTION("[\w]+");
    QRegExp QRE_COMMA("\,");
    4a7f:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    4a86:	48 89 c7             	mov    %rax,%rdi
    4a89:	e8 00 00 00 00       	callq  4a8e <_ZN6Parser11compileAtomE7QString+0x68c>
    4a8e:	eb 03                	jmp    4a93 <_ZN6Parser11compileAtomE7QString+0x691>
    4a90:	48 89 c3             	mov    %rax,%rbx
QByteArray Parser::compileAtom(QString atom){
    QByteArray result;

    //QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]");

    QRegExp QRE_FUNCTION("[\w]+");
    4a93:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
    4a9a:	48 89 c7             	mov    %rax,%rdi
    4a9d:	e8 00 00 00 00       	callq  4aa2 <_ZN6Parser11compileAtomE7QString+0x6a0>
    4aa2:	eb 03                	jmp    4aa7 <_ZN6Parser11compileAtomE7QString+0x6a5>
    4aa4:	48 89 c3             	mov    %rax,%rbx
    4aa7:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
    4aae:	48 89 c7             	mov    %rax,%rdi
    4ab1:	e8 00 00 00 00       	callq  4ab6 <_ZN6Parser11compileAtomE7QString+0x6b4>
    4ab6:	48 89 d8             	mov    %rbx,%rax
    4ab9:	48 89 c7             	mov    %rax,%rdi
    4abc:	e8 00 00 00 00       	callq  4ac1 <_ZN6Parser11compileAtomE7QString+0x6bf>
     * шаблон объявления переменной "тип переменная"

    */

    return result;
}
    4ac1:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
    4ac8:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    4acc:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    4ad3:	00 00 
    4ad5:	74 05                	je     4adc <_ZN6Parser11compileAtomE7QString+0x6da>
    4ad7:	e8 00 00 00 00       	callq  4adc <_ZN6Parser11compileAtomE7QString+0x6da>
    4adc:	48 81 c4 c8 01 00 00 	add    $0x1c8,%rsp
    4ae3:	5b                   	pop    %rbx
    4ae4:	5d                   	pop    %rbp
    4ae5:	c3                   	retq   

0000000000004ae6 <_ZN6Parser8splitStrE7QStringR5QListIS0_E>:

void Parser::splitStr(QString str, QList<QString> &atoms){
    4ae6:	55                   	push   %rbp
    4ae7:	48 89 e5             	mov    %rsp,%rbp
    4aea:	53                   	push   %rbx
    4aeb:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
    4af2:	48 89 bd 78 ff ff ff 	mov    %rdi,-0x88(%rbp)
    4af9:	48 89 b5 70 ff ff ff 	mov    %rsi,-0x90(%rbp)
    4b00:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
    4b07:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    4b0e:	00 00 
    4b10:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    4b14:	31 c0                	xor    %eax,%eax
    QByteArray result;
    4b16:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    4b1a:	48 89 c7             	mov    %rax,%rdi
    4b1d:	e8 00 00 00 00       	callq  4b22 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x3c>
    if(str.length()<1) return;
    4b22:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
    4b29:	48 89 c7             	mov    %rax,%rdi
    4b2c:	e8 00 00 00 00       	callq  4b31 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x4b>
    4b31:	85 c0                	test   %eax,%eax
    4b33:	0f 9e c0             	setle  %al
    4b36:	84 c0                	test   %al,%al
    4b38:	74 0a                	je     4b44 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x5e>
    4b3a:	bb 00 00 00 00       	mov    $0x0,%ebx
    4b3f:	e9 27 01 00 00       	jmpq   4c6b <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x185>

    QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]", Qt::CaseInsensitive);
    4b44:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    4b48:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4b4f <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x69>
    4b4f:	48 89 c7             	mov    %rax,%rdi
    4b52:	e8 00 00 00 00       	callq  4b57 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x71>
    4b57:	48 8d 75 b0          	lea    -0x50(%rbp),%rsi
    4b5b:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4b5f:	b9 00 00 00 00       	mov    $0x0,%ecx
    4b64:	ba 00 00 00 00       	mov    $0x0,%edx
    4b69:	48 89 c7             	mov    %rax,%rdi
    4b6c:	e8 00 00 00 00       	callq  4b71 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x8b>
    4b71:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    4b75:	48 89 c7             	mov    %rax,%rdi
    4b78:	e8 00 00 00 00       	callq  4b7d <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x97>
    QR.setMinimal(false);
    4b7d:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4b81:	be 00 00 00 00       	mov    $0x0,%esi
    4b86:	48 89 c7             	mov    %rax,%rdi
    4b89:	e8 00 00 00 00       	callq  4b8e <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0xa8>

    //int count = 0;
    int pos = 0;
    4b8e:	c7 45 8c 00 00 00 00 	movl   $0x0,-0x74(%rbp)

    while ((pos = QR.indexIn(str, pos)) != -1) {
    4b95:	8b 55 8c             	mov    -0x74(%rbp),%edx
    4b98:	48 8b b5 70 ff ff ff 	mov    -0x90(%rbp),%rsi
    4b9f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4ba3:	b9 00 00 00 00       	mov    $0x0,%ecx
    4ba8:	48 89 c7             	mov    %rax,%rdi
    4bab:	e8 00 00 00 00       	callq  4bb0 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0xca>
    4bb0:	89 45 8c             	mov    %eax,-0x74(%rbp)
    4bb3:	83 7d 8c ff          	cmpl   $0xffffffff,-0x74(%rbp)
    4bb7:	0f 95 c0             	setne  %al
    4bba:	84 c0                	test   %al,%al
    4bbc:	0f 84 98 00 00 00    	je     4c5a <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x174>
        //++count;
        pos += QR.matchedLength();
    4bc2:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4bc6:	48 89 c7             	mov    %rax,%rdi
    4bc9:	e8 00 00 00 00       	callq  4bce <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0xe8>
    4bce:	01 45 8c             	add    %eax,-0x74(%rbp)
        atoms.append(QR.cap(0));
    4bd1:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    4bd5:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
    4bd9:	ba 00 00 00 00       	mov    $0x0,%edx
    4bde:	48 89 ce             	mov    %rcx,%rsi
    4be1:	48 89 c7             	mov    %rax,%rdi
    4be4:	e8 00 00 00 00       	callq  4be9 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x103>
    4be9:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    4bed:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    4bf4:	48 89 d6             	mov    %rdx,%rsi
    4bf7:	48 89 c7             	mov    %rax,%rdi
    4bfa:	e8 00 00 00 00       	callq  4bff <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x119>
    4bff:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    4c03:	48 89 c7             	mov    %rax,%rdi
    4c06:	e8 00 00 00 00       	callq  4c0b <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x125>
        compileAtom(QR.cap(0));
    4c0b:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    4c0f:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
    4c13:	ba 00 00 00 00       	mov    $0x0,%edx
    4c18:	48 89 ce             	mov    %rcx,%rsi
    4c1b:	48 89 c7             	mov    %rax,%rdi
    4c1e:	e8 00 00 00 00       	callq  4c23 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x13d>
    4c23:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4c27:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    4c2b:	48 8b 8d 78 ff ff ff 	mov    -0x88(%rbp),%rcx
    4c32:	48 89 ce             	mov    %rcx,%rsi
    4c35:	48 89 c7             	mov    %rax,%rdi
    4c38:	e8 00 00 00 00       	callq  4c3d <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x157>
    4c3d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    4c41:	48 89 c7             	mov    %rax,%rdi
    4c44:	e8 00 00 00 00       	callq  4c49 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x163>
    4c49:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    4c4d:	48 89 c7             	mov    %rax,%rdi
    4c50:	e8 00 00 00 00       	callq  4c55 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x16f>
    QR.setMinimal(false);

    //int count = 0;
    int pos = 0;

    while ((pos = QR.indexIn(str, pos)) != -1) {
    4c55:	e9 3b ff ff ff       	jmpq   4b95 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0xaf>

void Parser::splitStr(QString str, QList<QString> &atoms){
    QByteArray result;
    if(str.length()<1) return;

    QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]", Qt::CaseInsensitive);
    4c5a:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4c5e:	48 89 c7             	mov    %rax,%rdi
    4c61:	e8 00 00 00 00       	callq  4c66 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x180>
    4c66:	bb 01 00 00 00       	mov    $0x1,%ebx
    4c6b:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    4c6f:	48 89 c7             	mov    %rax,%rdi
    4c72:	e8 00 00 00 00       	callq  4c77 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x191>
    4c77:	83 fb 01             	cmp    $0x1,%ebx

    return result;
}

void Parser::splitStr(QString str, QList<QString> &atoms){
    QByteArray result;
    4c7a:	90                   	nop
        //++count;
        pos += QR.matchedLength();
        atoms.append(QR.cap(0));
        compileAtom(QR.cap(0));
    }
}
    4c7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4c7f:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    4c86:	00 00 
    4c88:	74 76                	je     4d00 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x21a>
    4c8a:	eb 6f                	jmp    4cfb <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x215>
    4c8c:	48 89 c3             	mov    %rax,%rbx
    4c8f:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    4c93:	48 89 c7             	mov    %rax,%rdi
    4c96:	e8 00 00 00 00       	callq  4c9b <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1b5>
    4c9b:	eb 47                	jmp    4ce4 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1fe>
    4c9d:	48 89 c3             	mov    %rax,%rbx
    4ca0:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4ca4:	48 89 c7             	mov    %rax,%rdi
    4ca7:	e8 00 00 00 00       	callq  4cac <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1c6>
    4cac:	eb 36                	jmp    4ce4 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1fe>
    4cae:	48 89 c3             	mov    %rax,%rbx
    int pos = 0;

    while ((pos = QR.indexIn(str, pos)) != -1) {
        //++count;
        pos += QR.matchedLength();
        atoms.append(QR.cap(0));
    4cb1:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    4cb5:	48 89 c7             	mov    %rax,%rdi
    4cb8:	e8 00 00 00 00       	callq  4cbd <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1d7>
    4cbd:	eb 14                	jmp    4cd3 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1ed>
    4cbf:	48 89 c3             	mov    %rax,%rbx
        compileAtom(QR.cap(0));
    4cc2:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    4cc6:	48 89 c7             	mov    %rax,%rdi
    4cc9:	e8 00 00 00 00       	callq  4cce <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1e8>
    4cce:	eb 03                	jmp    4cd3 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1ed>
    4cd0:	48 89 c3             	mov    %rax,%rbx

void Parser::splitStr(QString str, QList<QString> &atoms){
    QByteArray result;
    if(str.length()<1) return;

    QRegExp QR("\\\"[\\w\\W]+\\\"|[\\w]+|[\\,\\(\\)]", Qt::CaseInsensitive);
    4cd3:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4cd7:	48 89 c7             	mov    %rax,%rdi
    4cda:	e8 00 00 00 00       	callq  4cdf <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1f9>
    4cdf:	eb 03                	jmp    4ce4 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x1fe>
    4ce1:	48 89 c3             	mov    %rax,%rbx

    return result;
}

void Parser::splitStr(QString str, QList<QString> &atoms){
    QByteArray result;
    4ce4:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    4ce8:	48 89 c7             	mov    %rax,%rdi
    4ceb:	e8 00 00 00 00       	callq  4cf0 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x20a>
    4cf0:	48 89 d8             	mov    %rbx,%rax
    4cf3:	48 89 c7             	mov    %rax,%rdi
    4cf6:	e8 00 00 00 00       	callq  4cfb <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x215>
        //++count;
        pos += QR.matchedLength();
        atoms.append(QR.cap(0));
        compileAtom(QR.cap(0));
    }
}
    4cfb:	e8 00 00 00 00       	callq  4d00 <_ZN6Parser8splitStrE7QStringR5QListIS0_E+0x21a>
    4d00:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
    4d07:	5b                   	pop    %rbx
    4d08:	5d                   	pop    %rbp
    4d09:	c3                   	retq   

0000000000004d0a <_ZN6Parser12compileBlockER11QStringList>:

QByteArray Parser::compileBlock(QStringList &block){
    4d0a:	55                   	push   %rbp
    4d0b:	48 89 e5             	mov    %rsp,%rbp
    4d0e:	48 83 ec 30          	sub    $0x30,%rsp
    4d12:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    4d16:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    4d1a:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    4d1e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    4d25:	00 00 
    4d27:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    4d2b:	31 c0                	xor    %eax,%eax
    QByteArray result;
    4d2d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4d31:	48 89 c7             	mov    %rax,%rdi
    4d34:	e8 00 00 00 00       	callq  4d39 <_ZN6Parser12compileBlockER11QStringList+0x2f>

    return result;
    4d39:	90                   	nop
}
    4d3a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4d3e:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    4d42:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    4d49:	00 00 
    4d4b:	74 05                	je     4d52 <_ZN6Parser12compileBlockER11QStringList+0x48>
    4d4d:	e8 00 00 00 00       	callq  4d52 <_ZN6Parser12compileBlockER11QStringList+0x48>
    4d52:	c9                   	leaveq 
    4d53:	c3                   	retq   

0000000000004d54 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_>:


void Parser::classify(QString *code, QHash<QString, QStringList> *result, QString regExp)
// inherit copypasted code from splitBlocks(..)
{
    4d54:	55                   	push   %rbp
    4d55:	48 89 e5             	mov    %rsp,%rbp
    4d58:	53                   	push   %rbx
    4d59:	48 81 ec 98 01 00 00 	sub    $0x198,%rsp
    4d60:	48 89 bd 78 fe ff ff 	mov    %rdi,-0x188(%rbp)
    4d67:	48 89 b5 70 fe ff ff 	mov    %rsi,-0x190(%rbp)
    4d6e:	48 89 95 68 fe ff ff 	mov    %rdx,-0x198(%rbp)
    4d75:	48 89 8d 60 fe ff ff 	mov    %rcx,-0x1a0(%rbp)
    4d7c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    4d83:	00 00 
    4d85:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    4d89:	31 c0                	xor    %eax,%eax
    QStringList allStrings;
    4d8b:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    4d92:	48 89 c7             	mov    %rax,%rdi
    4d95:	e8 00 00 00 00       	callq  4d9a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x46>
    QRegExp classRE(regExp);
    4d9a:	48 8b b5 60 fe ff ff 	mov    -0x1a0(%rbp),%rsi
    4da1:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    4da8:	b9 00 00 00 00       	mov    $0x0,%ecx
    4dad:	ba 01 00 00 00       	mov    $0x1,%edx
    4db2:	48 89 c7             	mov    %rax,%rdi
    4db5:	e8 00 00 00 00       	callq  4dba <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x66>

    QString str  = *code;
    4dba:	48 8b 95 70 fe ff ff 	mov    -0x190(%rbp),%rdx
    4dc1:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    4dc8:	48 89 d6             	mov    %rdx,%rsi
    4dcb:	48 89 c7             	mov    %rax,%rdi
    4dce:	e8 00 00 00 00       	callq  4dd3 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7f>
    QString str_copy = str;
    4dd3:	48 8d 95 d0 fe ff ff 	lea    -0x130(%rbp),%rdx
    4dda:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    4de1:	48 89 d6             	mov    %rdx,%rsi
    4de4:	48 89 c7             	mov    %rax,%rdi
    4de7:	e8 00 00 00 00       	callq  4dec <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x98>
    QString block;
    4dec:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    4df3:	48 89 c7             	mov    %rax,%rdi
    4df6:	e8 00 00 00 00       	callq  4dfb <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0xa7>
    QString excess;         // то что находится до регулярки
    4dfb:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    4e02:	48 89 c7             	mov    %rax,%rdi
    4e05:	e8 00 00 00 00       	callq  4e0a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0xb6>
    QString blockName;
    4e0a:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    4e11:	48 89 c7             	mov    %rax,%rdi
    4e14:	e8 00 00 00 00       	callq  4e19 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0xc5>

    QChar qc;
    4e19:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
    4e20:	48 89 c7             	mov    %rax,%rdi
    4e23:	e8 00 00 00 00       	callq  4e28 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0xd4>

    int     i        = 0;
    4e28:	c7 85 98 fe ff ff 00 	movl   $0x0,-0x168(%rbp)
    4e2f:	00 00 00 
    int     lineBase = 0;
    4e32:	c7 85 88 fe ff ff 00 	movl   $0x0,-0x178(%rbp)
    4e39:	00 00 00 
    int     line     = 0;
    4e3c:	c7 85 9c fe ff ff 00 	movl   $0x0,-0x164(%rbp)
    4e43:	00 00 00 

    unsigned int BFL = str.count("{");
    4e46:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    4e4d:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4e54 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x100>
    4e54:	48 89 c7             	mov    %rax,%rdi
    4e57:	e8 00 00 00 00       	callq  4e5c <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x108>
    4e5c:	48 8d 8d 20 ff ff ff 	lea    -0xe0(%rbp),%rcx
    4e63:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    4e6a:	ba 01 00 00 00       	mov    $0x1,%edx
    4e6f:	48 89 ce             	mov    %rcx,%rsi
    4e72:	48 89 c7             	mov    %rax,%rdi
    4e75:	e8 00 00 00 00       	callq  4e7a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x126>
    4e7a:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%rbp)
    4e80:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    4e87:	48 89 c7             	mov    %rax,%rdi
    4e8a:	e8 00 00 00 00       	callq  4e8f <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x13b>
    unsigned int BFR = str.count("}");
    4e8f:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    4e96:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4e9d <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x149>
    4e9d:	48 89 c7             	mov    %rax,%rdi
    4ea0:	e8 00 00 00 00       	callq  4ea5 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x151>
    4ea5:	48 8d 8d 30 ff ff ff 	lea    -0xd0(%rbp),%rcx
    4eac:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    4eb3:	ba 01 00 00 00       	mov    $0x1,%edx
    4eb8:	48 89 ce             	mov    %rcx,%rsi
    4ebb:	48 89 c7             	mov    %rax,%rdi
    4ebe:	e8 00 00 00 00       	callq  4ec3 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x16f>
    4ec3:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%rbp)
    4ec9:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    4ed0:	48 89 c7             	mov    %rax,%rdi
    4ed3:	e8 00 00 00 00       	callq  4ed8 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x184>
    unsigned int BCL = str.count("(");
    4ed8:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    4edf:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4ee6 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x192>
    4ee6:	48 89 c7             	mov    %rax,%rdi
    4ee9:	e8 00 00 00 00       	callq  4eee <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x19a>
    4eee:	48 8d 8d 40 ff ff ff 	lea    -0xc0(%rbp),%rcx
    4ef5:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    4efc:	ba 01 00 00 00       	mov    $0x1,%edx
    4f01:	48 89 ce             	mov    %rcx,%rsi
    4f04:	48 89 c7             	mov    %rax,%rdi
    4f07:	e8 00 00 00 00       	callq  4f0c <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x1b8>
    4f0c:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%rbp)
    4f12:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    4f19:	48 89 c7             	mov    %rax,%rdi
    4f1c:	e8 00 00 00 00       	callq  4f21 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x1cd>
    unsigned int BCR = str.count(")");
    4f21:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    4f28:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4f2f <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x1db>
    4f2f:	48 89 c7             	mov    %rax,%rdi
    4f32:	e8 00 00 00 00       	callq  4f37 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x1e3>
    4f37:	48 8d 8d 50 ff ff ff 	lea    -0xb0(%rbp),%rcx
    4f3e:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    4f45:	ba 01 00 00 00       	mov    $0x1,%edx
    4f4a:	48 89 ce             	mov    %rcx,%rsi
    4f4d:	48 89 c7             	mov    %rax,%rdi
    4f50:	e8 00 00 00 00       	callq  4f55 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x201>
    4f55:	89 85 ac fe ff ff    	mov    %eax,-0x154(%rbp)
    4f5b:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    4f62:	48 89 c7             	mov    %rax,%rdi
    4f65:	e8 00 00 00 00       	callq  4f6a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x216>

    if(BFL!=BFR){
    4f6a:	8b 85 a0 fe ff ff    	mov    -0x160(%rbp),%eax
    4f70:	3b 85 a4 fe ff ff    	cmp    -0x15c(%rbp),%eax
    4f76:	74 43                	je     4fbb <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x267>
        pe("Err. 1: Brakes {} are not pair.");
    4f78:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    4f7f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4f86 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x232>
    4f86:	48 89 c7             	mov    %rax,%rdi
    4f89:	e8 00 00 00 00       	callq  4f8e <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x23a>
    4f8e:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
    4f95:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
    4f9c:	48 89 d6             	mov    %rdx,%rsi
    4f9f:	48 89 c7             	mov    %rax,%rdi
    4fa2:	e8 00 00 00 00       	callq  4fa7 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x253>
    4fa7:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    4fae:	48 89 c7             	mov    %rax,%rdi
    4fb1:	e8 00 00 00 00       	callq  4fb6 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x262>
        return;}
    4fb6:	e9 6f 03 00 00       	jmpq   532a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5d6>

    if(BCL!=BCR){
    4fbb:	8b 85 a8 fe ff ff    	mov    -0x158(%rbp),%eax
    4fc1:	3b 85 ac fe ff ff    	cmp    -0x154(%rbp),%eax
    4fc7:	74 43                	je     500c <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x2b8>
        pe("Err. 2: Brakes () are not pair.");
    4fc9:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    4fd0:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4fd7 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x283>
    4fd7:	48 89 c7             	mov    %rax,%rdi
    4fda:	e8 00 00 00 00       	callq  4fdf <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x28b>
    4fdf:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    4fe6:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
    4fed:	48 89 d6             	mov    %rdx,%rsi
    4ff0:	48 89 c7             	mov    %rax,%rdi
    4ff3:	e8 00 00 00 00       	callq  4ff8 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x2a4>
    4ff8:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    4fff:	48 89 c7             	mov    %rax,%rdi
    5002:	e8 00 00 00 00       	callq  5007 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x2b3>
        return;}
    5007:	e9 1e 03 00 00       	jmpq   532a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5d6>

    while(1==1)
    {
        i = classRE.indexIn(str);if(i<0)return;
    500c:	48 8d b5 d0 fe ff ff 	lea    -0x130(%rbp),%rsi
    5013:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    501a:	b9 00 00 00 00       	mov    $0x0,%ecx
    501f:	ba 00 00 00 00       	mov    $0x0,%edx
    5024:	48 89 c7             	mov    %rax,%rdi
    5027:	e8 00 00 00 00       	callq  502c <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x2d8>
    502c:	89 85 98 fe ff ff    	mov    %eax,-0x168(%rbp)
    5032:	83 bd 98 fe ff ff 00 	cmpl   $0x0,-0x168(%rbp)
    5039:	0f 88 ea 02 00 00    	js     5329 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5d5>

        line = whatLine(str_copy, lineBase + i) + 1;
    503f:	8b 95 88 fe ff ff    	mov    -0x178(%rbp),%edx
    5045:	8b 85 98 fe ff ff    	mov    -0x168(%rbp),%eax
    504b:	8d 1c 02             	lea    (%rdx,%rax,1),%ebx
    504e:	48 8d 95 e0 fe ff ff 	lea    -0x120(%rbp),%rdx
    5055:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    5059:	48 89 d6             	mov    %rdx,%rsi
    505c:	48 89 c7             	mov    %rax,%rdi
    505f:	e8 00 00 00 00       	callq  5064 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x310>
    5064:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
    5068:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
    506f:	89 da                	mov    %ebx,%edx
    5071:	48 89 ce             	mov    %rcx,%rsi
    5074:	48 89 c7             	mov    %rax,%rdi
    5077:	e8 00 00 00 00       	callq  507c <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x328>
    507c:	83 c0 01             	add    $0x1,%eax
    507f:	89 85 9c fe ff ff    	mov    %eax,-0x164(%rbp)
    5085:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    5089:	48 89 c7             	mov    %rax,%rdi
    508c:	e8 00 00 00 00       	callq  5091 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x33d>
        blockName = classRE.cap(1);
    5091:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    5095:	48 8d 8d c0 fe ff ff 	lea    -0x140(%rbp),%rcx
    509c:	ba 01 00 00 00       	mov    $0x1,%edx
    50a1:	48 89 ce             	mov    %rcx,%rsi
    50a4:	48 89 c7             	mov    %rax,%rdi
    50a7:	e8 00 00 00 00       	callq  50ac <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x358>
    50ac:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    50b0:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    50b7:	48 89 d6             	mov    %rdx,%rsi
    50ba:	48 89 c7             	mov    %rax,%rdi
    50bd:	e8 00 00 00 00       	callq  50c2 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x36e>
    50c2:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    50c6:	48 89 c7             	mov    %rax,%rdi
    50c9:	e8 00 00 00 00       	callq  50ce <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x37a>
        int j = str.indexOf('{',i);
    50ce:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    50d2:	be 7b 00 00 00       	mov    $0x7b,%esi
    50d7:	48 89 c7             	mov    %rax,%rdi
    50da:	e8 00 00 00 00       	callq  50df <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x38b>
    50df:	8b 95 98 fe ff ff    	mov    -0x168(%rbp),%edx
    50e5:	0f b7 75 d0          	movzwl -0x30(%rbp),%esi
    50e9:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    50f0:	b9 01 00 00 00       	mov    $0x1,%ecx
    50f5:	48 89 c7             	mov    %rax,%rdi
    50f8:	e8 00 00 00 00       	callq  50fd <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x3a9>
    50fd:	89 85 8c fe ff ff    	mov    %eax,-0x174(%rbp)

        qc = str[j];
    5103:	8b 95 8c fe ff ff    	mov    -0x174(%rbp),%edx
    5109:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    5110:	89 d6                	mov    %edx,%esi
    5112:	48 89 c7             	mov    %rax,%rdi
    5115:	e8 00 00 00 00       	callq  511a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x3c6>
    511a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    511e:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    5122:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5126:	48 89 c7             	mov    %rax,%rdi
    5129:	e8 00 00 00 00       	callq  512e <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x3da>
    512e:	66 89 85 80 fe ff ff 	mov    %ax,-0x180(%rbp)

        int bl=1;
    5135:	c7 85 90 fe ff ff 01 	movl   $0x1,-0x170(%rbp)
    513c:	00 00 00 
        int br=0;
    513f:	c7 85 94 fe ff ff 00 	movl   $0x0,-0x16c(%rbp)
    5146:	00 00 00 

        while(bl != br)
    5149:	8b 85 90 fe ff ff    	mov    -0x170(%rbp),%eax
    514f:	3b 85 94 fe ff ff    	cmp    -0x16c(%rbp),%eax
    5155:	0f 84 a2 00 00 00    	je     51fd <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x4a9>
        {
            j++;
    515b:	83 85 8c fe ff ff 01 	addl   $0x1,-0x174(%rbp)
            qc = str[j];
    5162:	8b 95 8c fe ff ff    	mov    -0x174(%rbp),%edx
    5168:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    516f:	89 d6                	mov    %edx,%esi
    5171:	48 89 c7             	mov    %rax,%rdi
    5174:	e8 00 00 00 00       	callq  5179 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x425>
    5179:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    517d:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    5181:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5185:	48 89 c7             	mov    %rax,%rdi
    5188:	e8 00 00 00 00       	callq  518d <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x439>
    518d:	66 89 85 80 fe ff ff 	mov    %ax,-0x180(%rbp)
            if(qc=='{') bl++;
    5194:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5198:	be 7b 00 00 00       	mov    $0x7b,%esi
    519d:	48 89 c7             	mov    %rax,%rdi
    51a0:	e8 00 00 00 00       	callq  51a5 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x451>
    51a5:	0f b7 55 d0          	movzwl -0x30(%rbp),%edx
    51a9:	0f b7 85 80 fe ff ff 	movzwl -0x180(%rbp),%eax
    51b0:	89 d6                	mov    %edx,%esi
    51b2:	89 c7                	mov    %eax,%edi
    51b4:	e8 00 00 00 00       	callq  51b9 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x465>
    51b9:	84 c0                	test   %al,%al
    51bb:	74 07                	je     51c4 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x470>
    51bd:	83 85 90 fe ff ff 01 	addl   $0x1,-0x170(%rbp)
            if(qc=='}') br++;
    51c4:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    51c8:	be 7d 00 00 00       	mov    $0x7d,%esi
    51cd:	48 89 c7             	mov    %rax,%rdi
    51d0:	e8 00 00 00 00       	callq  51d5 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x481>
    51d5:	0f b7 55 d0          	movzwl -0x30(%rbp),%edx
    51d9:	0f b7 85 80 fe ff ff 	movzwl -0x180(%rbp),%eax
    51e0:	89 d6                	mov    %edx,%esi
    51e2:	89 c7                	mov    %eax,%edi
    51e4:	e8 00 00 00 00       	callq  51e9 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x495>
    51e9:	84 c0                	test   %al,%al
    51eb:	0f 84 58 ff ff ff    	je     5149 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x3f5>
    51f1:	83 85 94 fe ff ff 01 	addl   $0x1,-0x16c(%rbp)
        qc = str[j];

        int bl=1;
        int br=0;

        while(bl != br)
    51f8:	e9 4c ff ff ff       	jmpq   5149 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x3f5>
            qc = str[j];
            if(qc=='{') bl++;
            if(qc=='}') br++;
        }

        block = str.mid(i,j-i);
    51fd:	8b 85 8c fe ff ff    	mov    -0x174(%rbp),%eax
    5203:	2b 85 98 fe ff ff    	sub    -0x168(%rbp),%eax
    5209:	89 c1                	mov    %eax,%ecx
    520b:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    520f:	8b 95 98 fe ff ff    	mov    -0x168(%rbp),%edx
    5215:	48 8d b5 d0 fe ff ff 	lea    -0x130(%rbp),%rsi
    521c:	48 89 c7             	mov    %rax,%rdi
    521f:	e8 00 00 00 00       	callq  5224 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x4d0>
    5224:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    5228:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    522f:	48 89 d6             	mov    %rdx,%rsi
    5232:	48 89 c7             	mov    %rax,%rdi
    5235:	e8 00 00 00 00       	callq  523a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x4e6>
    523a:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    523e:	48 89 c7             	mov    %rax,%rdi
    5241:	e8 00 00 00 00       	callq  5246 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x4f2>
        allStrings = block.split("\n");
    5246:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    524a:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5251 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x4fd>
    5251:	48 89 c7             	mov    %rax,%rdi
    5254:	e8 00 00 00 00       	callq  5259 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x505>
    5259:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    525d:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    5261:	48 8d b5 f0 fe ff ff 	lea    -0x110(%rbp),%rsi
    5268:	41 b8 01 00 00 00    	mov    $0x1,%r8d
    526e:	b9 00 00 00 00       	mov    $0x0,%ecx
    5273:	48 89 c7             	mov    %rax,%rdi
    5276:	e8 00 00 00 00       	callq  527b <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x527>
    527b:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    527f:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    5286:	48 89 d6             	mov    %rdx,%rsi
    5289:	48 89 c7             	mov    %rax,%rdi
    528c:	e8 00 00 00 00       	callq  5291 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x53d>
    5291:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    5295:	48 89 c7             	mov    %rax,%rdi
    5298:	e8 00 00 00 00       	callq  529d <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x549>
    529d:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    52a1:	48 89 c7             	mov    %rax,%rdi
    52a4:	e8 00 00 00 00       	callq  52a9 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x555>

        result->insert(blockName, allStrings); // Here.
    52a9:	48 8d 95 b0 fe ff ff 	lea    -0x150(%rbp),%rdx
    52b0:	48 8d 8d 10 ff ff ff 	lea    -0xf0(%rbp),%rcx
    52b7:	48 8b 85 68 fe ff ff 	mov    -0x198(%rbp),%rax
    52be:	48 89 ce             	mov    %rcx,%rsi
    52c1:	48 89 c7             	mov    %rax,%rdi
    52c4:	e8 00 00 00 00       	callq  52c9 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x575>



        str = str.right(str.length()-j);
    52c9:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    52d0:	48 89 c7             	mov    %rax,%rdi
    52d3:	e8 00 00 00 00       	callq  52d8 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x584>
    52d8:	2b 85 8c fe ff ff    	sub    -0x174(%rbp),%eax
    52de:	89 c2                	mov    %eax,%edx
    52e0:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    52e4:	48 8d 8d d0 fe ff ff 	lea    -0x130(%rbp),%rcx
    52eb:	48 89 ce             	mov    %rcx,%rsi
    52ee:	48 89 c7             	mov    %rax,%rdi
    52f1:	e8 00 00 00 00       	callq  52f6 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5a2>
    52f6:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    52fa:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    5301:	48 89 d6             	mov    %rdx,%rsi
    5304:	48 89 c7             	mov    %rax,%rdi
    5307:	e8 00 00 00 00       	callq  530c <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5b8>
    530c:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5310:	48 89 c7             	mov    %rax,%rdi
    5313:	e8 00 00 00 00       	callq  5318 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5c4>
        lineBase += j;
    5318:	8b 85 8c fe ff ff    	mov    -0x174(%rbp),%eax
    531e:	01 85 88 fe ff ff    	add    %eax,-0x178(%rbp)

    if(BCL!=BCR){
        pe("Err. 2: Brakes () are not pair.");
        return;}

    while(1==1)
    5324:	e9 e3 fc ff ff       	jmpq   500c <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x2b8>
    {
        i = classRE.indexIn(str);if(i<0)return;
    5329:	90                   	nop

    QString str  = *code;
    QString str_copy = str;
    QString block;
    QString excess;         // то что находится до регулярки
    QString blockName;
    532a:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    5331:	48 89 c7             	mov    %rax,%rdi
    5334:	e8 00 00 00 00       	callq  5339 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5e5>
    QRegExp classRE(regExp);

    QString str  = *code;
    QString str_copy = str;
    QString block;
    QString excess;         // то что находится до регулярки
    5339:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    5340:	48 89 c7             	mov    %rax,%rdi
    5343:	e8 00 00 00 00       	callq  5348 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x5f4>
    QStringList allStrings;
    QRegExp classRE(regExp);

    QString str  = *code;
    QString str_copy = str;
    QString block;
    5348:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    534f:	48 89 c7             	mov    %rax,%rdi
    5352:	e8 00 00 00 00       	callq  5357 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x603>
{
    QStringList allStrings;
    QRegExp classRE(regExp);

    QString str  = *code;
    QString str_copy = str;
    5357:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    535e:	48 89 c7             	mov    %rax,%rdi
    5361:	e8 00 00 00 00       	callq  5366 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x612>
// inherit copypasted code from splitBlocks(..)
{
    QStringList allStrings;
    QRegExp classRE(regExp);

    QString str  = *code;
    5366:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    536d:	48 89 c7             	mov    %rax,%rdi
    5370:	e8 00 00 00 00       	callq  5375 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x621>

void Parser::classify(QString *code, QHash<QString, QStringList> *result, QString regExp)
// inherit copypasted code from splitBlocks(..)
{
    QStringList allStrings;
    QRegExp classRE(regExp);
    5375:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    537c:	48 89 c7             	mov    %rax,%rdi
    537f:	e8 00 00 00 00       	callq  5384 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x630>


void Parser::classify(QString *code, QHash<QString, QStringList> *result, QString regExp)
// inherit copypasted code from splitBlocks(..)
{
    QStringList allStrings;
    5384:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    538b:	48 89 c7             	mov    %rax,%rdi
    538e:	e8 00 00 00 00       	callq  5393 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x63f>
        lineBase += j;
        /*// deprecated
        this->Blocks.append(block);//
        *///
   }
}
    5393:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5397:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    539e:	00 00 
    53a0:	0f 84 89 01 00 00    	je     552f <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7db>
    53a6:	e9 7f 01 00 00       	jmpq   552a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7d6>
    53ab:	48 89 c3             	mov    %rax,%rbx

    int     i        = 0;
    int     lineBase = 0;
    int     line     = 0;

    unsigned int BFL = str.count("{");
    53ae:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    53b5:	48 89 c7             	mov    %rax,%rdi
    53b8:	e8 00 00 00 00       	callq  53bd <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x669>
    53bd:	e9 d6 00 00 00       	jmpq   5498 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    53c2:	48 89 c3             	mov    %rax,%rbx
    unsigned int BFR = str.count("}");
    53c5:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    53cc:	48 89 c7             	mov    %rax,%rdi
    53cf:	e8 00 00 00 00       	callq  53d4 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x680>
    53d4:	e9 bf 00 00 00       	jmpq   5498 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    53d9:	48 89 c3             	mov    %rax,%rbx
    unsigned int BCL = str.count("(");
    53dc:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    53e3:	48 89 c7             	mov    %rax,%rdi
    53e6:	e8 00 00 00 00       	callq  53eb <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x697>
    53eb:	e9 a8 00 00 00       	jmpq   5498 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    53f0:	48 89 c3             	mov    %rax,%rbx
    unsigned int BCR = str.count(")");
    53f3:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    53fa:	48 89 c7             	mov    %rax,%rdi
    53fd:	e8 00 00 00 00       	callq  5402 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x6ae>
    5402:	e9 91 00 00 00       	jmpq   5498 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    5407:	48 89 c3             	mov    %rax,%rbx

    if(BFL!=BFR){
        pe("Err. 1: Brakes {} are not pair.");
    540a:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    5411:	48 89 c7             	mov    %rax,%rdi
    5414:	e8 00 00 00 00       	callq  5419 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x6c5>
    5419:	eb 7d                	jmp    5498 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    541b:	48 89 c3             	mov    %rax,%rbx
        return;}

    if(BCL!=BCR){
        pe("Err. 2: Brakes () are not pair.");
    541e:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    5425:	48 89 c7             	mov    %rax,%rdi
    5428:	e8 00 00 00 00       	callq  542d <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x6d9>
    542d:	eb 69                	jmp    5498 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    542f:	48 89 c3             	mov    %rax,%rbx

    while(1==1)
    {
        i = classRE.indexIn(str);if(i<0)return;

        line = whatLine(str_copy, lineBase + i) + 1;
    5432:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    5436:	48 89 c7             	mov    %rax,%rdi
    5439:	e8 00 00 00 00       	callq  543e <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x6ea>
    543e:	eb 58                	jmp    5498 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    5440:	48 89 c3             	mov    %rax,%rbx
        blockName = classRE.cap(1);
    5443:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    5447:	48 89 c7             	mov    %rax,%rdi
    544a:	e8 00 00 00 00       	callq  544f <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x6fb>
    544f:	eb 47                	jmp    5498 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    5451:	48 89 c3             	mov    %rax,%rbx
            qc = str[j];
            if(qc=='{') bl++;
            if(qc=='}') br++;
        }

        block = str.mid(i,j-i);
    5454:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    5458:	48 89 c7             	mov    %rax,%rdi
    545b:	e8 00 00 00 00       	callq  5460 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x70c>
    5460:	eb 36                	jmp    5498 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    5462:	48 89 c3             	mov    %rax,%rbx
        allStrings = block.split("\n");
    5465:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    5469:	48 89 c7             	mov    %rax,%rdi
    546c:	e8 00 00 00 00       	callq  5471 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x71d>
    5471:	eb 03                	jmp    5476 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x722>
    5473:	48 89 c3             	mov    %rax,%rbx
    5476:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    547a:	48 89 c7             	mov    %rax,%rdi
    547d:	e8 00 00 00 00       	callq  5482 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x72e>
    5482:	eb 14                	jmp    5498 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    5484:	48 89 c3             	mov    %rax,%rbx

        result->insert(blockName, allStrings); // Here.



        str = str.right(str.length()-j);
    5487:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    548b:	48 89 c7             	mov    %rax,%rdi
    548e:	e8 00 00 00 00       	callq  5493 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x73f>
    5493:	eb 03                	jmp    5498 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x744>
    5495:	48 89 c3             	mov    %rax,%rbx

    QString str  = *code;
    QString str_copy = str;
    QString block;
    QString excess;         // то что находится до регулярки
    QString blockName;
    5498:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    549f:	48 89 c7             	mov    %rax,%rdi
    54a2:	e8 00 00 00 00       	callq  54a7 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x753>
    54a7:	eb 03                	jmp    54ac <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x758>
    54a9:	48 89 c3             	mov    %rax,%rbx
    QRegExp classRE(regExp);

    QString str  = *code;
    QString str_copy = str;
    QString block;
    QString excess;         // то что находится до регулярки
    54ac:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    54b3:	48 89 c7             	mov    %rax,%rdi
    54b6:	e8 00 00 00 00       	callq  54bb <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x767>
    54bb:	eb 03                	jmp    54c0 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x76c>
    54bd:	48 89 c3             	mov    %rax,%rbx
    QStringList allStrings;
    QRegExp classRE(regExp);

    QString str  = *code;
    QString str_copy = str;
    QString block;
    54c0:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    54c7:	48 89 c7             	mov    %rax,%rdi
    54ca:	e8 00 00 00 00       	callq  54cf <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x77b>
    54cf:	eb 03                	jmp    54d4 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x780>
    54d1:	48 89 c3             	mov    %rax,%rbx
{
    QStringList allStrings;
    QRegExp classRE(regExp);

    QString str  = *code;
    QString str_copy = str;
    54d4:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    54db:	48 89 c7             	mov    %rax,%rdi
    54de:	e8 00 00 00 00       	callq  54e3 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x78f>
    54e3:	eb 03                	jmp    54e8 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x794>
    54e5:	48 89 c3             	mov    %rax,%rbx
// inherit copypasted code from splitBlocks(..)
{
    QStringList allStrings;
    QRegExp classRE(regExp);

    QString str  = *code;
    54e8:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    54ef:	48 89 c7             	mov    %rax,%rdi
    54f2:	e8 00 00 00 00       	callq  54f7 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7a3>
    54f7:	eb 03                	jmp    54fc <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7a8>
    54f9:	48 89 c3             	mov    %rax,%rbx

void Parser::classify(QString *code, QHash<QString, QStringList> *result, QString regExp)
// inherit copypasted code from splitBlocks(..)
{
    QStringList allStrings;
    QRegExp classRE(regExp);
    54fc:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    5503:	48 89 c7             	mov    %rax,%rdi
    5506:	e8 00 00 00 00       	callq  550b <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7b7>
    550b:	eb 03                	jmp    5510 <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7bc>
    550d:	48 89 c3             	mov    %rax,%rbx


void Parser::classify(QString *code, QHash<QString, QStringList> *result, QString regExp)
// inherit copypasted code from splitBlocks(..)
{
    QStringList allStrings;
    5510:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    5517:	48 89 c7             	mov    %rax,%rdi
    551a:	e8 00 00 00 00       	callq  551f <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7cb>
    551f:	48 89 d8             	mov    %rbx,%rax
    5522:	48 89 c7             	mov    %rax,%rdi
    5525:	e8 00 00 00 00       	callq  552a <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7d6>
        lineBase += j;
        /*// deprecated
        this->Blocks.append(block);//
        *///
   }
}
    552a:	e8 00 00 00 00       	callq  552f <_ZN6Parser8classifyEP7QStringP5QHashIS0_11QStringListES0_+0x7db>
    552f:	48 81 c4 98 01 00 00 	add    $0x198,%rsp
    5536:	5b                   	pop    %rbx
    5537:	5d                   	pop    %rbp
    5538:	c3                   	retq   
    5539:	90                   	nop

000000000000553a <_ZN6Parser8whatLineE7QStringi>:

int Parser::whatLine(QString text, int position)
{
    553a:	55                   	push   %rbp
    553b:	48 89 e5             	mov    %rsp,%rbp
    553e:	53                   	push   %rbx
    553f:	48 83 ec 38          	sub    $0x38,%rsp
    5543:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    5547:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    554b:	89 55 cc             	mov    %edx,-0x34(%rbp)
    554e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    5555:	00 00 
    5557:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    555b:	31 c0                	xor    %eax,%eax
    text = text.left(position);
    555d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5561:	8b 55 cc             	mov    -0x34(%rbp),%edx
    5564:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    5568:	48 89 ce             	mov    %rcx,%rsi
    556b:	48 89 c7             	mov    %rax,%rdi
    556e:	e8 00 00 00 00       	callq  5573 <_ZN6Parser8whatLineE7QStringi+0x39>
    5573:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    5577:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    557b:	48 89 d6             	mov    %rdx,%rsi
    557e:	48 89 c7             	mov    %rax,%rdi
    5581:	e8 00 00 00 00       	callq  5586 <_ZN6Parser8whatLineE7QStringi+0x4c>
    5586:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    558a:	48 89 c7             	mov    %rax,%rdi
    558d:	e8 00 00 00 00       	callq  5592 <_ZN6Parser8whatLineE7QStringi+0x58>
    return text.count("\n"); // т.к. перед первой строкой нет перевода строки, но это уже одна строка.
    5592:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5596:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 559d <_ZN6Parser8whatLineE7QStringi+0x63>
    559d:	48 89 c7             	mov    %rax,%rdi
    55a0:	e8 00 00 00 00       	callq  55a5 <_ZN6Parser8whatLineE7QStringi+0x6b>
    55a5:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
    55a9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    55ad:	ba 01 00 00 00       	mov    $0x1,%edx
    55b2:	48 89 ce             	mov    %rcx,%rsi
    55b5:	48 89 c7             	mov    %rax,%rdi
    55b8:	e8 00 00 00 00       	callq  55bd <_ZN6Parser8whatLineE7QStringi+0x83>
    55bd:	89 c3                	mov    %eax,%ebx
    55bf:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    55c3:	48 89 c7             	mov    %rax,%rdi
    55c6:	e8 00 00 00 00       	callq  55cb <_ZN6Parser8whatLineE7QStringi+0x91>
    55cb:	89 d8                	mov    %ebx,%eax
}
    55cd:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    55d1:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    55d8:	00 00 
    55da:	74 3b                	je     5617 <_ZN6Parser8whatLineE7QStringi+0xdd>
    55dc:	eb 34                	jmp    5612 <_ZN6Parser8whatLineE7QStringi+0xd8>
    55de:	48 89 c3             	mov    %rax,%rbx
   }
}

int Parser::whatLine(QString text, int position)
{
    text = text.left(position);
    55e1:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    55e5:	48 89 c7             	mov    %rax,%rdi
    55e8:	e8 00 00 00 00       	callq  55ed <_ZN6Parser8whatLineE7QStringi+0xb3>
    55ed:	48 89 d8             	mov    %rbx,%rax
    55f0:	48 89 c7             	mov    %rax,%rdi
    55f3:	e8 00 00 00 00       	callq  55f8 <_ZN6Parser8whatLineE7QStringi+0xbe>
    55f8:	48 89 c3             	mov    %rax,%rbx
    return text.count("\n"); // т.к. перед первой строкой нет перевода строки, но это уже одна строка.
    55fb:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    55ff:	48 89 c7             	mov    %rax,%rdi
    5602:	e8 00 00 00 00       	callq  5607 <_ZN6Parser8whatLineE7QStringi+0xcd>
    5607:	48 89 d8             	mov    %rbx,%rax
    560a:	48 89 c7             	mov    %rax,%rdi
    560d:	e8 00 00 00 00       	callq  5612 <_ZN6Parser8whatLineE7QStringi+0xd8>
}
    5612:	e8 00 00 00 00       	callq  5617 <_ZN6Parser8whatLineE7QStringi+0xdd>
    5617:	48 83 c4 38          	add    $0x38,%rsp
    561b:	5b                   	pop    %rbx
    561c:	5d                   	pop    %rbp
    561d:	c3                   	retq   

000000000000561e <_ZN6Parser15temporary_greenEv>:

void Parser::temporary_green()
{
    561e:	55                   	push   %rbp
    561f:	48 89 e5             	mov    %rsp,%rbp
    5622:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)

}
    5626:	90                   	nop
    5627:	5d                   	pop    %rbp
    5628:	c3                   	retq   
    5629:	90                   	nop

000000000000562a <_ZN6Parser8saveLogsE7QStringS0_>:

void Parser::saveLogs(QString code, QString result)
{
    562a:	55                   	push   %rbp
    562b:	48 89 e5             	mov    %rsp,%rbp
    562e:	53                   	push   %rbx
    562f:	48 81 ec b8 01 00 00 	sub    $0x1b8,%rsp
    5636:	48 89 bd 58 fe ff ff 	mov    %rdi,-0x1a8(%rbp)
    563d:	48 89 b5 50 fe ff ff 	mov    %rsi,-0x1b0(%rbp)
    5644:	48 89 95 48 fe ff ff 	mov    %rdx,-0x1b8(%rbp)
    564b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    5652:	00 00 
    5654:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    5658:	31 c0                	xor    %eax,%eax
    QString fileName1 = "log_result.txt";
    565a:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    5661:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5668 <_ZN6Parser8saveLogsE7QStringS0_+0x3e>
    5668:	48 89 c7             	mov    %rax,%rdi
    566b:	e8 00 00 00 00       	callq  5670 <_ZN6Parser8saveLogsE7QStringS0_+0x46>
    QString fileName2 = "log_errors.txt";
    5670:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    5677:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 567e <_ZN6Parser8saveLogsE7QStringS0_+0x54>
    567e:	48 89 c7             	mov    %rax,%rdi
    5681:	e8 00 00 00 00       	callq  5686 <_ZN6Parser8saveLogsE7QStringS0_+0x5c>

    QString log1 = code;
    5686:	48 8b 95 50 fe ff ff 	mov    -0x1b0(%rbp),%rdx
    568d:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    5694:	48 89 d6             	mov    %rdx,%rsi
    5697:	48 89 c7             	mov    %rax,%rdi
    569a:	e8 00 00 00 00       	callq  569f <_ZN6Parser8saveLogsE7QStringS0_+0x75>
    QString log2 = result;
    569f:	48 8b 95 48 fe ff ff 	mov    -0x1b8(%rbp),%rdx
    56a6:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    56ad:	48 89 d6             	mov    %rdx,%rsi
    56b0:	48 89 c7             	mov    %rax,%rdi
    56b3:	e8 00 00 00 00       	callq  56b8 <_ZN6Parser8saveLogsE7QStringS0_+0x8e>

    log1.replace("\n","\r\n");
    56b8:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    56bf:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 56c6 <_ZN6Parser8saveLogsE7QStringS0_+0x9c>
    56c6:	48 89 c7             	mov    %rax,%rdi
    56c9:	e8 00 00 00 00       	callq  56ce <_ZN6Parser8saveLogsE7QStringS0_+0xa4>
    56ce:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    56d5:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 56dc <_ZN6Parser8saveLogsE7QStringS0_+0xb2>
    56dc:	48 89 c7             	mov    %rax,%rdi
    56df:	e8 00 00 00 00       	callq  56e4 <_ZN6Parser8saveLogsE7QStringS0_+0xba>
    56e4:	48 8d 95 e0 fe ff ff 	lea    -0x120(%rbp),%rdx
    56eb:	48 8d b5 d0 fe ff ff 	lea    -0x130(%rbp),%rsi
    56f2:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    56f9:	b9 01 00 00 00       	mov    $0x1,%ecx
    56fe:	48 89 c7             	mov    %rax,%rdi
    5701:	e8 00 00 00 00       	callq  5706 <_ZN6Parser8saveLogsE7QStringS0_+0xdc>
    5706:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    570d:	48 89 c7             	mov    %rax,%rdi
    5710:	e8 00 00 00 00       	callq  5715 <_ZN6Parser8saveLogsE7QStringS0_+0xeb>
    5715:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    571c:	48 89 c7             	mov    %rax,%rdi
    571f:	e8 00 00 00 00       	callq  5724 <_ZN6Parser8saveLogsE7QStringS0_+0xfa>
    log2.replace("\n","\r\n");
    5724:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    572b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5732 <_ZN6Parser8saveLogsE7QStringS0_+0x108>
    5732:	48 89 c7             	mov    %rax,%rdi
    5735:	e8 00 00 00 00       	callq  573a <_ZN6Parser8saveLogsE7QStringS0_+0x110>
    573a:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    5741:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5748 <_ZN6Parser8saveLogsE7QStringS0_+0x11e>
    5748:	48 89 c7             	mov    %rax,%rdi
    574b:	e8 00 00 00 00       	callq  5750 <_ZN6Parser8saveLogsE7QStringS0_+0x126>
    5750:	48 8d 95 00 ff ff ff 	lea    -0x100(%rbp),%rdx
    5757:	48 8d b5 f0 fe ff ff 	lea    -0x110(%rbp),%rsi
    575e:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    5765:	b9 01 00 00 00       	mov    $0x1,%ecx
    576a:	48 89 c7             	mov    %rax,%rdi
    576d:	e8 00 00 00 00       	callq  5772 <_ZN6Parser8saveLogsE7QStringS0_+0x148>
    5772:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    5779:	48 89 c7             	mov    %rax,%rdi
    577c:	e8 00 00 00 00       	callq  5781 <_ZN6Parser8saveLogsE7QStringS0_+0x157>
    5781:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    5788:	48 89 c7             	mov    %rax,%rdi
    578b:	e8 00 00 00 00       	callq  5790 <_ZN6Parser8saveLogsE7QStringS0_+0x166>

    QFile file1(fileName1);
    5790:	48 8d 95 90 fe ff ff 	lea    -0x170(%rbp),%rdx
    5797:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    579b:	48 89 d6             	mov    %rdx,%rsi
    579e:	48 89 c7             	mov    %rax,%rdi
    57a1:	e8 00 00 00 00       	callq  57a6 <_ZN6Parser8saveLogsE7QStringS0_+0x17c>
    QFile file2(fileName2);
    57a6:	48 8d 95 a0 fe ff ff 	lea    -0x160(%rbp),%rdx
    57ad:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    57b1:	48 89 d6             	mov    %rdx,%rsi
    57b4:	48 89 c7             	mov    %rax,%rdi
    57b7:	e8 00 00 00 00       	callq  57bc <_ZN6Parser8saveLogsE7QStringS0_+0x192>

    QFile::OpenMode FileMode1 = QIODevice::WriteOnly;
    57bc:	48 8d 85 60 fe ff ff 	lea    -0x1a0(%rbp),%rax
    57c3:	be 02 00 00 00       	mov    $0x2,%esi
    57c8:	48 89 c7             	mov    %rax,%rdi
    57cb:	e8 00 00 00 00       	callq  57d0 <_ZN6Parser8saveLogsE7QStringS0_+0x1a6>
    QFile::OpenMode FileMode2 = QIODevice::WriteOnly;
    57d0:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
    57d7:	be 02 00 00 00       	mov    $0x2,%esi
    57dc:	48 89 c7             	mov    %rax,%rdi
    57df:	e8 00 00 00 00       	callq  57e4 <_ZN6Parser8saveLogsE7QStringS0_+0x1ba>

    if(file1.exists(fileName1)) FileMode1 = QIODevice::Append;
    57e4:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    57eb:	48 89 c7             	mov    %rax,%rdi
    57ee:	e8 00 00 00 00       	callq  57f3 <_ZN6Parser8saveLogsE7QStringS0_+0x1c9>
    57f3:	84 c0                	test   %al,%al
    57f5:	74 1a                	je     5811 <_ZN6Parser8saveLogsE7QStringS0_+0x1e7>
    57f7:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    57fb:	be 04 00 00 00       	mov    $0x4,%esi
    5800:	48 89 c7             	mov    %rax,%rdi
    5803:	e8 00 00 00 00       	callq  5808 <_ZN6Parser8saveLogsE7QStringS0_+0x1de>
    5808:	8b 45 d0             	mov    -0x30(%rbp),%eax
    580b:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%rbp)
    if(file2.exists(fileName2)) FileMode2 = QIODevice::Append;
    5811:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    5818:	48 89 c7             	mov    %rax,%rdi
    581b:	e8 00 00 00 00       	callq  5820 <_ZN6Parser8saveLogsE7QStringS0_+0x1f6>
    5820:	84 c0                	test   %al,%al
    5822:	74 1a                	je     583e <_ZN6Parser8saveLogsE7QStringS0_+0x214>
    5824:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5828:	be 04 00 00 00       	mov    $0x4,%esi
    582d:	48 89 c7             	mov    %rax,%rdi
    5830:	e8 00 00 00 00       	callq  5835 <_ZN6Parser8saveLogsE7QStringS0_+0x20b>
    5835:	8b 45 d0             	mov    -0x30(%rbp),%eax
    5838:	89 85 70 fe ff ff    	mov    %eax,-0x190(%rbp)

    file1.open(FileMode1);
    583e:	8b 95 60 fe ff ff    	mov    -0x1a0(%rbp),%edx
    5844:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    5848:	89 d6                	mov    %edx,%esi
    584a:	48 89 c7             	mov    %rax,%rdi
    584d:	e8 00 00 00 00       	callq  5852 <_ZN6Parser8saveLogsE7QStringS0_+0x228>
    file2.open(FileMode2);
    5852:	8b 95 70 fe ff ff    	mov    -0x190(%rbp),%edx
    5858:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    585c:	89 d6                	mov    %edx,%esi
    585e:	48 89 c7             	mov    %rax,%rdi
    5861:	e8 00 00 00 00       	callq  5866 <_ZN6Parser8saveLogsE7QStringS0_+0x23c>

    QTextStream stream1(&file1);
    5866:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    586a:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    586e:	48 89 d6             	mov    %rdx,%rsi
    5871:	48 89 c7             	mov    %rax,%rdi
    5874:	e8 00 00 00 00       	callq  5879 <_ZN6Parser8saveLogsE7QStringS0_+0x24f>
    QTextStream stream2(&file2);
    5879:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    587d:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5881:	48 89 d6             	mov    %rdx,%rsi
    5884:	48 89 c7             	mov    %rax,%rdi
    5887:	e8 00 00 00 00       	callq  588c <_ZN6Parser8saveLogsE7QStringS0_+0x262>

    QDate date = QDate::currentDate();
    588c:	e8 00 00 00 00       	callq  5891 <_ZN6Parser8saveLogsE7QStringS0_+0x267>
    5891:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
    QTime time = QTime::currentTime();
    5898:	e8 00 00 00 00       	callq  589d <_ZN6Parser8saveLogsE7QStringS0_+0x273>
    589d:	89 85 80 fe ff ff    	mov    %eax,-0x180(%rbp)
    QString date_str = date.toString() + " " + time.toString();
    58a3:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    58aa:	48 8d 8d 80 fe ff ff 	lea    -0x180(%rbp),%rcx
    58b1:	ba 00 00 00 00       	mov    $0x0,%edx
    58b6:	48 89 ce             	mov    %rcx,%rsi
    58b9:	48 89 c7             	mov    %rax,%rdi
    58bc:	e8 00 00 00 00       	callq  58c1 <_ZN6Parser8saveLogsE7QStringS0_+0x297>
    58c1:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    58c8:	48 8d 8d 10 ff ff ff 	lea    -0xf0(%rbp),%rcx
    58cf:	ba 00 00 00 00       	mov    $0x0,%edx
    58d4:	48 89 ce             	mov    %rcx,%rsi
    58d7:	48 89 c7             	mov    %rax,%rdi
    58da:	e8 00 00 00 00       	callq  58df <_ZN6Parser8saveLogsE7QStringS0_+0x2b5>
    58df:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    58e6:	48 8d 8d 30 ff ff ff 	lea    -0xd0(%rbp),%rcx
    58ed:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 58f4 <_ZN6Parser8saveLogsE7QStringS0_+0x2ca>
    58f4:	48 89 ce             	mov    %rcx,%rsi
    58f7:	48 89 c7             	mov    %rax,%rdi
    58fa:	e8 00 00 00 00       	callq  58ff <_ZN6Parser8saveLogsE7QStringS0_+0x2d5>
    58ff:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    5906:	48 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%rdx
    590d:	48 8d 8d 40 ff ff ff 	lea    -0xc0(%rbp),%rcx
    5914:	48 89 ce             	mov    %rcx,%rsi
    5917:	48 89 c7             	mov    %rax,%rdi
    591a:	e8 00 00 00 00       	callq  591f <_ZN6Parser8saveLogsE7QStringS0_+0x2f5>
    591f:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    5926:	48 89 c7             	mov    %rax,%rdi
    5929:	e8 00 00 00 00       	callq  592e <_ZN6Parser8saveLogsE7QStringS0_+0x304>
    592e:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    5935:	48 89 c7             	mov    %rax,%rdi
    5938:	e8 00 00 00 00       	callq  593d <_ZN6Parser8saveLogsE7QStringS0_+0x313>
    593d:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    5944:	48 89 c7             	mov    %rax,%rdi
    5947:	e8 00 00 00 00       	callq  594c <_ZN6Parser8saveLogsE7QStringS0_+0x322>

    stream1 << "\r\n\r\n##### " + date_str + " #####\r\n";
    594c:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    5953:	48 8d 95 20 ff ff ff 	lea    -0xe0(%rbp),%rdx
    595a:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5961 <_ZN6Parser8saveLogsE7QStringS0_+0x337>
    5961:	48 89 c7             	mov    %rax,%rdi
    5964:	e8 00 00 00 00       	callq  5969 <_ZN6Parser8saveLogsE7QStringS0_+0x33f>
    5969:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    5970:	48 8d 8d 60 ff ff ff 	lea    -0xa0(%rbp),%rcx
    5977:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 597e <_ZN6Parser8saveLogsE7QStringS0_+0x354>
    597e:	48 89 ce             	mov    %rcx,%rsi
    5981:	48 89 c7             	mov    %rax,%rdi
    5984:	e8 00 00 00 00       	callq  5989 <_ZN6Parser8saveLogsE7QStringS0_+0x35f>
    5989:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    5990:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    5994:	48 89 d6             	mov    %rdx,%rsi
    5997:	48 89 c7             	mov    %rax,%rdi
    599a:	e8 00 00 00 00       	callq  599f <_ZN6Parser8saveLogsE7QStringS0_+0x375>
    599f:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    59a6:	48 89 c7             	mov    %rax,%rdi
    59a9:	e8 00 00 00 00       	callq  59ae <_ZN6Parser8saveLogsE7QStringS0_+0x384>
    59ae:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    59b5:	48 89 c7             	mov    %rax,%rdi
    59b8:	e8 00 00 00 00       	callq  59bd <_ZN6Parser8saveLogsE7QStringS0_+0x393>
    stream2 << "\r\n\r\n===== " + date_str + " =====\r\n";
    59bd:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    59c1:	48 8d 95 20 ff ff ff 	lea    -0xe0(%rbp),%rdx
    59c8:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 59cf <_ZN6Parser8saveLogsE7QStringS0_+0x3a5>
    59cf:	48 89 c7             	mov    %rax,%rdi
    59d2:	e8 00 00 00 00       	callq  59d7 <_ZN6Parser8saveLogsE7QStringS0_+0x3ad>
    59d7:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    59db:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
    59df:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 59e6 <_ZN6Parser8saveLogsE7QStringS0_+0x3bc>
    59e6:	48 89 ce             	mov    %rcx,%rsi
    59e9:	48 89 c7             	mov    %rax,%rdi
    59ec:	e8 00 00 00 00       	callq  59f1 <_ZN6Parser8saveLogsE7QStringS0_+0x3c7>
    59f1:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    59f5:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    59f9:	48 89 d6             	mov    %rdx,%rsi
    59fc:	48 89 c7             	mov    %rax,%rdi
    59ff:	e8 00 00 00 00       	callq  5a04 <_ZN6Parser8saveLogsE7QStringS0_+0x3da>
    5a04:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    5a08:	48 89 c7             	mov    %rax,%rdi
    5a0b:	e8 00 00 00 00       	callq  5a10 <_ZN6Parser8saveLogsE7QStringS0_+0x3e6>
    5a10:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    5a14:	48 89 c7             	mov    %rax,%rdi
    5a17:	e8 00 00 00 00       	callq  5a1c <_ZN6Parser8saveLogsE7QStringS0_+0x3f2>

    stream1 << log1;
    5a1c:	48 8d 95 b0 fe ff ff 	lea    -0x150(%rbp),%rdx
    5a23:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    5a27:	48 89 d6             	mov    %rdx,%rsi
    5a2a:	48 89 c7             	mov    %rax,%rdi
    5a2d:	e8 00 00 00 00       	callq  5a32 <_ZN6Parser8saveLogsE7QStringS0_+0x408>
    stream2 << log2;
    5a32:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
    5a39:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5a3d:	48 89 d6             	mov    %rdx,%rsi
    5a40:	48 89 c7             	mov    %rax,%rdi
    5a43:	e8 00 00 00 00       	callq  5a48 <_ZN6Parser8saveLogsE7QStringS0_+0x41e>

    file1.close();
    5a48:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    5a4c:	48 89 c7             	mov    %rax,%rdi
    5a4f:	e8 00 00 00 00       	callq  5a54 <_ZN6Parser8saveLogsE7QStringS0_+0x42a>
    file2.close();
    5a54:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    5a58:	48 89 c7             	mov    %rax,%rdi
    5a5b:	e8 00 00 00 00       	callq  5a60 <_ZN6Parser8saveLogsE7QStringS0_+0x436>
    QTextStream stream1(&file1);
    QTextStream stream2(&file2);

    QDate date = QDate::currentDate();
    QTime time = QTime::currentTime();
    QString date_str = date.toString() + " " + time.toString();
    5a60:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    5a67:	48 89 c7             	mov    %rax,%rdi
    5a6a:	e8 00 00 00 00       	callq  5a6f <_ZN6Parser8saveLogsE7QStringS0_+0x445>

    file1.open(FileMode1);
    file2.open(FileMode2);

    QTextStream stream1(&file1);
    QTextStream stream2(&file2);
    5a6f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5a73:	48 89 c7             	mov    %rax,%rdi
    5a76:	e8 00 00 00 00       	callq  5a7b <_ZN6Parser8saveLogsE7QStringS0_+0x451>
    if(file2.exists(fileName2)) FileMode2 = QIODevice::Append;

    file1.open(FileMode1);
    file2.open(FileMode2);

    QTextStream stream1(&file1);
    5a7b:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    5a7f:	48 89 c7             	mov    %rax,%rdi
    5a82:	e8 00 00 00 00       	callq  5a87 <_ZN6Parser8saveLogsE7QStringS0_+0x45d>

    log1.replace("\n","\r\n");
    log2.replace("\n","\r\n");

    QFile file1(fileName1);
    QFile file2(fileName2);
    5a87:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    5a8b:	48 89 c7             	mov    %rax,%rdi
    5a8e:	e8 00 00 00 00       	callq  5a93 <_ZN6Parser8saveLogsE7QStringS0_+0x469>
    QString log2 = result;

    log1.replace("\n","\r\n");
    log2.replace("\n","\r\n");

    QFile file1(fileName1);
    5a93:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    5a97:	48 89 c7             	mov    %rax,%rdi
    5a9a:	e8 00 00 00 00       	callq  5a9f <_ZN6Parser8saveLogsE7QStringS0_+0x475>
{
    QString fileName1 = "log_result.txt";
    QString fileName2 = "log_errors.txt";

    QString log1 = code;
    QString log2 = result;
    5a9f:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    5aa6:	48 89 c7             	mov    %rax,%rdi
    5aa9:	e8 00 00 00 00       	callq  5aae <_ZN6Parser8saveLogsE7QStringS0_+0x484>
void Parser::saveLogs(QString code, QString result)
{
    QString fileName1 = "log_result.txt";
    QString fileName2 = "log_errors.txt";

    QString log1 = code;
    5aae:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    5ab5:	48 89 c7             	mov    %rax,%rdi
    5ab8:	e8 00 00 00 00       	callq  5abd <_ZN6Parser8saveLogsE7QStringS0_+0x493>
}

void Parser::saveLogs(QString code, QString result)
{
    QString fileName1 = "log_result.txt";
    QString fileName2 = "log_errors.txt";
    5abd:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    5ac4:	48 89 c7             	mov    %rax,%rdi
    5ac7:	e8 00 00 00 00       	callq  5acc <_ZN6Parser8saveLogsE7QStringS0_+0x4a2>

}

void Parser::saveLogs(QString code, QString result)
{
    QString fileName1 = "log_result.txt";
    5acc:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    5ad3:	48 89 c7             	mov    %rax,%rdi
    5ad6:	e8 00 00 00 00       	callq  5adb <_ZN6Parser8saveLogsE7QStringS0_+0x4b1>
    stream1 << log1;
    stream2 << log2;

    file1.close();
    file2.close();
}
    5adb:	90                   	nop
    5adc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5ae0:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    5ae7:	00 00 
    5ae9:	0f 84 d3 01 00 00    	je     5cc2 <_ZN6Parser8saveLogsE7QStringS0_+0x698>
    5aef:	e9 c9 01 00 00       	jmpq   5cbd <_ZN6Parser8saveLogsE7QStringS0_+0x693>
    5af4:	48 89 c3             	mov    %rax,%rbx
    QString fileName2 = "log_errors.txt";

    QString log1 = code;
    QString log2 = result;

    log1.replace("\n","\r\n");
    5af7:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
    5afe:	48 89 c7             	mov    %rax,%rdi
    5b01:	e8 00 00 00 00       	callq  5b06 <_ZN6Parser8saveLogsE7QStringS0_+0x4dc>
    5b06:	eb 03                	jmp    5b0b <_ZN6Parser8saveLogsE7QStringS0_+0x4e1>
    5b08:	48 89 c3             	mov    %rax,%rbx
    5b0b:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
    5b12:	48 89 c7             	mov    %rax,%rdi
    5b15:	e8 00 00 00 00       	callq  5b1a <_ZN6Parser8saveLogsE7QStringS0_+0x4f0>
    5b1a:	e9 48 01 00 00       	jmpq   5c67 <_ZN6Parser8saveLogsE7QStringS0_+0x63d>
    5b1f:	48 89 c3             	mov    %rax,%rbx
    log2.replace("\n","\r\n");
    5b22:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
    5b29:	48 89 c7             	mov    %rax,%rdi
    5b2c:	e8 00 00 00 00       	callq  5b31 <_ZN6Parser8saveLogsE7QStringS0_+0x507>
    5b31:	eb 03                	jmp    5b36 <_ZN6Parser8saveLogsE7QStringS0_+0x50c>
    5b33:	48 89 c3             	mov    %rax,%rbx
    5b36:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    5b3d:	48 89 c7             	mov    %rax,%rdi
    5b40:	e8 00 00 00 00       	callq  5b45 <_ZN6Parser8saveLogsE7QStringS0_+0x51b>
    5b45:	e9 1d 01 00 00       	jmpq   5c67 <_ZN6Parser8saveLogsE7QStringS0_+0x63d>
    5b4a:	48 89 c3             	mov    %rax,%rbx
    5b4d:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    5b54:	48 89 c7             	mov    %rax,%rdi
    5b57:	e8 00 00 00 00       	callq  5b5c <_ZN6Parser8saveLogsE7QStringS0_+0x532>
    5b5c:	eb 17                	jmp    5b75 <_ZN6Parser8saveLogsE7QStringS0_+0x54b>
    5b5e:	48 89 c3             	mov    %rax,%rbx
    5b61:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    5b68:	48 89 c7             	mov    %rax,%rdi
    5b6b:	e8 00 00 00 00       	callq  5b70 <_ZN6Parser8saveLogsE7QStringS0_+0x546>
    5b70:	eb 03                	jmp    5b75 <_ZN6Parser8saveLogsE7QStringS0_+0x54b>
    5b72:	48 89 c3             	mov    %rax,%rbx
    5b75:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    5b7c:	48 89 c7             	mov    %rax,%rdi
    5b7f:	e8 00 00 00 00       	callq  5b84 <_ZN6Parser8saveLogsE7QStringS0_+0x55a>
    5b84:	eb 17                	jmp    5b9d <_ZN6Parser8saveLogsE7QStringS0_+0x573>
    5b86:	48 89 c3             	mov    %rax,%rbx
    5b89:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    5b90:	48 89 c7             	mov    %rax,%rdi
    5b93:	e8 00 00 00 00       	callq  5b98 <_ZN6Parser8saveLogsE7QStringS0_+0x56e>
    5b98:	eb 03                	jmp    5b9d <_ZN6Parser8saveLogsE7QStringS0_+0x573>
    5b9a:	48 89 c3             	mov    %rax,%rbx
    5b9d:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    5ba4:	48 89 c7             	mov    %rax,%rdi
    5ba7:	e8 00 00 00 00       	callq  5bac <_ZN6Parser8saveLogsE7QStringS0_+0x582>
    5bac:	eb 75                	jmp    5c23 <_ZN6Parser8saveLogsE7QStringS0_+0x5f9>
    5bae:	48 89 c3             	mov    %rax,%rbx
    5bb1:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    5bb8:	48 89 c7             	mov    %rax,%rdi
    5bbb:	e8 00 00 00 00       	callq  5bc0 <_ZN6Parser8saveLogsE7QStringS0_+0x596>
    5bc0:	eb 61                	jmp    5c23 <_ZN6Parser8saveLogsE7QStringS0_+0x5f9>
    5bc2:	48 89 c3             	mov    %rax,%rbx

    QDate date = QDate::currentDate();
    QTime time = QTime::currentTime();
    QString date_str = date.toString() + " " + time.toString();

    stream1 << "\r\n\r\n##### " + date_str + " #####\r\n";
    5bc5:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    5bcc:	48 89 c7             	mov    %rax,%rdi
    5bcf:	e8 00 00 00 00       	callq  5bd4 <_ZN6Parser8saveLogsE7QStringS0_+0x5aa>
    5bd4:	eb 03                	jmp    5bd9 <_ZN6Parser8saveLogsE7QStringS0_+0x5af>
    5bd6:	48 89 c3             	mov    %rax,%rbx
    5bd9:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    5be0:	48 89 c7             	mov    %rax,%rdi
    5be3:	e8 00 00 00 00       	callq  5be8 <_ZN6Parser8saveLogsE7QStringS0_+0x5be>
    5be8:	eb 25                	jmp    5c0f <_ZN6Parser8saveLogsE7QStringS0_+0x5e5>
    5bea:	48 89 c3             	mov    %rax,%rbx
    stream2 << "\r\n\r\n===== " + date_str + " =====\r\n";
    5bed:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    5bf1:	48 89 c7             	mov    %rax,%rdi
    5bf4:	e8 00 00 00 00       	callq  5bf9 <_ZN6Parser8saveLogsE7QStringS0_+0x5cf>
    5bf9:	eb 03                	jmp    5bfe <_ZN6Parser8saveLogsE7QStringS0_+0x5d4>
    5bfb:	48 89 c3             	mov    %rax,%rbx
    5bfe:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    5c02:	48 89 c7             	mov    %rax,%rdi
    5c05:	e8 00 00 00 00       	callq  5c0a <_ZN6Parser8saveLogsE7QStringS0_+0x5e0>
    5c0a:	eb 03                	jmp    5c0f <_ZN6Parser8saveLogsE7QStringS0_+0x5e5>
    5c0c:	48 89 c3             	mov    %rax,%rbx
    QTextStream stream1(&file1);
    QTextStream stream2(&file2);

    QDate date = QDate::currentDate();
    QTime time = QTime::currentTime();
    QString date_str = date.toString() + " " + time.toString();
    5c0f:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    5c16:	48 89 c7             	mov    %rax,%rdi
    5c19:	e8 00 00 00 00       	callq  5c1e <_ZN6Parser8saveLogsE7QStringS0_+0x5f4>
    5c1e:	eb 03                	jmp    5c23 <_ZN6Parser8saveLogsE7QStringS0_+0x5f9>
    5c20:	48 89 c3             	mov    %rax,%rbx

    file1.open(FileMode1);
    file2.open(FileMode2);

    QTextStream stream1(&file1);
    QTextStream stream2(&file2);
    5c23:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    5c27:	48 89 c7             	mov    %rax,%rdi
    5c2a:	e8 00 00 00 00       	callq  5c2f <_ZN6Parser8saveLogsE7QStringS0_+0x605>
    5c2f:	eb 03                	jmp    5c34 <_ZN6Parser8saveLogsE7QStringS0_+0x60a>
    5c31:	48 89 c3             	mov    %rax,%rbx
    if(file2.exists(fileName2)) FileMode2 = QIODevice::Append;

    file1.open(FileMode1);
    file2.open(FileMode2);

    QTextStream stream1(&file1);
    5c34:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    5c38:	48 89 c7             	mov    %rax,%rdi
    5c3b:	e8 00 00 00 00       	callq  5c40 <_ZN6Parser8saveLogsE7QStringS0_+0x616>
    5c40:	eb 03                	jmp    5c45 <_ZN6Parser8saveLogsE7QStringS0_+0x61b>
    5c42:	48 89 c3             	mov    %rax,%rbx

    log1.replace("\n","\r\n");
    log2.replace("\n","\r\n");

    QFile file1(fileName1);
    QFile file2(fileName2);
    5c45:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    5c49:	48 89 c7             	mov    %rax,%rdi
    5c4c:	e8 00 00 00 00       	callq  5c51 <_ZN6Parser8saveLogsE7QStringS0_+0x627>
    5c51:	eb 03                	jmp    5c56 <_ZN6Parser8saveLogsE7QStringS0_+0x62c>
    5c53:	48 89 c3             	mov    %rax,%rbx
    QString log2 = result;

    log1.replace("\n","\r\n");
    log2.replace("\n","\r\n");

    QFile file1(fileName1);
    5c56:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    5c5a:	48 89 c7             	mov    %rax,%rdi
    5c5d:	e8 00 00 00 00       	callq  5c62 <_ZN6Parser8saveLogsE7QStringS0_+0x638>
    5c62:	eb 03                	jmp    5c67 <_ZN6Parser8saveLogsE7QStringS0_+0x63d>
    5c64:	48 89 c3             	mov    %rax,%rbx
{
    QString fileName1 = "log_result.txt";
    QString fileName2 = "log_errors.txt";

    QString log1 = code;
    QString log2 = result;
    5c67:	48 8d 85 c0 fe ff ff 	lea    -0x140(%rbp),%rax
    5c6e:	48 89 c7             	mov    %rax,%rdi
    5c71:	e8 00 00 00 00       	callq  5c76 <_ZN6Parser8saveLogsE7QStringS0_+0x64c>
    5c76:	eb 03                	jmp    5c7b <_ZN6Parser8saveLogsE7QStringS0_+0x651>
    5c78:	48 89 c3             	mov    %rax,%rbx
void Parser::saveLogs(QString code, QString result)
{
    QString fileName1 = "log_result.txt";
    QString fileName2 = "log_errors.txt";

    QString log1 = code;
    5c7b:	48 8d 85 b0 fe ff ff 	lea    -0x150(%rbp),%rax
    5c82:	48 89 c7             	mov    %rax,%rdi
    5c85:	e8 00 00 00 00       	callq  5c8a <_ZN6Parser8saveLogsE7QStringS0_+0x660>
    5c8a:	eb 03                	jmp    5c8f <_ZN6Parser8saveLogsE7QStringS0_+0x665>
    5c8c:	48 89 c3             	mov    %rax,%rbx
}

void Parser::saveLogs(QString code, QString result)
{
    QString fileName1 = "log_result.txt";
    QString fileName2 = "log_errors.txt";
    5c8f:	48 8d 85 a0 fe ff ff 	lea    -0x160(%rbp),%rax
    5c96:	48 89 c7             	mov    %rax,%rdi
    5c99:	e8 00 00 00 00       	callq  5c9e <_ZN6Parser8saveLogsE7QStringS0_+0x674>
    5c9e:	eb 03                	jmp    5ca3 <_ZN6Parser8saveLogsE7QStringS0_+0x679>
    5ca0:	48 89 c3             	mov    %rax,%rbx

}

void Parser::saveLogs(QString code, QString result)
{
    QString fileName1 = "log_result.txt";
    5ca3:	48 8d 85 90 fe ff ff 	lea    -0x170(%rbp),%rax
    5caa:	48 89 c7             	mov    %rax,%rdi
    5cad:	e8 00 00 00 00       	callq  5cb2 <_ZN6Parser8saveLogsE7QStringS0_+0x688>
    5cb2:	48 89 d8             	mov    %rbx,%rax
    5cb5:	48 89 c7             	mov    %rax,%rdi
    5cb8:	e8 00 00 00 00       	callq  5cbd <_ZN6Parser8saveLogsE7QStringS0_+0x693>
    stream1 << log1;
    stream2 << log2;

    file1.close();
    file2.close();
}
    5cbd:	e8 00 00 00 00       	callq  5cc2 <_ZN6Parser8saveLogsE7QStringS0_+0x698>
    5cc2:	48 81 c4 b8 01 00 00 	add    $0x1b8,%rsp
    5cc9:	5b                   	pop    %rbx
    5cca:	5d                   	pop    %rbp
    5ccb:	c3                   	retq   

0000000000005ccc <_ZN6Parser4initEv>:

void Parser::init(){
    5ccc:	55                   	push   %rbp
    5ccd:	48 89 e5             	mov    %rsp,%rbp
    5cd0:	48 83 ec 10          	sub    $0x10,%rsp
    5cd4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    this->PARSER_QREGEXP_MODULE = "module[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\,[\\s\\t]*([\\w]*)[\\s\\t]*\\)";
    5cd8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5cdc:	48 83 c0 30          	add    $0x30,%rax
    5ce0:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5ce7 <_ZN6Parser4initEv+0x1b>
    5ce7:	48 89 c7             	mov    %rax,%rdi
    5cea:	e8 00 00 00 00       	callq  5cef <_ZN6Parser4initEv+0x23>
    this->PARSER_QREGEXP_HW_SEQUENCE = "HW_SEQUENCE[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\)";
    5cef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    5cf3:	48 83 c0 38          	add    $0x38,%rax
    5cf7:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5cfe <_ZN6Parser4initEv+0x32>
    5cfe:	48 89 c7             	mov    %rax,%rdi
    5d01:	e8 00 00 00 00       	callq  5d06 <_ZN6Parser4initEv+0x3a>
}
    5d06:	90                   	nop
    5d07:	c9                   	leaveq 
    5d08:	c3                   	retq   
    5d09:	90                   	nop

0000000000005d0a <_ZN6Parser8initSemsEv>:

void Parser::initSems(){
    5d0a:	55                   	push   %rbp
    5d0b:	48 89 e5             	mov    %rsp,%rbp
    5d0e:	53                   	push   %rbx
    5d0f:	48 83 ec 38          	sub    $0x38,%rsp
    5d13:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    5d17:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    5d1e:	00 00 
    5d20:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    5d24:	31 c0                	xor    %eax,%eax
    this->parserSems.insert("rotl", 0x01);
    5d26:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%rbp)
    5d2d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5d31:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5d38 <_ZN6Parser8initSemsEv+0x2e>
    5d38:	48 89 c7             	mov    %rax,%rdi
    5d3b:	e8 00 00 00 00       	callq  5d40 <_ZN6Parser8initSemsEv+0x36>
    5d40:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5d44:	48 8d 88 e0 00 00 00 	lea    0xe0(%rax),%rcx
    5d4b:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5d4f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5d53:	48 89 c6             	mov    %rax,%rsi
    5d56:	48 89 cf             	mov    %rcx,%rdi
    5d59:	e8 00 00 00 00       	callq  5d5e <_ZN6Parser8initSemsEv+0x54>
    5d5e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5d62:	48 89 c7             	mov    %rax,%rdi
    5d65:	e8 00 00 00 00       	callq  5d6a <_ZN6Parser8initSemsEv+0x60>

this->parserSems.insert("rotl",             0x01);
    5d6a:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%rbp)
    5d71:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5d75:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5d7c <_ZN6Parser8initSemsEv+0x72>
    5d7c:	48 89 c7             	mov    %rax,%rdi
    5d7f:	e8 00 00 00 00       	callq  5d84 <_ZN6Parser8initSemsEv+0x7a>
    5d84:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5d88:	48 8d 88 e0 00 00 00 	lea    0xe0(%rax),%rcx
    5d8f:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5d93:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5d97:	48 89 c6             	mov    %rax,%rsi
    5d9a:	48 89 cf             	mov    %rcx,%rdi
    5d9d:	e8 00 00 00 00       	callq  5da2 <_ZN6Parser8initSemsEv+0x98>
    5da2:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5da6:	48 89 c7             	mov    %rax,%rdi
    5da9:	e8 00 00 00 00       	callq  5dae <_ZN6Parser8initSemsEv+0xa4>
this->parserSems.insert("rotr",             0x02);
    5dae:	c7 45 dc 02 00 00 00 	movl   $0x2,-0x24(%rbp)
    5db5:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5db9:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5dc0 <_ZN6Parser8initSemsEv+0xb6>
    5dc0:	48 89 c7             	mov    %rax,%rdi
    5dc3:	e8 00 00 00 00       	callq  5dc8 <_ZN6Parser8initSemsEv+0xbe>
    5dc8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5dcc:	48 8d 88 e0 00 00 00 	lea    0xe0(%rax),%rcx
    5dd3:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5dd7:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5ddb:	48 89 c6             	mov    %rax,%rsi
    5dde:	48 89 cf             	mov    %rcx,%rdi
    5de1:	e8 00 00 00 00       	callq  5de6 <_ZN6Parser8initSemsEv+0xdc>
    5de6:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5dea:	48 89 c7             	mov    %rax,%rdi
    5ded:	e8 00 00 00 00       	callq  5df2 <_ZN6Parser8initSemsEv+0xe8>
this->parserSems.insert("ashl",             0x03);
    5df2:	c7 45 dc 03 00 00 00 	movl   $0x3,-0x24(%rbp)
    5df9:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5dfd:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5e04 <_ZN6Parser8initSemsEv+0xfa>
    5e04:	48 89 c7             	mov    %rax,%rdi
    5e07:	e8 00 00 00 00       	callq  5e0c <_ZN6Parser8initSemsEv+0x102>
    5e0c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5e10:	48 8d 88 e0 00 00 00 	lea    0xe0(%rax),%rcx
    5e17:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5e1b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5e1f:	48 89 c6             	mov    %rax,%rsi
    5e22:	48 89 cf             	mov    %rcx,%rdi
    5e25:	e8 00 00 00 00       	callq  5e2a <_ZN6Parser8initSemsEv+0x120>
    5e2a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5e2e:	48 89 c7             	mov    %rax,%rdi
    5e31:	e8 00 00 00 00       	callq  5e36 <_ZN6Parser8initSemsEv+0x12c>
this->parserSems.insert("ashr",             0x04);
    5e36:	c7 45 dc 04 00 00 00 	movl   $0x4,-0x24(%rbp)
    5e3d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5e41:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5e48 <_ZN6Parser8initSemsEv+0x13e>
    5e48:	48 89 c7             	mov    %rax,%rdi
    5e4b:	e8 00 00 00 00       	callq  5e50 <_ZN6Parser8initSemsEv+0x146>
    5e50:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5e54:	48 8d 88 e0 00 00 00 	lea    0xe0(%rax),%rcx
    5e5b:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5e5f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5e63:	48 89 c6             	mov    %rax,%rsi
    5e66:	48 89 cf             	mov    %rcx,%rdi
    5e69:	e8 00 00 00 00       	callq  5e6e <_ZN6Parser8initSemsEv+0x164>
    5e6e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5e72:	48 89 c7             	mov    %rax,%rdi
    5e75:	e8 00 00 00 00       	callq  5e7a <_ZN6Parser8initSemsEv+0x170>
this->parserSems.insert("iif",              0x05);
    5e7a:	c7 45 dc 05 00 00 00 	movl   $0x5,-0x24(%rbp)
    5e81:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5e85:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5e8c <_ZN6Parser8initSemsEv+0x182>
    5e8c:	48 89 c7             	mov    %rax,%rdi
    5e8f:	e8 00 00 00 00       	callq  5e94 <_ZN6Parser8initSemsEv+0x18a>
    5e94:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5e98:	48 8d 88 e0 00 00 00 	lea    0xe0(%rax),%rcx
    5e9f:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5ea3:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5ea7:	48 89 c6             	mov    %rax,%rsi
    5eaa:	48 89 cf             	mov    %rcx,%rdi
    5ead:	e8 00 00 00 00       	callq  5eb2 <_ZN6Parser8initSemsEv+0x1a8>
    5eb2:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5eb6:	48 89 c7             	mov    %rax,%rdi
    5eb9:	e8 00 00 00 00       	callq  5ebe <_ZN6Parser8initSemsEv+0x1b4>
this->parserSems.insert("read",             0x06);
    5ebe:	c7 45 dc 06 00 00 00 	movl   $0x6,-0x24(%rbp)
    5ec5:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5ec9:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5ed0 <_ZN6Parser8initSemsEv+0x1c6>
    5ed0:	48 89 c7             	mov    %rax,%rdi
    5ed3:	e8 00 00 00 00       	callq  5ed8 <_ZN6Parser8initSemsEv+0x1ce>
    5ed8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5edc:	48 8d 88 e0 00 00 00 	lea    0xe0(%rax),%rcx
    5ee3:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5ee7:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5eeb:	48 89 c6             	mov    %rax,%rsi
    5eee:	48 89 cf             	mov    %rcx,%rdi
    5ef1:	e8 00 00 00 00       	callq  5ef6 <_ZN6Parser8initSemsEv+0x1ec>
    5ef6:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5efa:	48 89 c7             	mov    %rax,%rdi
    5efd:	e8 00 00 00 00       	callq  5f02 <_ZN6Parser8initSemsEv+0x1f8>
this->parserSems.insert("write",            0x07);
    5f02:	c7 45 dc 07 00 00 00 	movl   $0x7,-0x24(%rbp)
    5f09:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5f0d:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5f14 <_ZN6Parser8initSemsEv+0x20a>
    5f14:	48 89 c7             	mov    %rax,%rdi
    5f17:	e8 00 00 00 00       	callq  5f1c <_ZN6Parser8initSemsEv+0x212>
    5f1c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5f20:	48 8d 88 e0 00 00 00 	lea    0xe0(%rax),%rcx
    5f27:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5f2b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5f2f:	48 89 c6             	mov    %rax,%rsi
    5f32:	48 89 cf             	mov    %rcx,%rdi
    5f35:	e8 00 00 00 00       	callq  5f3a <_ZN6Parser8initSemsEv+0x230>
    5f3a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5f3e:	48 89 c7             	mov    %rax,%rdi
    5f41:	e8 00 00 00 00       	callq  5f46 <_ZN6Parser8initSemsEv+0x23c>
this->parserSems.insert("write_all", 		0x08);
    5f46:	c7 45 dc 08 00 00 00 	movl   $0x8,-0x24(%rbp)
    5f4d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5f51:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5f58 <_ZN6Parser8initSemsEv+0x24e>
    5f58:	48 89 c7             	mov    %rax,%rdi
    5f5b:	e8 00 00 00 00       	callq  5f60 <_ZN6Parser8initSemsEv+0x256>
    5f60:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5f64:	48 8d 88 e0 00 00 00 	lea    0xe0(%rax),%rcx
    5f6b:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5f6f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5f73:	48 89 c6             	mov    %rax,%rsi
    5f76:	48 89 cf             	mov    %rcx,%rdi
    5f79:	e8 00 00 00 00       	callq  5f7e <_ZN6Parser8initSemsEv+0x274>
    5f7e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5f82:	48 89 c7             	mov    %rax,%rdi
    5f85:	e8 00 00 00 00       	callq  5f8a <_ZN6Parser8initSemsEv+0x280>
this->parserSems.insert("write_sel", 		0x09);
    5f8a:	c7 45 dc 09 00 00 00 	movl   $0x9,-0x24(%rbp)
    5f91:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5f95:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5f9c <_ZN6Parser8initSemsEv+0x292>
    5f9c:	48 89 c7             	mov    %rax,%rdi
    5f9f:	e8 00 00 00 00       	callq  5fa4 <_ZN6Parser8initSemsEv+0x29a>
    5fa4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5fa8:	48 8d 88 e0 00 00 00 	lea    0xe0(%rax),%rcx
    5faf:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5fb3:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5fb7:	48 89 c6             	mov    %rax,%rsi
    5fba:	48 89 cf             	mov    %rcx,%rdi
    5fbd:	e8 00 00 00 00       	callq  5fc2 <_ZN6Parser8initSemsEv+0x2b8>
    5fc2:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5fc6:	48 89 c7             	mov    %rax,%rdi
    5fc9:	e8 00 00 00 00       	callq  5fce <_ZN6Parser8initSemsEv+0x2c4>
this->parserSems.insert("on",               0x0A);
    5fce:	c7 45 dc 0a 00 00 00 	movl   $0xa,-0x24(%rbp)
    5fd5:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5fd9:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5fe0 <_ZN6Parser8initSemsEv+0x2d6>
    5fe0:	48 89 c7             	mov    %rax,%rdi
    5fe3:	e8 00 00 00 00       	callq  5fe8 <_ZN6Parser8initSemsEv+0x2de>
    5fe8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5fec:	48 8d 88 e0 00 00 00 	lea    0xe0(%rax),%rcx
    5ff3:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    5ff7:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    5ffb:	48 89 c6             	mov    %rax,%rsi
    5ffe:	48 89 cf             	mov    %rcx,%rdi
    6001:	e8 00 00 00 00       	callq  6006 <_ZN6Parser8initSemsEv+0x2fc>
    6006:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    600a:	48 89 c7             	mov    %rax,%rdi
    600d:	e8 00 00 00 00       	callq  6012 <_ZN6Parser8initSemsEv+0x308>
this->parserSems.insert("off",              0x0B);
    6012:	c7 45 dc 0b 00 00 00 	movl   $0xb,-0x24(%rbp)
    6019:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    601d:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6024 <_ZN6Parser8initSemsEv+0x31a>
    6024:	48 89 c7             	mov    %rax,%rdi
    6027:	e8 00 00 00 00       	callq  602c <_ZN6Parser8initSemsEv+0x322>
    602c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6030:	48 8d 88 e0 00 00 00 	lea    0xe0(%rax),%rcx
    6037:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    603b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    603f:	48 89 c6             	mov    %rax,%rsi
    6042:	48 89 cf             	mov    %rcx,%rdi
    6045:	e8 00 00 00 00       	callq  604a <_ZN6Parser8initSemsEv+0x340>
    604a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    604e:	48 89 c7             	mov    %rax,%rdi
    6051:	e8 00 00 00 00       	callq  6056 <_ZN6Parser8initSemsEv+0x34c>
this->parserSems.insert("local_send_event", 0x0C);
    6056:	c7 45 dc 0c 00 00 00 	movl   $0xc,-0x24(%rbp)
    605d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6061:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6068 <_ZN6Parser8initSemsEv+0x35e>
    6068:	48 89 c7             	mov    %rax,%rdi
    606b:	e8 00 00 00 00       	callq  6070 <_ZN6Parser8initSemsEv+0x366>
    6070:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6074:	48 8d 88 e0 00 00 00 	lea    0xe0(%rax),%rcx
    607b:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    607f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6083:	48 89 c6             	mov    %rax,%rsi
    6086:	48 89 cf             	mov    %rcx,%rdi
    6089:	e8 00 00 00 00       	callq  608e <_ZN6Parser8initSemsEv+0x384>
    608e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6092:	48 89 c7             	mov    %rax,%rdi
    6095:	e8 00 00 00 00       	callq  609a <_ZN6Parser8initSemsEv+0x390>
this->parserSems.insert("send_event", 		0x0D);
    609a:	c7 45 dc 0d 00 00 00 	movl   $0xd,-0x24(%rbp)
    60a1:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    60a5:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 60ac <_ZN6Parser8initSemsEv+0x3a2>
    60ac:	48 89 c7             	mov    %rax,%rdi
    60af:	e8 00 00 00 00       	callq  60b4 <_ZN6Parser8initSemsEv+0x3aa>
    60b4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    60b8:	48 8d 88 e0 00 00 00 	lea    0xe0(%rax),%rcx
    60bf:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    60c3:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    60c7:	48 89 c6             	mov    %rax,%rsi
    60ca:	48 89 cf             	mov    %rcx,%rdi
    60cd:	e8 00 00 00 00       	callq  60d2 <_ZN6Parser8initSemsEv+0x3c8>
    60d2:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    60d6:	48 89 c7             	mov    %rax,%rdi
    60d9:	e8 00 00 00 00       	callq  60de <_ZN6Parser8initSemsEv+0x3d4>
this->parserSems.insert("send_event_sel", 	0x0E);
    60de:	c7 45 dc 0e 00 00 00 	movl   $0xe,-0x24(%rbp)
    60e5:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    60e9:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 60f0 <_ZN6Parser8initSemsEv+0x3e6>
    60f0:	48 89 c7             	mov    %rax,%rdi
    60f3:	e8 00 00 00 00       	callq  60f8 <_ZN6Parser8initSemsEv+0x3ee>
    60f8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    60fc:	48 8d 88 e0 00 00 00 	lea    0xe0(%rax),%rcx
    6103:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    6107:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    610b:	48 89 c6             	mov    %rax,%rsi
    610e:	48 89 cf             	mov    %rcx,%rdi
    6111:	e8 00 00 00 00       	callq  6116 <_ZN6Parser8initSemsEv+0x40c>
    6116:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    611a:	48 89 c7             	mov    %rax,%rdi
    611d:	e8 00 00 00 00       	callq  6122 <_ZN6Parser8initSemsEv+0x418>
this->parserSems.insert("send_event_sync", 	0x0F);
    6122:	c7 45 dc 0f 00 00 00 	movl   $0xf,-0x24(%rbp)
    6129:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    612d:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6134 <_ZN6Parser8initSemsEv+0x42a>
    6134:	48 89 c7             	mov    %rax,%rdi
    6137:	e8 00 00 00 00       	callq  613c <_ZN6Parser8initSemsEv+0x432>
    613c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6140:	48 8d 88 e0 00 00 00 	lea    0xe0(%rax),%rcx
    6147:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    614b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    614f:	48 89 c6             	mov    %rax,%rsi
    6152:	48 89 cf             	mov    %rcx,%rdi
    6155:	e8 00 00 00 00       	callq  615a <_ZN6Parser8initSemsEv+0x450>
    615a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    615e:	48 89 c7             	mov    %rax,%rdi
    6161:	e8 00 00 00 00       	callq  6166 <_ZN6Parser8initSemsEv+0x45c>
this->parserSems.insert("send_event_sync_sel", 	0x10);
    6166:	c7 45 dc 10 00 00 00 	movl   $0x10,-0x24(%rbp)
    616d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6171:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6178 <_ZN6Parser8initSemsEv+0x46e>
    6178:	48 89 c7             	mov    %rax,%rdi
    617b:	e8 00 00 00 00       	callq  6180 <_ZN6Parser8initSemsEv+0x476>
    6180:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6184:	48 8d 88 e0 00 00 00 	lea    0xe0(%rax),%rcx
    618b:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    618f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6193:	48 89 c6             	mov    %rax,%rsi
    6196:	48 89 cf             	mov    %rcx,%rdi
    6199:	e8 00 00 00 00       	callq  619e <_ZN6Parser8initSemsEv+0x494>
    619e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    61a2:	48 89 c7             	mov    %rax,%rdi
    61a5:	e8 00 00 00 00       	callq  61aa <_ZN6Parser8initSemsEv+0x4a0>
this->parserSems.insert("send_event_all",   0x11);
    61aa:	c7 45 dc 11 00 00 00 	movl   $0x11,-0x24(%rbp)
    61b1:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    61b5:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 61bc <_ZN6Parser8initSemsEv+0x4b2>
    61bc:	48 89 c7             	mov    %rax,%rdi
    61bf:	e8 00 00 00 00       	callq  61c4 <_ZN6Parser8initSemsEv+0x4ba>
    61c4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    61c8:	48 8d 88 e0 00 00 00 	lea    0xe0(%rax),%rcx
    61cf:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    61d3:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    61d7:	48 89 c6             	mov    %rax,%rsi
    61da:	48 89 cf             	mov    %rcx,%rdi
    61dd:	e8 00 00 00 00       	callq  61e2 <_ZN6Parser8initSemsEv+0x4d8>
    61e2:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    61e6:	48 89 c7             	mov    %rax,%rdi
    61e9:	e8 00 00 00 00       	callq  61ee <_ZN6Parser8initSemsEv+0x4e4>
this->parserSems.insert("end_proc", 		0x12);
    61ee:	c7 45 dc 12 00 00 00 	movl   $0x12,-0x24(%rbp)
    61f5:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    61f9:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6200 <_ZN6Parser8initSemsEv+0x4f6>
    6200:	48 89 c7             	mov    %rax,%rdi
    6203:	e8 00 00 00 00       	callq  6208 <_ZN6Parser8initSemsEv+0x4fe>
    6208:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    620c:	48 8d 88 e0 00 00 00 	lea    0xe0(%rax),%rcx
    6213:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    6217:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    621b:	48 89 c6             	mov    %rax,%rsi
    621e:	48 89 cf             	mov    %rcx,%rdi
    6221:	e8 00 00 00 00       	callq  6226 <_ZN6Parser8initSemsEv+0x51c>
    6226:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    622a:	48 89 c7             	mov    %rax,%rdi
    622d:	e8 00 00 00 00       	callq  6232 <_ZN6Parser8initSemsEv+0x528>
this->parserSems.insert("delay",            0x13);
    6232:	c7 45 dc 13 00 00 00 	movl   $0x13,-0x24(%rbp)
    6239:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    623d:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6244 <_ZN6Parser8initSemsEv+0x53a>
    6244:	48 89 c7             	mov    %rax,%rdi
    6247:	e8 00 00 00 00       	callq  624c <_ZN6Parser8initSemsEv+0x542>
    624c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6250:	48 8d 88 e0 00 00 00 	lea    0xe0(%rax),%rcx
    6257:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    625b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    625f:	48 89 c6             	mov    %rax,%rsi
    6262:	48 89 cf             	mov    %rcx,%rdi
    6265:	e8 00 00 00 00       	callq  626a <_ZN6Parser8initSemsEv+0x560>
    626a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    626e:	48 89 c7             	mov    %rax,%rdi
    6271:	e8 00 00 00 00       	callq  6276 <_ZN6Parser8initSemsEv+0x56c>
this->parserSems.insert("make_dialog", 		0x14);
    6276:	c7 45 dc 14 00 00 00 	movl   $0x14,-0x24(%rbp)
    627d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6281:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6288 <_ZN6Parser8initSemsEv+0x57e>
    6288:	48 89 c7             	mov    %rax,%rdi
    628b:	e8 00 00 00 00       	callq  6290 <_ZN6Parser8initSemsEv+0x586>
    6290:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6294:	48 8d 88 e0 00 00 00 	lea    0xe0(%rax),%rcx
    629b:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    629f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    62a3:	48 89 c6             	mov    %rax,%rsi
    62a6:	48 89 cf             	mov    %rcx,%rdi
    62a9:	e8 00 00 00 00       	callq  62ae <_ZN6Parser8initSemsEv+0x5a4>
    62ae:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    62b2:	48 89 c7             	mov    %rax,%rdi
    62b5:	e8 00 00 00 00       	callq  62ba <_ZN6Parser8initSemsEv+0x5b0>
this->parserSems.insert("prin",             0x15);
    62ba:	c7 45 dc 15 00 00 00 	movl   $0x15,-0x24(%rbp)
    62c1:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    62c5:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 62cc <_ZN6Parser8initSemsEv+0x5c2>
    62cc:	48 89 c7             	mov    %rax,%rdi
    62cf:	e8 00 00 00 00       	callq  62d4 <_ZN6Parser8initSemsEv+0x5ca>
    62d4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    62d8:	48 8d 88 e0 00 00 00 	lea    0xe0(%rax),%rcx
    62df:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    62e3:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    62e7:	48 89 c6             	mov    %rax,%rsi
    62ea:	48 89 cf             	mov    %rcx,%rdi
    62ed:	e8 00 00 00 00       	callq  62f2 <_ZN6Parser8initSemsEv+0x5e8>
    62f2:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    62f6:	48 89 c7             	mov    %rax,%rdi
    62f9:	e8 00 00 00 00       	callq  62fe <_ZN6Parser8initSemsEv+0x5f4>
this->parserSems.insert("telemetry", 		0x16);
    62fe:	c7 45 dc 16 00 00 00 	movl   $0x16,-0x24(%rbp)
    6305:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6309:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6310 <_ZN6Parser8initSemsEv+0x606>
    6310:	48 89 c7             	mov    %rax,%rdi
    6313:	e8 00 00 00 00       	callq  6318 <_ZN6Parser8initSemsEv+0x60e>
    6318:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    631c:	48 8d 88 e0 00 00 00 	lea    0xe0(%rax),%rcx
    6323:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    6327:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    632b:	48 89 c6             	mov    %rax,%rsi
    632e:	48 89 cf             	mov    %rcx,%rdi
    6331:	e8 00 00 00 00       	callq  6336 <_ZN6Parser8initSemsEv+0x62c>
    6336:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    633a:	48 89 c7             	mov    %rax,%rdi
    633d:	e8 00 00 00 00       	callq  6342 <_ZN6Parser8initSemsEv+0x638>
this->parserSems.insert("telemetry_reset", 	0x17);
    6342:	c7 45 dc 17 00 00 00 	movl   $0x17,-0x24(%rbp)
    6349:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    634d:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6354 <_ZN6Parser8initSemsEv+0x64a>
    6354:	48 89 c7             	mov    %rax,%rdi
    6357:	e8 00 00 00 00       	callq  635c <_ZN6Parser8initSemsEv+0x652>
    635c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6360:	48 8d 88 e0 00 00 00 	lea    0xe0(%rax),%rcx
    6367:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    636b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    636f:	48 89 c6             	mov    %rax,%rsi
    6372:	48 89 cf             	mov    %rcx,%rdi
    6375:	e8 00 00 00 00       	callq  637a <_ZN6Parser8initSemsEv+0x670>
    637a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    637e:	48 89 c7             	mov    %rax,%rdi
    6381:	e8 00 00 00 00       	callq  6386 <_ZN6Parser8initSemsEv+0x67c>
this->parserSems.insert("check_hw_connection", 	 0x18);
    6386:	c7 45 dc 18 00 00 00 	movl   $0x18,-0x24(%rbp)
    638d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6391:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6398 <_ZN6Parser8initSemsEv+0x68e>
    6398:	48 89 c7             	mov    %rax,%rdi
    639b:	e8 00 00 00 00       	callq  63a0 <_ZN6Parser8initSemsEv+0x696>
    63a0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    63a4:	48 8d 88 e0 00 00 00 	lea    0xe0(%rax),%rcx
    63ab:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    63af:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    63b3:	48 89 c6             	mov    %rax,%rsi
    63b6:	48 89 cf             	mov    %rcx,%rdi
    63b9:	e8 00 00 00 00       	callq  63be <_ZN6Parser8initSemsEv+0x6b4>
    63be:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    63c2:	48 89 c7             	mov    %rax,%rdi
    63c5:	e8 00 00 00 00       	callq  63ca <_ZN6Parser8initSemsEv+0x6c0>
this->parserSems.insert("break",            0x19);
    63ca:	c7 45 dc 19 00 00 00 	movl   $0x19,-0x24(%rbp)
    63d1:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    63d5:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 63dc <_ZN6Parser8initSemsEv+0x6d2>
    63dc:	48 89 c7             	mov    %rax,%rdi
    63df:	e8 00 00 00 00       	callq  63e4 <_ZN6Parser8initSemsEv+0x6da>
    63e4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    63e8:	48 8d 88 e0 00 00 00 	lea    0xe0(%rax),%rcx
    63ef:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    63f3:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    63f7:	48 89 c6             	mov    %rax,%rsi
    63fa:	48 89 cf             	mov    %rcx,%rdi
    63fd:	e8 00 00 00 00       	callq  6402 <_ZN6Parser8initSemsEv+0x6f8>
    6402:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6406:	48 89 c7             	mov    %rax,%rdi
    6409:	e8 00 00 00 00       	callq  640e <_ZN6Parser8initSemsEv+0x704>
this->parserSems.insert("continue",         0x20);
    640e:	c7 45 dc 20 00 00 00 	movl   $0x20,-0x24(%rbp)
    6415:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6419:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6420 <_ZN6Parser8initSemsEv+0x716>
    6420:	48 89 c7             	mov    %rax,%rdi
    6423:	e8 00 00 00 00       	callq  6428 <_ZN6Parser8initSemsEv+0x71e>
    6428:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    642c:	48 8d 88 e0 00 00 00 	lea    0xe0(%rax),%rcx
    6433:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    6437:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    643b:	48 89 c6             	mov    %rax,%rsi
    643e:	48 89 cf             	mov    %rcx,%rdi
    6441:	e8 00 00 00 00       	callq  6446 <_ZN6Parser8initSemsEv+0x73c>
    6446:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    644a:	48 89 c7             	mov    %rax,%rdi
    644d:	e8 00 00 00 00       	callq  6452 <_ZN6Parser8initSemsEv+0x748>
this->parserSems.insert("transmitt",        0x21);
    6452:	c7 45 dc 21 00 00 00 	movl   $0x21,-0x24(%rbp)
    6459:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    645d:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6464 <_ZN6Parser8initSemsEv+0x75a>
    6464:	48 89 c7             	mov    %rax,%rdi
    6467:	e8 00 00 00 00       	callq  646c <_ZN6Parser8initSemsEv+0x762>
    646c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    6470:	48 8d 88 e0 00 00 00 	lea    0xe0(%rax),%rcx
    6477:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    647b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    647f:	48 89 c6             	mov    %rax,%rsi
    6482:	48 89 cf             	mov    %rcx,%rdi
    6485:	e8 00 00 00 00       	callq  648a <_ZN6Parser8initSemsEv+0x780>
    648a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    648e:	48 89 c7             	mov    %rax,%rdi
    6491:	e8 00 00 00 00       	callq  6496 <_ZN6Parser8initSemsEv+0x78c>
this->parserSems.insert("receive",          0x22);
    6496:	c7 45 dc 22 00 00 00 	movl   $0x22,-0x24(%rbp)
    649d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    64a1:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 64a8 <_ZN6Parser8initSemsEv+0x79e>
    64a8:	48 89 c7             	mov    %rax,%rdi
    64ab:	e8 00 00 00 00       	callq  64b0 <_ZN6Parser8initSemsEv+0x7a6>
    64b0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    64b4:	48 8d 88 e0 00 00 00 	lea    0xe0(%rax),%rcx
    64bb:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    64bf:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    64c3:	48 89 c6             	mov    %rax,%rsi
    64c6:	48 89 cf             	mov    %rcx,%rdi
    64c9:	e8 00 00 00 00       	callq  64ce <_ZN6Parser8initSemsEv+0x7c4>
    64ce:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    64d2:	48 89 c7             	mov    %rax,%rdi
    64d5:	e8 00 00 00 00       	callq  64da <_ZN6Parser8initSemsEv+0x7d0>
this->parserSems.insert("debug_prnt",       0x23);
    64da:	c7 45 dc 23 00 00 00 	movl   $0x23,-0x24(%rbp)
    64e1:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    64e5:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 64ec <_ZN6Parser8initSemsEv+0x7e2>
    64ec:	48 89 c7             	mov    %rax,%rdi
    64ef:	e8 00 00 00 00       	callq  64f4 <_ZN6Parser8initSemsEv+0x7ea>
    64f4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    64f8:	48 8d 88 e0 00 00 00 	lea    0xe0(%rax),%rcx
    64ff:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    6503:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6507:	48 89 c6             	mov    %rax,%rsi
    650a:	48 89 cf             	mov    %rcx,%rdi
    650d:	e8 00 00 00 00       	callq  6512 <_ZN6Parser8initSemsEv+0x808>
    6512:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6516:	48 89 c7             	mov    %rax,%rdi
    6519:	e8 00 00 00 00       	callq  651e <_ZN6Parser8initSemsEv+0x814>

}
    651e:	90                   	nop
    651f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    6523:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    652a:	00 00 
    652c:	0f 84 16 03 00 00    	je     6848 <_ZN6Parser8initSemsEv+0xb3e>
    6532:	e9 0c 03 00 00       	jmpq   6843 <_ZN6Parser8initSemsEv+0xb39>
    6537:	48 89 c3             	mov    %rax,%rbx
    this->PARSER_QREGEXP_MODULE = "module[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\,[\\s\\t]*([\\w]*)[\\s\\t]*\\)";
    this->PARSER_QREGEXP_HW_SEQUENCE = "HW_SEQUENCE[\\s\\t]*\\([\\s\\t]*([\\w]*)[\\s\\t]*\\)";
}

void Parser::initSems(){
    this->parserSems.insert("rotl", 0x01);
    653a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    653e:	48 89 c7             	mov    %rax,%rdi
    6541:	e8 00 00 00 00       	callq  6546 <_ZN6Parser8initSemsEv+0x83c>
    6546:	48 89 d8             	mov    %rbx,%rax
    6549:	48 89 c7             	mov    %rax,%rdi
    654c:	e8 00 00 00 00       	callq  6551 <_ZN6Parser8initSemsEv+0x847>
    6551:	48 89 c3             	mov    %rax,%rbx

this->parserSems.insert("rotl",             0x01);
    6554:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6558:	48 89 c7             	mov    %rax,%rdi
    655b:	e8 00 00 00 00       	callq  6560 <_ZN6Parser8initSemsEv+0x856>
    6560:	48 89 d8             	mov    %rbx,%rax
    6563:	48 89 c7             	mov    %rax,%rdi
    6566:	e8 00 00 00 00       	callq  656b <_ZN6Parser8initSemsEv+0x861>
    656b:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("rotr",             0x02);
    656e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6572:	48 89 c7             	mov    %rax,%rdi
    6575:	e8 00 00 00 00       	callq  657a <_ZN6Parser8initSemsEv+0x870>
    657a:	48 89 d8             	mov    %rbx,%rax
    657d:	48 89 c7             	mov    %rax,%rdi
    6580:	e8 00 00 00 00       	callq  6585 <_ZN6Parser8initSemsEv+0x87b>
    6585:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("ashl",             0x03);
    6588:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    658c:	48 89 c7             	mov    %rax,%rdi
    658f:	e8 00 00 00 00       	callq  6594 <_ZN6Parser8initSemsEv+0x88a>
    6594:	48 89 d8             	mov    %rbx,%rax
    6597:	48 89 c7             	mov    %rax,%rdi
    659a:	e8 00 00 00 00       	callq  659f <_ZN6Parser8initSemsEv+0x895>
    659f:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("ashr",             0x04);
    65a2:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    65a6:	48 89 c7             	mov    %rax,%rdi
    65a9:	e8 00 00 00 00       	callq  65ae <_ZN6Parser8initSemsEv+0x8a4>
    65ae:	48 89 d8             	mov    %rbx,%rax
    65b1:	48 89 c7             	mov    %rax,%rdi
    65b4:	e8 00 00 00 00       	callq  65b9 <_ZN6Parser8initSemsEv+0x8af>
    65b9:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("iif",              0x05);
    65bc:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    65c0:	48 89 c7             	mov    %rax,%rdi
    65c3:	e8 00 00 00 00       	callq  65c8 <_ZN6Parser8initSemsEv+0x8be>
    65c8:	48 89 d8             	mov    %rbx,%rax
    65cb:	48 89 c7             	mov    %rax,%rdi
    65ce:	e8 00 00 00 00       	callq  65d3 <_ZN6Parser8initSemsEv+0x8c9>
    65d3:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("read",             0x06);
    65d6:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    65da:	48 89 c7             	mov    %rax,%rdi
    65dd:	e8 00 00 00 00       	callq  65e2 <_ZN6Parser8initSemsEv+0x8d8>
    65e2:	48 89 d8             	mov    %rbx,%rax
    65e5:	48 89 c7             	mov    %rax,%rdi
    65e8:	e8 00 00 00 00       	callq  65ed <_ZN6Parser8initSemsEv+0x8e3>
    65ed:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("write",            0x07);
    65f0:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    65f4:	48 89 c7             	mov    %rax,%rdi
    65f7:	e8 00 00 00 00       	callq  65fc <_ZN6Parser8initSemsEv+0x8f2>
    65fc:	48 89 d8             	mov    %rbx,%rax
    65ff:	48 89 c7             	mov    %rax,%rdi
    6602:	e8 00 00 00 00       	callq  6607 <_ZN6Parser8initSemsEv+0x8fd>
    6607:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("write_all", 		0x08);
    660a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    660e:	48 89 c7             	mov    %rax,%rdi
    6611:	e8 00 00 00 00       	callq  6616 <_ZN6Parser8initSemsEv+0x90c>
    6616:	48 89 d8             	mov    %rbx,%rax
    6619:	48 89 c7             	mov    %rax,%rdi
    661c:	e8 00 00 00 00       	callq  6621 <_ZN6Parser8initSemsEv+0x917>
    6621:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("write_sel", 		0x09);
    6624:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6628:	48 89 c7             	mov    %rax,%rdi
    662b:	e8 00 00 00 00       	callq  6630 <_ZN6Parser8initSemsEv+0x926>
    6630:	48 89 d8             	mov    %rbx,%rax
    6633:	48 89 c7             	mov    %rax,%rdi
    6636:	e8 00 00 00 00       	callq  663b <_ZN6Parser8initSemsEv+0x931>
    663b:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("on",               0x0A);
    663e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6642:	48 89 c7             	mov    %rax,%rdi
    6645:	e8 00 00 00 00       	callq  664a <_ZN6Parser8initSemsEv+0x940>
    664a:	48 89 d8             	mov    %rbx,%rax
    664d:	48 89 c7             	mov    %rax,%rdi
    6650:	e8 00 00 00 00       	callq  6655 <_ZN6Parser8initSemsEv+0x94b>
    6655:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("off",              0x0B);
    6658:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    665c:	48 89 c7             	mov    %rax,%rdi
    665f:	e8 00 00 00 00       	callq  6664 <_ZN6Parser8initSemsEv+0x95a>
    6664:	48 89 d8             	mov    %rbx,%rax
    6667:	48 89 c7             	mov    %rax,%rdi
    666a:	e8 00 00 00 00       	callq  666f <_ZN6Parser8initSemsEv+0x965>
    666f:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("local_send_event", 0x0C);
    6672:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6676:	48 89 c7             	mov    %rax,%rdi
    6679:	e8 00 00 00 00       	callq  667e <_ZN6Parser8initSemsEv+0x974>
    667e:	48 89 d8             	mov    %rbx,%rax
    6681:	48 89 c7             	mov    %rax,%rdi
    6684:	e8 00 00 00 00       	callq  6689 <_ZN6Parser8initSemsEv+0x97f>
    6689:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("send_event", 		0x0D);
    668c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6690:	48 89 c7             	mov    %rax,%rdi
    6693:	e8 00 00 00 00       	callq  6698 <_ZN6Parser8initSemsEv+0x98e>
    6698:	48 89 d8             	mov    %rbx,%rax
    669b:	48 89 c7             	mov    %rax,%rdi
    669e:	e8 00 00 00 00       	callq  66a3 <_ZN6Parser8initSemsEv+0x999>
    66a3:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("send_event_sel", 	0x0E);
    66a6:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    66aa:	48 89 c7             	mov    %rax,%rdi
    66ad:	e8 00 00 00 00       	callq  66b2 <_ZN6Parser8initSemsEv+0x9a8>
    66b2:	48 89 d8             	mov    %rbx,%rax
    66b5:	48 89 c7             	mov    %rax,%rdi
    66b8:	e8 00 00 00 00       	callq  66bd <_ZN6Parser8initSemsEv+0x9b3>
    66bd:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("send_event_sync", 	0x0F);
    66c0:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    66c4:	48 89 c7             	mov    %rax,%rdi
    66c7:	e8 00 00 00 00       	callq  66cc <_ZN6Parser8initSemsEv+0x9c2>
    66cc:	48 89 d8             	mov    %rbx,%rax
    66cf:	48 89 c7             	mov    %rax,%rdi
    66d2:	e8 00 00 00 00       	callq  66d7 <_ZN6Parser8initSemsEv+0x9cd>
    66d7:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("send_event_sync_sel", 	0x10);
    66da:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    66de:	48 89 c7             	mov    %rax,%rdi
    66e1:	e8 00 00 00 00       	callq  66e6 <_ZN6Parser8initSemsEv+0x9dc>
    66e6:	48 89 d8             	mov    %rbx,%rax
    66e9:	48 89 c7             	mov    %rax,%rdi
    66ec:	e8 00 00 00 00       	callq  66f1 <_ZN6Parser8initSemsEv+0x9e7>
    66f1:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("send_event_all",   0x11);
    66f4:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    66f8:	48 89 c7             	mov    %rax,%rdi
    66fb:	e8 00 00 00 00       	callq  6700 <_ZN6Parser8initSemsEv+0x9f6>
    6700:	48 89 d8             	mov    %rbx,%rax
    6703:	48 89 c7             	mov    %rax,%rdi
    6706:	e8 00 00 00 00       	callq  670b <_ZN6Parser8initSemsEv+0xa01>
    670b:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("end_proc", 		0x12);
    670e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6712:	48 89 c7             	mov    %rax,%rdi
    6715:	e8 00 00 00 00       	callq  671a <_ZN6Parser8initSemsEv+0xa10>
    671a:	48 89 d8             	mov    %rbx,%rax
    671d:	48 89 c7             	mov    %rax,%rdi
    6720:	e8 00 00 00 00       	callq  6725 <_ZN6Parser8initSemsEv+0xa1b>
    6725:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("delay",            0x13);
    6728:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    672c:	48 89 c7             	mov    %rax,%rdi
    672f:	e8 00 00 00 00       	callq  6734 <_ZN6Parser8initSemsEv+0xa2a>
    6734:	48 89 d8             	mov    %rbx,%rax
    6737:	48 89 c7             	mov    %rax,%rdi
    673a:	e8 00 00 00 00       	callq  673f <_ZN6Parser8initSemsEv+0xa35>
    673f:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("make_dialog", 		0x14);
    6742:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6746:	48 89 c7             	mov    %rax,%rdi
    6749:	e8 00 00 00 00       	callq  674e <_ZN6Parser8initSemsEv+0xa44>
    674e:	48 89 d8             	mov    %rbx,%rax
    6751:	48 89 c7             	mov    %rax,%rdi
    6754:	e8 00 00 00 00       	callq  6759 <_ZN6Parser8initSemsEv+0xa4f>
    6759:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("prin",             0x15);
    675c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6760:	48 89 c7             	mov    %rax,%rdi
    6763:	e8 00 00 00 00       	callq  6768 <_ZN6Parser8initSemsEv+0xa5e>
    6768:	48 89 d8             	mov    %rbx,%rax
    676b:	48 89 c7             	mov    %rax,%rdi
    676e:	e8 00 00 00 00       	callq  6773 <_ZN6Parser8initSemsEv+0xa69>
    6773:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("telemetry", 		0x16);
    6776:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    677a:	48 89 c7             	mov    %rax,%rdi
    677d:	e8 00 00 00 00       	callq  6782 <_ZN6Parser8initSemsEv+0xa78>
    6782:	48 89 d8             	mov    %rbx,%rax
    6785:	48 89 c7             	mov    %rax,%rdi
    6788:	e8 00 00 00 00       	callq  678d <_ZN6Parser8initSemsEv+0xa83>
    678d:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("telemetry_reset", 	0x17);
    6790:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6794:	48 89 c7             	mov    %rax,%rdi
    6797:	e8 00 00 00 00       	callq  679c <_ZN6Parser8initSemsEv+0xa92>
    679c:	48 89 d8             	mov    %rbx,%rax
    679f:	48 89 c7             	mov    %rax,%rdi
    67a2:	e8 00 00 00 00       	callq  67a7 <_ZN6Parser8initSemsEv+0xa9d>
    67a7:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("check_hw_connection", 	 0x18);
    67aa:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    67ae:	48 89 c7             	mov    %rax,%rdi
    67b1:	e8 00 00 00 00       	callq  67b6 <_ZN6Parser8initSemsEv+0xaac>
    67b6:	48 89 d8             	mov    %rbx,%rax
    67b9:	48 89 c7             	mov    %rax,%rdi
    67bc:	e8 00 00 00 00       	callq  67c1 <_ZN6Parser8initSemsEv+0xab7>
    67c1:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("break",            0x19);
    67c4:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    67c8:	48 89 c7             	mov    %rax,%rdi
    67cb:	e8 00 00 00 00       	callq  67d0 <_ZN6Parser8initSemsEv+0xac6>
    67d0:	48 89 d8             	mov    %rbx,%rax
    67d3:	48 89 c7             	mov    %rax,%rdi
    67d6:	e8 00 00 00 00       	callq  67db <_ZN6Parser8initSemsEv+0xad1>
    67db:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("continue",         0x20);
    67de:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    67e2:	48 89 c7             	mov    %rax,%rdi
    67e5:	e8 00 00 00 00       	callq  67ea <_ZN6Parser8initSemsEv+0xae0>
    67ea:	48 89 d8             	mov    %rbx,%rax
    67ed:	48 89 c7             	mov    %rax,%rdi
    67f0:	e8 00 00 00 00       	callq  67f5 <_ZN6Parser8initSemsEv+0xaeb>
    67f5:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("transmitt",        0x21);
    67f8:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    67fc:	48 89 c7             	mov    %rax,%rdi
    67ff:	e8 00 00 00 00       	callq  6804 <_ZN6Parser8initSemsEv+0xafa>
    6804:	48 89 d8             	mov    %rbx,%rax
    6807:	48 89 c7             	mov    %rax,%rdi
    680a:	e8 00 00 00 00       	callq  680f <_ZN6Parser8initSemsEv+0xb05>
    680f:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("receive",          0x22);
    6812:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6816:	48 89 c7             	mov    %rax,%rdi
    6819:	e8 00 00 00 00       	callq  681e <_ZN6Parser8initSemsEv+0xb14>
    681e:	48 89 d8             	mov    %rbx,%rax
    6821:	48 89 c7             	mov    %rax,%rdi
    6824:	e8 00 00 00 00       	callq  6829 <_ZN6Parser8initSemsEv+0xb1f>
    6829:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("debug_prnt",       0x23);
    682c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6830:	48 89 c7             	mov    %rax,%rdi
    6833:	e8 00 00 00 00       	callq  6838 <_ZN6Parser8initSemsEv+0xb2e>
    6838:	48 89 d8             	mov    %rbx,%rax
    683b:	48 89 c7             	mov    %rax,%rdi
    683e:	e8 00 00 00 00       	callq  6843 <_ZN6Parser8initSemsEv+0xb39>

}
    6843:	e8 00 00 00 00       	callq  6848 <_ZN6Parser8initSemsEv+0xb3e>
    6848:	48 83 c4 38          	add    $0x38,%rsp
    684c:	5b                   	pop    %rbx
    684d:	5d                   	pop    %rbp
    684e:	c3                   	retq   
    684f:	90                   	nop

0000000000006850 <_ZN6Parser10testCase01Ev>:

void Parser::testCase01(){
    6850:	55                   	push   %rbp
    6851:	48 89 e5             	mov    %rsp,%rbp
    6854:	53                   	push   %rbx
    6855:	48 83 ec 48          	sub    $0x48,%rsp
    6859:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    685d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    6864:	00 00 
    6866:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    686a:	31 c0                	xor    %eax,%eax
    QString test =  "debug_prnt (\"Module IP1 was run at %02d:%02d\", m_pos, m_channel);";
    686c:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    6870:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6877 <_ZN6Parser10testCase01Ev+0x27>
    6877:	48 89 c7             	mov    %rax,%rdi
    687a:	e8 00 00 00 00       	callq  687f <_ZN6Parser10testCase01Ev+0x2f>
    QList<QString> testResult;
    687f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6883:	48 89 c7             	mov    %rax,%rdi
    6886:	e8 00 00 00 00       	callq  688b <_ZN6Parser10testCase01Ev+0x3b>
    splitStr(test, testResult);
    688b:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    688f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6893:	48 89 d6             	mov    %rdx,%rsi
    6896:	48 89 c7             	mov    %rax,%rdi
    6899:	e8 00 00 00 00       	callq  689e <_ZN6Parser10testCase01Ev+0x4e>
    689e:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    68a2:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
    68a6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    68aa:	48 89 ce             	mov    %rcx,%rsi
    68ad:	48 89 c7             	mov    %rax,%rdi
    68b0:	e8 00 00 00 00       	callq  68b5 <_ZN6Parser10testCase01Ev+0x65>
    68b5:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    68b9:	48 89 c7             	mov    %rax,%rdi
    68bc:	e8 00 00 00 00       	callq  68c1 <_ZN6Parser10testCase01Ev+0x71>

}

void Parser::testCase01(){
    QString test =  "debug_prnt (\"Module IP1 was run at %02d:%02d\", m_pos, m_channel);";
    QList<QString> testResult;
    68c1:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    68c5:	48 89 c7             	mov    %rax,%rdi
    68c8:	e8 00 00 00 00       	callq  68cd <_ZN6Parser10testCase01Ev+0x7d>
this->parserSems.insert("debug_prnt",       0x23);

}

void Parser::testCase01(){
    QString test =  "debug_prnt (\"Module IP1 was run at %02d:%02d\", m_pos, m_channel);";
    68cd:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    68d1:	48 89 c7             	mov    %rax,%rdi
    68d4:	e8 00 00 00 00       	callq  68d9 <_ZN6Parser10testCase01Ev+0x89>
    QList<QString> testResult;
    splitStr(test, testResult);
}
    68d9:	90                   	nop
    68da:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    68de:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    68e5:	00 00 
    68e7:	74 43                	je     692c <_ZN6Parser10testCase01Ev+0xdc>
    68e9:	eb 3c                	jmp    6927 <_ZN6Parser10testCase01Ev+0xd7>
    68eb:	48 89 c3             	mov    %rax,%rbx
}

void Parser::testCase01(){
    QString test =  "debug_prnt (\"Module IP1 was run at %02d:%02d\", m_pos, m_channel);";
    QList<QString> testResult;
    splitStr(test, testResult);
    68ee:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    68f2:	48 89 c7             	mov    %rax,%rdi
    68f5:	e8 00 00 00 00       	callq  68fa <_ZN6Parser10testCase01Ev+0xaa>
    68fa:	eb 03                	jmp    68ff <_ZN6Parser10testCase01Ev+0xaf>
    68fc:	48 89 c3             	mov    %rax,%rbx

}

void Parser::testCase01(){
    QString test =  "debug_prnt (\"Module IP1 was run at %02d:%02d\", m_pos, m_channel);";
    QList<QString> testResult;
    68ff:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6903:	48 89 c7             	mov    %rax,%rdi
    6906:	e8 00 00 00 00       	callq  690b <_ZN6Parser10testCase01Ev+0xbb>
    690b:	eb 03                	jmp    6910 <_ZN6Parser10testCase01Ev+0xc0>
    690d:	48 89 c3             	mov    %rax,%rbx
this->parserSems.insert("debug_prnt",       0x23);

}

void Parser::testCase01(){
    QString test =  "debug_prnt (\"Module IP1 was run at %02d:%02d\", m_pos, m_channel);";
    6910:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    6914:	48 89 c7             	mov    %rax,%rdi
    6917:	e8 00 00 00 00       	callq  691c <_ZN6Parser10testCase01Ev+0xcc>
    691c:	48 89 d8             	mov    %rbx,%rax
    691f:	48 89 c7             	mov    %rax,%rdi
    6922:	e8 00 00 00 00       	callq  6927 <_ZN6Parser10testCase01Ev+0xd7>
    QList<QString> testResult;
    splitStr(test, testResult);
}
    6927:	e8 00 00 00 00       	callq  692c <_ZN6Parser10testCase01Ev+0xdc>
    692c:	48 83 c4 48          	add    $0x48,%rsp
    6930:	5b                   	pop    %rbx
    6931:	5d                   	pop    %rbp
    6932:	c3                   	retq   
    6933:	90                   	nop

0000000000006934 <_ZN6Parser8HWStoHexEv>:

void Parser::HWStoHex(){
    6934:	55                   	push   %rbp
    6935:	48 89 e5             	mov    %rsp,%rbp
    6938:	53                   	push   %rbx
    6939:	48 83 ec 48          	sub    $0x48,%rsp
    693d:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    6941:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    6948:	00 00 
    694a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    694e:	31 c0                	xor    %eax,%eax

    this->hwSequenceCompiledHex.clear();
    6950:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    6954:	48 83 c0 50          	add    $0x50,%rax
    6958:	48 89 c7             	mov    %rax,%rdi
    695b:	e8 00 00 00 00       	callq  6960 <_ZN6Parser8HWStoHexEv+0x2c>
    int n = this->hwSequenceCompiled.size();
    6960:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    6964:	48 05 c0 00 00 00    	add    $0xc0,%rax
    696a:	48 89 c7             	mov    %rax,%rdi
    696d:	e8 00 00 00 00       	callq  6972 <_ZN6Parser8HWStoHexEv+0x3e>
    6972:	89 45 cc             	mov    %eax,-0x34(%rbp)
    int i = 0;
    6975:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
    for(i=0; i<n; i++){
    697c:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
    6983:	8b 45 c8             	mov    -0x38(%rbp),%eax
    6986:	3b 45 cc             	cmp    -0x34(%rbp),%eax
    6989:	0f 8d 2f 01 00 00    	jge    6abe <_ZN6Parser8HWStoHexEv+0x18a>
        unsigned char c = this->hwSequenceCompiled.at(i);
    698f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    6993:	48 8d 90 c0 00 00 00 	lea    0xc0(%rax),%rdx
    699a:	8b 45 c8             	mov    -0x38(%rbp),%eax
    699d:	89 c6                	mov    %eax,%esi
    699f:	48 89 d7             	mov    %rdx,%rdi
    69a2:	e8 00 00 00 00       	callq  69a7 <_ZN6Parser8HWStoHexEv+0x73>
    69a7:	88 45 c7             	mov    %al,-0x39(%rbp)
        QString hex = QString::number(c, 16);
    69aa:	0f b6 4d c7          	movzbl -0x39(%rbp),%ecx
    69ae:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    69b2:	ba 10 00 00 00       	mov    $0x10,%edx
    69b7:	89 ce                	mov    %ecx,%esi
    69b9:	48 89 c7             	mov    %rax,%rdi
    69bc:	e8 00 00 00 00       	callq  69c1 <_ZN6Parser8HWStoHexEv+0x8d>

        if(i%4 == 0) this->hwSequenceCompiledHex.append("  ");
    69c1:	8b 45 c8             	mov    -0x38(%rbp),%eax
    69c4:	83 e0 03             	and    $0x3,%eax
    69c7:	85 c0                	test   %eax,%eax
    69c9:	75 17                	jne    69e2 <_ZN6Parser8HWStoHexEv+0xae>
    69cb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    69cf:	48 83 c0 50          	add    $0x50,%rax
    69d3:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 69da <_ZN6Parser8HWStoHexEv+0xa6>
    69da:	48 89 c7             	mov    %rax,%rdi
    69dd:	e8 00 00 00 00       	callq  69e2 <_ZN6Parser8HWStoHexEv+0xae>
        if(i%8 == 0) this->hwSequenceCompiledHex.append("   ");
    69e2:	8b 45 c8             	mov    -0x38(%rbp),%eax
    69e5:	83 e0 07             	and    $0x7,%eax
    69e8:	85 c0                	test   %eax,%eax
    69ea:	75 17                	jne    6a03 <_ZN6Parser8HWStoHexEv+0xcf>
    69ec:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    69f0:	48 83 c0 50          	add    $0x50,%rax
    69f4:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 69fb <_ZN6Parser8HWStoHexEv+0xc7>
    69fb:	48 89 c7             	mov    %rax,%rdi
    69fe:	e8 00 00 00 00       	callq  6a03 <_ZN6Parser8HWStoHexEv+0xcf>
        if(i%16 == 0) this->hwSequenceCompiledHex.append("\n");
    6a03:	8b 45 c8             	mov    -0x38(%rbp),%eax
    6a06:	83 e0 0f             	and    $0xf,%eax
    6a09:	85 c0                	test   %eax,%eax
    6a0b:	75 17                	jne    6a24 <_ZN6Parser8HWStoHexEv+0xf0>
    6a0d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    6a11:	48 83 c0 50          	add    $0x50,%rax
    6a15:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6a1c <_ZN6Parser8HWStoHexEv+0xe8>
    6a1c:	48 89 c7             	mov    %rax,%rdi
    6a1f:	e8 00 00 00 00       	callq  6a24 <_ZN6Parser8HWStoHexEv+0xf0>
        if(c<16) this->hwSequenceCompiledHex.append("0");
    6a24:	80 7d c7 0f          	cmpb   $0xf,-0x39(%rbp)
    6a28:	77 17                	ja     6a41 <_ZN6Parser8HWStoHexEv+0x10d>
    6a2a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    6a2e:	48 83 c0 50          	add    $0x50,%rax
    6a32:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6a39 <_ZN6Parser8HWStoHexEv+0x105>
    6a39:	48 89 c7             	mov    %rax,%rdi
    6a3c:	e8 00 00 00 00       	callq  6a41 <_ZN6Parser8HWStoHexEv+0x10d>
        this->hwSequenceCompiledHex.append(hex + " ");
    6a41:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6a45:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
    6a49:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 6a50 <_ZN6Parser8HWStoHexEv+0x11c>
    6a50:	48 89 ce             	mov    %rcx,%rsi
    6a53:	48 89 c7             	mov    %rax,%rdi
    6a56:	e8 00 00 00 00       	callq  6a5b <_ZN6Parser8HWStoHexEv+0x127>
    6a5b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    6a5f:	48 8d 50 50          	lea    0x50(%rax),%rdx
    6a63:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6a67:	48 89 c6             	mov    %rax,%rsi
    6a6a:	48 89 d7             	mov    %rdx,%rdi
    6a6d:	e8 00 00 00 00       	callq  6a72 <_ZN6Parser8HWStoHexEv+0x13e>
    6a72:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6a76:	48 89 c7             	mov    %rax,%rdi
    6a79:	e8 00 00 00 00       	callq  6a7e <_ZN6Parser8HWStoHexEv+0x14a>
    this->hwSequenceCompiledHex.clear();
    int n = this->hwSequenceCompiled.size();
    int i = 0;
    for(i=0; i<n; i++){
        unsigned char c = this->hwSequenceCompiled.at(i);
        QString hex = QString::number(c, 16);
    6a7e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6a82:	48 89 c7             	mov    %rax,%rdi
    6a85:	e8 00 00 00 00       	callq  6a8a <_ZN6Parser8HWStoHexEv+0x156>
void Parser::HWStoHex(){

    this->hwSequenceCompiledHex.clear();
    int n = this->hwSequenceCompiled.size();
    int i = 0;
    for(i=0; i<n; i++){
    6a8a:	83 45 c8 01          	addl   $0x1,-0x38(%rbp)
    6a8e:	e9 f0 fe ff ff       	jmpq   6983 <_ZN6Parser8HWStoHexEv+0x4f>
    6a93:	48 89 c3             	mov    %rax,%rbx

        if(i%4 == 0) this->hwSequenceCompiledHex.append("  ");
        if(i%8 == 0) this->hwSequenceCompiledHex.append("   ");
        if(i%16 == 0) this->hwSequenceCompiledHex.append("\n");
        if(c<16) this->hwSequenceCompiledHex.append("0");
        this->hwSequenceCompiledHex.append(hex + " ");
    6a96:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    6a9a:	48 89 c7             	mov    %rax,%rdi
    6a9d:	e8 00 00 00 00       	callq  6aa2 <_ZN6Parser8HWStoHexEv+0x16e>
    6aa2:	eb 03                	jmp    6aa7 <_ZN6Parser8HWStoHexEv+0x173>
    6aa4:	48 89 c3             	mov    %rax,%rbx
    this->hwSequenceCompiledHex.clear();
    int n = this->hwSequenceCompiled.size();
    int i = 0;
    for(i=0; i<n; i++){
        unsigned char c = this->hwSequenceCompiled.at(i);
        QString hex = QString::number(c, 16);
    6aa7:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6aab:	48 89 c7             	mov    %rax,%rdi
    6aae:	e8 00 00 00 00       	callq  6ab3 <_ZN6Parser8HWStoHexEv+0x17f>
    6ab3:	48 89 d8             	mov    %rbx,%rax
    6ab6:	48 89 c7             	mov    %rax,%rdi
    6ab9:	e8 00 00 00 00       	callq  6abe <_ZN6Parser8HWStoHexEv+0x18a>
        if(i%16 == 0) this->hwSequenceCompiledHex.append("\n");
        if(c<16) this->hwSequenceCompiledHex.append("0");
        this->hwSequenceCompiledHex.append(hex + " ");

    }
}
    6abe:	90                   	nop
    6abf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    6ac3:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    6aca:	00 00 
    6acc:	74 05                	je     6ad3 <_ZN6Parser8HWStoHexEv+0x19f>
    6ace:	e8 00 00 00 00       	callq  6ad3 <_ZN6Parser8HWStoHexEv+0x19f>
    6ad3:	48 83 c4 48          	add    $0x48,%rsp
    6ad7:	5b                   	pop    %rbx
    6ad8:	5d                   	pop    %rbp
    6ad9:	c3                   	retq   

0000000000006ada <_ZN6Parser10compileHWSEv>:

void Parser::compileHWS(){
    6ada:	55                   	push   %rbp
    6adb:	48 89 e5             	mov    %rsp,%rbp
    6ade:	53                   	push   %rbx
    6adf:	48 81 ec 38 01 00 00 	sub    $0x138,%rsp
    6ae6:	48 89 bd c8 fe ff ff 	mov    %rdi,-0x138(%rbp)
    6aed:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    6af4:	00 00 
    6af6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    6afa:	31 c0                	xor    %eax,%eax
    QHash<QString, QStringList>::iterator it;
    6afc:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    6b03:	48 89 c7             	mov    %rax,%rdi
    6b06:	e8 00 00 00 00       	callq  6b0b <_ZN6Parser10compileHWSEv+0x31>
    QStringList content;
    6b0b:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    6b12:	48 89 c7             	mov    %rax,%rdi
    6b15:	e8 00 00 00 00       	callq  6b1a <_ZN6Parser10compileHWSEv+0x40>
    QString     hwSequenceID;
    6b1a:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    6b21:	48 89 c7             	mov    %rax,%rdi
    6b24:	e8 00 00 00 00       	callq  6b29 <_ZN6Parser10compileHWSEv+0x4f>

    //byte-code
    char blockCounter = 0xFF;
    6b29:	c6 85 db fe ff ff ff 	movb   $0xff,-0x125(%rbp)
    char HWS_OPCODE  = 0x06;
    6b30:	c6 85 dc fe ff ff 06 	movb   $0x6,-0x124(%rbp)


    quint16 CRC16       = 0; // не обнуляется в цикле.
    6b37:	66 c7 85 de fe ff ff 	movw   $0x0,-0x122(%rbp)
    6b3e:	00 00 

    QStringList hwsModules;
    6b40:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    6b47:	48 89 c7             	mov    %rax,%rdi
    6b4a:	e8 00 00 00 00       	callq  6b4f <_ZN6Parser10compileHWSEv+0x75>

    for(it=this->hwSequence.begin();  it!=this->hwSequence.end();  ++it){
    6b4f:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6b56:	48 05 b8 00 00 00    	add    $0xb8,%rax
    6b5c:	48 89 c7             	mov    %rax,%rdi
    6b5f:	e8 00 00 00 00       	callq  6b64 <_ZN6Parser10compileHWSEv+0x8a>
    6b64:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
    6b6b:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6b72:	48 05 b8 00 00 00    	add    $0xb8,%rax
    6b78:	48 89 c7             	mov    %rax,%rdi
    6b7b:	e8 00 00 00 00       	callq  6b80 <_ZN6Parser10compileHWSEv+0xa6>
    6b80:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
    6b87:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    6b8e:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    6b95:	48 89 d6             	mov    %rdx,%rsi
    6b98:	48 89 c7             	mov    %rax,%rdi
    6b9b:	e8 00 00 00 00       	callq  6ba0 <_ZN6Parser10compileHWSEv+0xc6>
    6ba0:	84 c0                	test   %al,%al
    6ba2:	0f 84 ef 07 00 00    	je     7397 <_ZN6Parser10compileHWSEv+0x8bd>

        this->hwSequenceCompiled.append(blockCounter);
    6ba8:	0f be 85 db fe ff ff 	movsbl -0x125(%rbp),%eax
    6baf:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    6bb6:	48 81 c2 c0 00 00 00 	add    $0xc0,%rdx
    6bbd:	89 c6                	mov    %eax,%esi
    6bbf:	48 89 d7             	mov    %rdx,%rdi
    6bc2:	e8 00 00 00 00       	callq  6bc7 <_ZN6Parser10compileHWSEv+0xed>
        this->hwSequenceCompiled.append(HWS_OPCODE);
    6bc7:	0f be 85 dc fe ff ff 	movsbl -0x124(%rbp),%eax
    6bce:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    6bd5:	48 81 c2 c0 00 00 00 	add    $0xc0,%rdx
    6bdc:	89 c6                	mov    %eax,%esi
    6bde:	48 89 d7             	mov    %rdx,%rdi
    6be1:	e8 00 00 00 00       	callq  6be6 <_ZN6Parser10compileHWSEv+0x10c>

        content         = it.value();
    6be6:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    6bed:	48 89 c7             	mov    %rax,%rdi
    6bf0:	e8 00 00 00 00       	callq  6bf5 <_ZN6Parser10compileHWSEv+0x11b>
    6bf5:	48 89 c2             	mov    %rax,%rdx
    6bf8:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    6bff:	48 89 d6             	mov    %rdx,%rsi
    6c02:	48 89 c7             	mov    %rax,%rdi
    6c05:	e8 00 00 00 00       	callq  6c0a <_ZN6Parser10compileHWSEv+0x130>
        hwSequenceID    = it.key();
    6c0a:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    6c11:	48 89 c7             	mov    %rax,%rdi
    6c14:	e8 00 00 00 00       	callq  6c19 <_ZN6Parser10compileHWSEv+0x13f>
    6c19:	48 89 c2             	mov    %rax,%rdx
    6c1c:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    6c23:	48 89 d6             	mov    %rdx,%rsi
    6c26:	48 89 c7             	mov    %rax,%rdi
    6c29:	e8 00 00 00 00       	callq  6c2e <_ZN6Parser10compileHWSEv+0x154>
        quint16 counter     = 0;
    6c2e:	66 c7 85 e0 fe ff ff 	movw   $0x0,-0x120(%rbp)
    6c35:	00 00 
                 // ...
        QString strHWSID    = this->defines.value(hwSequenceID);  // то что в скобках
    6c37:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6c3e:	48 8d 48 28          	lea    0x28(%rax),%rcx
    6c42:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    6c49:	48 8d 95 20 ff ff ff 	lea    -0xe0(%rbp),%rdx
    6c50:	48 89 ce             	mov    %rcx,%rsi
    6c53:	48 89 c7             	mov    %rax,%rdi
    6c56:	e8 00 00 00 00       	callq  6c5b <_ZN6Parser10compileHWSEv+0x181>
        bool    HWSID_detected;
        quint16 HWSID       = strHWSID.toInt(&HWSID_detected, 16);
    6c5b:	48 8d 8d d9 fe ff ff 	lea    -0x127(%rbp),%rcx
    6c62:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    6c69:	ba 10 00 00 00       	mov    $0x10,%edx
    6c6e:	48 89 ce             	mov    %rcx,%rsi
    6c71:	48 89 c7             	mov    %rax,%rdi
    6c74:	e8 00 00 00 00       	callq  6c79 <_ZN6Parser10compileHWSEv+0x19f>
    6c79:	66 89 85 e2 fe ff ff 	mov    %ax,-0x11e(%rbp)
        if(!HWSID_detected){
            // error
        }
        // How to convert int16 to 2 chars? Ok, divide it by 256..

        this->hwSequenceCompiled.append(HWSID%256);
    6c80:	0f b7 85 e2 fe ff ff 	movzwl -0x11e(%rbp),%eax
    6c87:	0f be c0             	movsbl %al,%eax
    6c8a:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    6c91:	48 81 c2 c0 00 00 00 	add    $0xc0,%rdx
    6c98:	89 c6                	mov    %eax,%esi
    6c9a:	48 89 d7             	mov    %rdx,%rdi
    6c9d:	e8 00 00 00 00       	callq  6ca2 <_ZN6Parser10compileHWSEv+0x1c8>
        this->hwSequenceCompiled.append(HWSID/256);
    6ca2:	0f b7 85 e2 fe ff ff 	movzwl -0x11e(%rbp),%eax
    6ca9:	66 c1 e8 08          	shr    $0x8,%ax
    6cad:	0f be c0             	movsbl %al,%eax
    6cb0:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    6cb7:	48 81 c2 c0 00 00 00 	add    $0xc0,%rdx
    6cbe:	89 c6                	mov    %eax,%esi
    6cc0:	48 89 d7             	mov    %rdx,%rdi
    6cc3:	e8 00 00 00 00       	callq  6cc8 <_ZN6Parser10compileHWSEv+0x1ee>

        int addrTotal = this->hwSequenceCompiled.size();
    6cc8:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6ccf:	48 05 c0 00 00 00    	add    $0xc0,%rax
    6cd5:	48 89 c7             	mov    %rax,%rdi
    6cd8:	e8 00 00 00 00       	callq  6cdd <_ZN6Parser10compileHWSEv+0x203>
    6cdd:	89 85 ec fe ff ff    	mov    %eax,-0x114(%rbp)
        int addrLocal = this->hwSequenceCompiled.size() + 2;
    6ce3:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6cea:	48 05 c0 00 00 00    	add    $0xc0,%rax
    6cf0:	48 89 c7             	mov    %rax,%rdi
    6cf3:	e8 00 00 00 00       	callq  6cf8 <_ZN6Parser10compileHWSEv+0x21e>
    6cf8:	83 c0 02             	add    $0x2,%eax
    6cfb:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%rbp)

        this->hwSequenceCompiled.append("xxxx");  // CRC16, counter;
    6d01:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6d08:	48 05 c0 00 00 00    	add    $0xc0,%rax
    6d0e:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6d15 <_ZN6Parser10compileHWSEv+0x23b>
    6d15:	48 89 c7             	mov    %rax,%rdi
    6d18:	e8 00 00 00 00       	callq  6d1d <_ZN6Parser10compileHWSEv+0x243>

        int i;
        int n = content.size();
    6d1d:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    6d24:	48 89 c7             	mov    %rax,%rdi
    6d27:	e8 00 00 00 00       	callq  6d2c <_ZN6Parser10compileHWSEv+0x252>
    6d2c:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%rbp)

        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
    6d32:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    6d36:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6d3d <_ZN6Parser10compileHWSEv+0x263>
    6d3d:	48 89 c7             	mov    %rax,%rdi
    6d40:	e8 00 00 00 00       	callq  6d45 <_ZN6Parser10compileHWSEv+0x26b>
    6d45:	48 8d 75 80          	lea    -0x80(%rbp),%rsi
    6d49:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    6d50:	b9 00 00 00 00       	mov    $0x0,%ecx
    6d55:	ba 01 00 00 00       	mov    $0x1,%edx
    6d5a:	48 89 c7             	mov    %rax,%rdi
    6d5d:	e8 00 00 00 00       	callq  6d62 <_ZN6Parser10compileHWSEv+0x288>
    6d62:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    6d66:	48 89 c7             	mov    %rax,%rdi
    6d69:	e8 00 00 00 00       	callq  6d6e <_ZN6Parser10compileHWSEv+0x294>
        QRegExp QRDefinition("([\\w\\d\\_]+)[\\s\\t]*\\:[\\s\\t]*([\\w\\d]+)");
    6d6e:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    6d72:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6d79 <_ZN6Parser10compileHWSEv+0x29f>
    6d79:	48 89 c7             	mov    %rax,%rdi
    6d7c:	e8 00 00 00 00       	callq  6d81 <_ZN6Parser10compileHWSEv+0x2a7>
    6d81:	48 8d 75 90          	lea    -0x70(%rbp),%rsi
    6d85:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    6d8c:	b9 00 00 00 00       	mov    $0x0,%ecx
    6d91:	ba 01 00 00 00       	mov    $0x1,%edx
    6d96:	48 89 c7             	mov    %rax,%rdi
    6d99:	e8 00 00 00 00       	callq  6d9e <_ZN6Parser10compileHWSEv+0x2c4>
    6d9e:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    6da2:	48 89 c7             	mov    %rax,%rdi
    6da5:	e8 00 00 00 00       	callq  6daa <_ZN6Parser10compileHWSEv+0x2d0>

        QString line;
    6daa:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    6db1:	48 89 c7             	mov    %rax,%rdi
    6db4:	e8 00 00 00 00       	callq  6db9 <_ZN6Parser10compileHWSEv+0x2df>

        for(i=0;i<n;i++){
    6db9:	c7 85 e8 fe ff ff 00 	movl   $0x0,-0x118(%rbp)
    6dc0:	00 00 00 
    6dc3:	8b 85 e8 fe ff ff    	mov    -0x118(%rbp),%eax
    6dc9:	3b 85 f4 fe ff ff    	cmp    -0x10c(%rbp),%eax
    6dcf:	0f 8d 6e 04 00 00    	jge    7243 <_ZN6Parser10compileHWSEv+0x769>
            line = content.at(i);
    6dd5:	8b 95 e8 fe ff ff    	mov    -0x118(%rbp),%edx
    6ddb:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    6de2:	89 d6                	mov    %edx,%esi
    6de4:	48 89 c7             	mov    %rax,%rdi
    6de7:	e8 00 00 00 00       	callq  6dec <_ZN6Parser10compileHWSEv+0x312>
    6dec:	48 89 c2             	mov    %rax,%rdx
    6def:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    6df6:	48 89 d6             	mov    %rdx,%rsi
    6df9:	48 89 c7             	mov    %rax,%rdi
    6dfc:	e8 00 00 00 00       	callq  6e01 <_ZN6Parser10compileHWSEv+0x327>
            this->strings.append(line); // DEL!
    6e01:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6e08:	48 8d 90 98 00 00 00 	lea    0x98(%rax),%rdx
    6e0f:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    6e16:	48 89 c6             	mov    %rax,%rsi
    6e19:	48 89 d7             	mov    %rdx,%rdi
    6e1c:	e8 00 00 00 00       	callq  6e21 <_ZN6Parser10compileHWSEv+0x347>
            int a = QRAnchor.indexIn(line);
    6e21:	48 8d b5 70 ff ff ff 	lea    -0x90(%rbp),%rsi
    6e28:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    6e2f:	b9 00 00 00 00       	mov    $0x0,%ecx
    6e34:	ba 00 00 00 00       	mov    $0x0,%edx
    6e39:	48 89 c7             	mov    %rax,%rdi
    6e3c:	e8 00 00 00 00       	callq  6e41 <_ZN6Parser10compileHWSEv+0x367>
    6e41:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%rbp)
            int d = QRDefinition.indexIn(line);
    6e47:	48 8d b5 70 ff ff ff 	lea    -0x90(%rbp),%rsi
    6e4e:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    6e55:	b9 00 00 00 00       	mov    $0x0,%ecx
    6e5a:	ba 00 00 00 00       	mov    $0x0,%edx
    6e5f:	48 89 c7             	mov    %rax,%rdi
    6e62:	e8 00 00 00 00       	callq  6e67 <_ZN6Parser10compileHWSEv+0x38d>
    6e67:	89 85 fc fe ff ff    	mov    %eax,-0x104(%rbp)
            QStringList anchors      = QRAnchor.capturedTexts();
    6e6d:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    6e71:	48 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%rdx
    6e78:	48 89 d6             	mov    %rdx,%rsi
    6e7b:	48 89 c7             	mov    %rax,%rdi
    6e7e:	e8 00 00 00 00       	callq  6e83 <_ZN6Parser10compileHWSEv+0x3a9>
            QStringList definitions  = QRDefinition.capturedTexts();
    6e83:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    6e87:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
    6e8e:	48 89 d6             	mov    %rdx,%rsi
    6e91:	48 89 c7             	mov    %rax,%rdi
    6e94:	e8 00 00 00 00       	callq  6e99 <_ZN6Parser10compileHWSEv+0x3bf>

            if(a>0){
    6e99:	83 bd f8 fe ff ff 00 	cmpl   $0x0,-0x108(%rbp)
    6ea0:	0f 8e 41 01 00 00    	jle    6fe7 <_ZN6Parser10compileHWSEv+0x50d>
                //CRC16++;
                bool anchor_detected;

                counter++;
    6ea6:	0f b7 85 e0 fe ff ff 	movzwl -0x120(%rbp),%eax
    6ead:	83 c0 01             	add    $0x1,%eax
    6eb0:	66 89 85 e0 fe ff ff 	mov    %ax,-0x120(%rbp)
                this->strings.append("anchor");
    6eb7:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    6ebb:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6ec2 <_ZN6Parser10compileHWSEv+0x3e8>
    6ec2:	48 89 c7             	mov    %rax,%rdi
    6ec5:	e8 00 00 00 00       	callq  6eca <_ZN6Parser10compileHWSEv+0x3f0>
    6eca:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6ed1:	48 8d 90 98 00 00 00 	lea    0x98(%rax),%rdx
    6ed8:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    6edc:	48 89 c6             	mov    %rax,%rsi
    6edf:	48 89 d7             	mov    %rdx,%rdi
    6ee2:	e8 00 00 00 00       	callq  6ee7 <_ZN6Parser10compileHWSEv+0x40d>
    6ee7:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    6eeb:	48 89 c7             	mov    %rax,%rdi
    6eee:	e8 00 00 00 00       	callq  6ef3 <_ZN6Parser10compileHWSEv+0x419>
                QString anchor = anchors.at(1);
    6ef3:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    6ef7:	be 01 00 00 00       	mov    $0x1,%esi
    6efc:	48 89 c7             	mov    %rax,%rdi
    6eff:	e8 00 00 00 00       	callq  6f04 <_ZN6Parser10compileHWSEv+0x42a>
    6f04:	48 89 c2             	mov    %rax,%rdx
    6f07:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6f0b:	48 89 d6             	mov    %rdx,%rsi
    6f0e:	48 89 c7             	mov    %rax,%rdi
    6f11:	e8 00 00 00 00       	callq  6f16 <_ZN6Parser10compileHWSEv+0x43c>
                quint16 anchorID = this->defines.value(anchor).toInt(&anchor_detected, 16);
    6f16:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6f1d:	48 8d 48 28          	lea    0x28(%rax),%rcx
    6f21:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    6f25:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    6f29:	48 89 ce             	mov    %rcx,%rsi
    6f2c:	48 89 c7             	mov    %rax,%rdi
    6f2f:	e8 00 00 00 00       	callq  6f34 <_ZN6Parser10compileHWSEv+0x45a>
    6f34:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
    6f38:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    6f3c:	ba 10 00 00 00       	mov    $0x10,%edx
    6f41:	48 89 ce             	mov    %rcx,%rsi
    6f44:	48 89 c7             	mov    %rax,%rdi
    6f47:	e8 00 00 00 00       	callq  6f4c <_ZN6Parser10compileHWSEv+0x472>
    6f4c:	66 89 85 e4 fe ff ff 	mov    %ax,-0x11c(%rbp)
    6f53:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    6f57:	48 89 c7             	mov    %rax,%rdi
    6f5a:	e8 00 00 00 00       	callq  6f5f <_ZN6Parser10compileHWSEv+0x485>
                this->hwSequenceCompiled.append(255);
    6f5f:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6f66:	48 05 c0 00 00 00    	add    $0xc0,%rax
    6f6c:	be ff ff ff ff       	mov    $0xffffffff,%esi
    6f71:	48 89 c7             	mov    %rax,%rdi
    6f74:	e8 00 00 00 00       	callq  6f79 <_ZN6Parser10compileHWSEv+0x49f>
                this->hwSequenceCompiled.append(255);
    6f79:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    6f80:	48 05 c0 00 00 00    	add    $0xc0,%rax
    6f86:	be ff ff ff ff       	mov    $0xffffffff,%esi
    6f8b:	48 89 c7             	mov    %rax,%rdi
    6f8e:	e8 00 00 00 00       	callq  6f93 <_ZN6Parser10compileHWSEv+0x4b9>
                this->hwSequenceCompiled.append(anchorID%256);
    6f93:	0f b7 85 e4 fe ff ff 	movzwl -0x11c(%rbp),%eax
    6f9a:	0f be c0             	movsbl %al,%eax
    6f9d:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    6fa4:	48 81 c2 c0 00 00 00 	add    $0xc0,%rdx
    6fab:	89 c6                	mov    %eax,%esi
    6fad:	48 89 d7             	mov    %rdx,%rdi
    6fb0:	e8 00 00 00 00       	callq  6fb5 <_ZN6Parser10compileHWSEv+0x4db>
                this->hwSequenceCompiled.append(anchorID/256);
    6fb5:	0f b7 85 e4 fe ff ff 	movzwl -0x11c(%rbp),%eax
    6fbc:	66 c1 e8 08          	shr    $0x8,%ax
    6fc0:	0f be c0             	movsbl %al,%eax
    6fc3:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    6fca:	48 81 c2 c0 00 00 00 	add    $0xc0,%rdx
    6fd1:	89 c6                	mov    %eax,%esi
    6fd3:	48 89 d7             	mov    %rdx,%rdi
    6fd6:	e8 00 00 00 00       	callq  6fdb <_ZN6Parser10compileHWSEv+0x501>
                //CRC16++;
                bool anchor_detected;

                counter++;
                this->strings.append("anchor");
                QString anchor = anchors.at(1);
    6fdb:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    6fdf:	48 89 c7             	mov    %rax,%rdi
    6fe2:	e8 00 00 00 00       	callq  6fe7 <_ZN6Parser10compileHWSEv+0x50d>
                this->hwSequenceCompiled.append(255);
                this->hwSequenceCompiled.append(255);
                this->hwSequenceCompiled.append(anchorID%256);
                this->hwSequenceCompiled.append(anchorID/256);
            }
            if(d>0){
    6fe7:	83 bd fc fe ff ff 00 	cmpl   $0x0,-0x104(%rbp)
    6fee:	0f 8e 2b 02 00 00    	jle    721f <_ZN6Parser10compileHWSEv+0x745>
                CRC16++;
    6ff4:	0f b7 85 de fe ff ff 	movzwl -0x122(%rbp),%eax
    6ffb:	83 c0 01             	add    $0x1,%eax
    6ffe:	66 89 85 de fe ff ff 	mov    %ax,-0x122(%rbp)
                counter++;
    7005:	0f b7 85 e0 fe ff ff 	movzwl -0x120(%rbp),%eax
    700c:	83 c0 01             	add    $0x1,%eax
    700f:	66 89 85 e0 fe ff ff 	mov    %ax,-0x120(%rbp)
                this->strings.append("definition");
    7016:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    701a:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 7021 <_ZN6Parser10compileHWSEv+0x547>
    7021:	48 89 c7             	mov    %rax,%rdi
    7024:	e8 00 00 00 00       	callq  7029 <_ZN6Parser10compileHWSEv+0x54f>
    7029:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    7030:	48 8d 90 98 00 00 00 	lea    0x98(%rax),%rdx
    7037:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    703b:	48 89 c6             	mov    %rax,%rsi
    703e:	48 89 d7             	mov    %rdx,%rdi
    7041:	e8 00 00 00 00       	callq  7046 <_ZN6Parser10compileHWSEv+0x56c>
    7046:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    704a:	48 89 c7             	mov    %rax,%rdi
    704d:	e8 00 00 00 00       	callq  7052 <_ZN6Parser10compileHWSEv+0x578>
                QString strModuleID         = definitions.at(1);
    7052:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    7056:	be 01 00 00 00       	mov    $0x1,%esi
    705b:	48 89 c7             	mov    %rax,%rdi
    705e:	e8 00 00 00 00       	callq  7063 <_ZN6Parser10compileHWSEv+0x589>
    7063:	48 89 c2             	mov    %rax,%rdx
    7066:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    706a:	48 89 d6             	mov    %rdx,%rsi
    706d:	48 89 c7             	mov    %rax,%rdi
    7070:	e8 00 00 00 00       	callq  7075 <_ZN6Parser10compileHWSEv+0x59b>
                QString strModulePosition   = definitions.at(2);
    7075:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    7079:	be 02 00 00 00       	mov    $0x2,%esi
    707e:	48 89 c7             	mov    %rax,%rdi
    7081:	e8 00 00 00 00       	callq  7086 <_ZN6Parser10compileHWSEv+0x5ac>
    7086:	48 89 c2             	mov    %rax,%rdx
    7089:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    708d:	48 89 d6             	mov    %rdx,%rsi
    7090:	48 89 c7             	mov    %rax,%rdi
    7093:	e8 00 00 00 00       	callq  7098 <_ZN6Parser10compileHWSEv+0x5be>
                bool module_detected;
                bool position_detected;

                quint8 moduleHWID       = 0;
    7098:	c6 85 da fe ff ff 00 	movb   $0x0,-0x126(%rbp)
                quint8 moduleID         = this->defines.value(strModuleID).toInt(&module_detected, 16);
    709f:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    70a6:	48 8d 48 28          	lea    0x28(%rax),%rcx
    70aa:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    70ae:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    70b2:	48 89 ce             	mov    %rcx,%rsi
    70b5:	48 89 c7             	mov    %rax,%rdi
    70b8:	e8 00 00 00 00       	callq  70bd <_ZN6Parser10compileHWSEv+0x5e3>
    70bd:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
    70c1:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    70c5:	ba 10 00 00 00       	mov    $0x10,%edx
    70ca:	48 89 ce             	mov    %rcx,%rsi
    70cd:	48 89 c7             	mov    %rax,%rdi
    70d0:	e8 00 00 00 00       	callq  70d5 <_ZN6Parser10compileHWSEv+0x5fb>
    70d5:	88 85 dd fe ff ff    	mov    %al,-0x123(%rbp)
    70db:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    70df:	48 89 c7             	mov    %rax,%rdi
    70e2:	e8 00 00 00 00       	callq  70e7 <_ZN6Parser10compileHWSEv+0x60d>
                quint16 modulePosition  = strModulePosition.toInt(&module_detected, 10);
    70e7:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
    70eb:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    70ef:	ba 0a 00 00 00       	mov    $0xa,%edx
    70f4:	48 89 ce             	mov    %rcx,%rsi
    70f7:	48 89 c7             	mov    %rax,%rdi
    70fa:	e8 00 00 00 00       	callq  70ff <_ZN6Parser10compileHWSEv+0x625>
    70ff:	66 89 85 e6 fe ff ff 	mov    %ax,-0x11a(%rbp)

                if(module_detected){
    7106:	0f b6 45 a0          	movzbl -0x60(%rbp),%eax
    710a:	84 c0                	test   %al,%al
    710c:	74 6d                	je     717b <_ZN6Parser10compileHWSEv+0x6a1>
                    // check, is this module in list. If not, append it, else take it number;
                    if (!hwsModules.contains(strModuleID, Qt::CaseInsensitive)){
    710e:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
    7112:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    7119:	ba 00 00 00 00       	mov    $0x0,%edx
    711e:	48 89 ce             	mov    %rcx,%rsi
    7121:	48 89 c7             	mov    %rax,%rdi
    7124:	e8 00 00 00 00       	callq  7129 <_ZN6Parser10compileHWSEv+0x64f>
    7129:	83 f0 01             	xor    $0x1,%eax
    712c:	84 c0                	test   %al,%al
    712e:	74 2a                	je     715a <_ZN6Parser10compileHWSEv+0x680>
                        hwsModules.append(strModuleID);
    7130:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    7134:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    713b:	48 89 d6             	mov    %rdx,%rsi
    713e:	48 89 c7             	mov    %rax,%rdi
    7141:	e8 00 00 00 00       	callq  7146 <_ZN6Parser10compileHWSEv+0x66c>
                        if(hwsModules.size()>254){
    7146:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    714d:	48 89 c7             	mov    %rax,%rdi
    7150:	e8 00 00 00 00       	callq  7155 <_ZN6Parser10compileHWSEv+0x67b>
    7155:	3d fe 00 00 00       	cmp    $0xfe,%eax
                            // error. Overflow!
                        }
                    }
                    moduleHWID = hwsModules.indexOf(strModuleID);
    715a:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
    715e:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    7165:	ba 00 00 00 00       	mov    $0x0,%edx
    716a:	48 89 ce             	mov    %rcx,%rsi
    716d:	48 89 c7             	mov    %rax,%rdi
    7170:	e8 00 00 00 00       	callq  7175 <_ZN6Parser10compileHWSEv+0x69b>
    7175:	88 85 da fe ff ff    	mov    %al,-0x126(%rbp)
                }
                this->hwSequenceCompiled.append(moduleHWID);
    717b:	0f b6 85 da fe ff ff 	movzbl -0x126(%rbp),%eax
    7182:	0f be c0             	movsbl %al,%eax
    7185:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    718c:	48 81 c2 c0 00 00 00 	add    $0xc0,%rdx
    7193:	89 c6                	mov    %eax,%esi
    7195:	48 89 d7             	mov    %rdx,%rdi
    7198:	e8 00 00 00 00       	callq  719d <_ZN6Parser10compileHWSEv+0x6c3>
                this->hwSequenceCompiled.append(moduleID);
    719d:	0f b6 85 dd fe ff ff 	movzbl -0x123(%rbp),%eax
    71a4:	0f be c0             	movsbl %al,%eax
    71a7:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    71ae:	48 81 c2 c0 00 00 00 	add    $0xc0,%rdx
    71b5:	89 c6                	mov    %eax,%esi
    71b7:	48 89 d7             	mov    %rdx,%rdi
    71ba:	e8 00 00 00 00       	callq  71bf <_ZN6Parser10compileHWSEv+0x6e5>
                this->hwSequenceCompiled.append(modulePosition%256);
    71bf:	0f b7 85 e6 fe ff ff 	movzwl -0x11a(%rbp),%eax
    71c6:	0f be c0             	movsbl %al,%eax
    71c9:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    71d0:	48 81 c2 c0 00 00 00 	add    $0xc0,%rdx
    71d7:	89 c6                	mov    %eax,%esi
    71d9:	48 89 d7             	mov    %rdx,%rdi
    71dc:	e8 00 00 00 00       	callq  71e1 <_ZN6Parser10compileHWSEv+0x707>
                this->hwSequenceCompiled.append(modulePosition/256);
    71e1:	0f b7 85 e6 fe ff ff 	movzwl -0x11a(%rbp),%eax
    71e8:	66 c1 e8 08          	shr    $0x8,%ax
    71ec:	0f be c0             	movsbl %al,%eax
    71ef:	48 8b 95 c8 fe ff ff 	mov    -0x138(%rbp),%rdx
    71f6:	48 81 c2 c0 00 00 00 	add    $0xc0,%rdx
    71fd:	89 c6                	mov    %eax,%esi
    71ff:	48 89 d7             	mov    %rdx,%rdi
    7202:	e8 00 00 00 00       	callq  7207 <_ZN6Parser10compileHWSEv+0x72d>
            if(d>0){
                CRC16++;
                counter++;
                this->strings.append("definition");
                QString strModuleID         = definitions.at(1);
                QString strModulePosition   = definitions.at(2);
    7207:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    720b:	48 89 c7             	mov    %rax,%rdi
    720e:	e8 00 00 00 00       	callq  7213 <_ZN6Parser10compileHWSEv+0x739>
            }
            if(d>0){
                CRC16++;
                counter++;
                this->strings.append("definition");
                QString strModuleID         = definitions.at(1);
    7213:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7217:	48 89 c7             	mov    %rax,%rdi
    721a:	e8 00 00 00 00       	callq  721f <_ZN6Parser10compileHWSEv+0x745>
            line = content.at(i);
            this->strings.append(line); // DEL!
            int a = QRAnchor.indexIn(line);
            int d = QRDefinition.indexIn(line);
            QStringList anchors      = QRAnchor.capturedTexts();
            QStringList definitions  = QRDefinition.capturedTexts();
    721f:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    7223:	48 89 c7             	mov    %rax,%rdi
    7226:	e8 00 00 00 00       	callq  722b <_ZN6Parser10compileHWSEv+0x751>
        for(i=0;i<n;i++){
            line = content.at(i);
            this->strings.append(line); // DEL!
            int a = QRAnchor.indexIn(line);
            int d = QRDefinition.indexIn(line);
            QStringList anchors      = QRAnchor.capturedTexts();
    722b:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    722f:	48 89 c7             	mov    %rax,%rdi
    7232:	e8 00 00 00 00       	callq  7237 <_ZN6Parser10compileHWSEv+0x75d>
        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
        QRegExp QRDefinition("([\\w\\d\\_]+)[\\s\\t]*\\:[\\s\\t]*([\\w\\d]+)");

        QString line;

        for(i=0;i<n;i++){
    7237:	83 85 e8 fe ff ff 01 	addl   $0x1,-0x118(%rbp)
    723e:	e9 80 fb ff ff       	jmpq   6dc3 <_ZN6Parser10compileHWSEv+0x2e9>
                this->hwSequenceCompiled.append(moduleID);
                this->hwSequenceCompiled.append(modulePosition%256);
                this->hwSequenceCompiled.append(modulePosition/256);
            }
        }
        this->hwSequenceCompiled[addrLocal + 0] = counter%256;
    7243:	0f b7 85 e0 fe ff ff 	movzwl -0x120(%rbp),%eax
    724a:	0f be d8             	movsbl %al,%ebx
    724d:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    7254:	48 8d 90 c0 00 00 00 	lea    0xc0(%rax),%rdx
    725b:	8b 85 f0 fe ff ff    	mov    -0x110(%rbp),%eax
    7261:	89 c6                	mov    %eax,%esi
    7263:	48 89 d7             	mov    %rdx,%rdi
    7266:	e8 00 00 00 00       	callq  726b <_ZN6Parser10compileHWSEv+0x791>
    726b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    726f:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    7273:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7277:	89 de                	mov    %ebx,%esi
    7279:	48 89 c7             	mov    %rax,%rdi
    727c:	e8 00 00 00 00       	callq  7281 <_ZN6Parser10compileHWSEv+0x7a7>
        this->hwSequenceCompiled[addrLocal + 1] = counter/256;
    7281:	0f b7 85 e0 fe ff ff 	movzwl -0x120(%rbp),%eax
    7288:	66 c1 e8 08          	shr    $0x8,%ax
    728c:	0f be d8             	movsbl %al,%ebx
    728f:	8b 85 f0 fe ff ff    	mov    -0x110(%rbp),%eax
    7295:	8d 50 01             	lea    0x1(%rax),%edx
    7298:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    729f:	48 05 c0 00 00 00    	add    $0xc0,%rax
    72a5:	89 d6                	mov    %edx,%esi
    72a7:	48 89 c7             	mov    %rax,%rdi
    72aa:	e8 00 00 00 00       	callq  72af <_ZN6Parser10compileHWSEv+0x7d5>
    72af:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    72b3:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    72b7:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    72bb:	89 de                	mov    %ebx,%esi
    72bd:	48 89 c7             	mov    %rax,%rdi
    72c0:	e8 00 00 00 00       	callq  72c5 <_ZN6Parser10compileHWSEv+0x7eb>
        this->hwSequenceCompiled[addrTotal + 0] = counter%256; //crc?
    72c5:	0f b7 85 e0 fe ff ff 	movzwl -0x120(%rbp),%eax
    72cc:	0f be d8             	movsbl %al,%ebx
    72cf:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    72d6:	48 8d 90 c0 00 00 00 	lea    0xc0(%rax),%rdx
    72dd:	8b 85 ec fe ff ff    	mov    -0x114(%rbp),%eax
    72e3:	89 c6                	mov    %eax,%esi
    72e5:	48 89 d7             	mov    %rdx,%rdi
    72e8:	e8 00 00 00 00       	callq  72ed <_ZN6Parser10compileHWSEv+0x813>
    72ed:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    72f1:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    72f5:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    72f9:	89 de                	mov    %ebx,%esi
    72fb:	48 89 c7             	mov    %rax,%rdi
    72fe:	e8 00 00 00 00       	callq  7303 <_ZN6Parser10compileHWSEv+0x829>
        this->hwSequenceCompiled[addrTotal + 1] = counter/256; //crc?
    7303:	0f b7 85 e0 fe ff ff 	movzwl -0x120(%rbp),%eax
    730a:	66 c1 e8 08          	shr    $0x8,%ax
    730e:	0f be d8             	movsbl %al,%ebx
    7311:	8b 85 ec fe ff ff    	mov    -0x114(%rbp),%eax
    7317:	8d 50 01             	lea    0x1(%rax),%edx
    731a:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    7321:	48 05 c0 00 00 00    	add    $0xc0,%rax
    7327:	89 d6                	mov    %edx,%esi
    7329:	48 89 c7             	mov    %rax,%rdi
    732c:	e8 00 00 00 00       	callq  7331 <_ZN6Parser10compileHWSEv+0x857>
    7331:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    7335:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    7339:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    733d:	89 de                	mov    %ebx,%esi
    733f:	48 89 c7             	mov    %rax,%rdi
    7342:	e8 00 00 00 00       	callq  7347 <_ZN6Parser10compileHWSEv+0x86d>
        int n = content.size();

        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
        QRegExp QRDefinition("([\\w\\d\\_]+)[\\s\\t]*\\:[\\s\\t]*([\\w\\d]+)");

        QString line;
    7347:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    734e:	48 89 c7             	mov    %rax,%rdi
    7351:	e8 00 00 00 00       	callq  7356 <_ZN6Parser10compileHWSEv+0x87c>

        int i;
        int n = content.size();

        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
        QRegExp QRDefinition("([\\w\\d\\_]+)[\\s\\t]*\\:[\\s\\t]*([\\w\\d]+)");
    7356:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    735d:	48 89 c7             	mov    %rax,%rdi
    7360:	e8 00 00 00 00       	callq  7365 <_ZN6Parser10compileHWSEv+0x88b>
        this->hwSequenceCompiled.append("xxxx");  // CRC16, counter;

        int i;
        int n = content.size();

        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
    7365:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    736c:	48 89 c7             	mov    %rax,%rdi
    736f:	e8 00 00 00 00       	callq  7374 <_ZN6Parser10compileHWSEv+0x89a>

        content         = it.value();
        hwSequenceID    = it.key();
        quint16 counter     = 0;
                 // ...
        QString strHWSID    = this->defines.value(hwSequenceID);  // то что в скобках
    7374:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    737b:	48 89 c7             	mov    %rax,%rdi
    737e:	e8 00 00 00 00       	callq  7383 <_ZN6Parser10compileHWSEv+0x8a9>

    quint16 CRC16       = 0; // не обнуляется в цикле.

    QStringList hwsModules;

    for(it=this->hwSequence.begin();  it!=this->hwSequence.end();  ++it){
    7383:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
    738a:	48 89 c7             	mov    %rax,%rdi
    738d:	e8 00 00 00 00       	callq  7392 <_ZN6Parser10compileHWSEv+0x8b8>
    7392:	e9 d4 f7 ff ff       	jmpq   6b6b <_ZN6Parser10compileHWSEv+0x91>
        this->hwSequenceCompiled[addrLocal + 0] = counter%256;
        this->hwSequenceCompiled[addrLocal + 1] = counter/256;
        this->hwSequenceCompiled[addrTotal + 0] = counter%256; //crc?
        this->hwSequenceCompiled[addrTotal + 1] = counter/256; //crc?
    }
    this->hwSequenceCompiled[4] = CRC16%256;
    7397:	0f b7 85 de fe ff ff 	movzwl -0x122(%rbp),%eax
    739e:	0f be d8             	movsbl %al,%ebx
    73a1:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    73a8:	48 05 c0 00 00 00    	add    $0xc0,%rax
    73ae:	be 04 00 00 00       	mov    $0x4,%esi
    73b3:	48 89 c7             	mov    %rax,%rdi
    73b6:	e8 00 00 00 00       	callq  73bb <_ZN6Parser10compileHWSEv+0x8e1>
    73bb:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    73bf:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    73c3:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    73c7:	89 de                	mov    %ebx,%esi
    73c9:	48 89 c7             	mov    %rax,%rdi
    73cc:	e8 00 00 00 00       	callq  73d1 <_ZN6Parser10compileHWSEv+0x8f7>
    this->hwSequenceCompiled[5] = CRC16/256;
    73d1:	0f b7 85 de fe ff ff 	movzwl -0x122(%rbp),%eax
    73d8:	66 c1 e8 08          	shr    $0x8,%ax
    73dc:	0f be d8             	movsbl %al,%ebx
    73df:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    73e6:	48 05 c0 00 00 00    	add    $0xc0,%rax
    73ec:	be 05 00 00 00       	mov    $0x5,%esi
    73f1:	48 89 c7             	mov    %rax,%rdi
    73f4:	e8 00 00 00 00       	callq  73f9 <_ZN6Parser10compileHWSEv+0x91f>
    73f9:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    73fd:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    7401:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7405:	89 de                	mov    %ebx,%esi
    7407:	48 89 c7             	mov    %rax,%rdi
    740a:	e8 00 00 00 00       	callq  740f <_ZN6Parser10compileHWSEv+0x935>

    HWStoHex();
    740f:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
    7416:	48 89 c7             	mov    %rax,%rdi
    7419:	e8 00 00 00 00       	callq  741e <_ZN6Parser10compileHWSEv+0x944>
    char HWS_OPCODE  = 0x06;


    quint16 CRC16       = 0; // не обнуляется в цикле.

    QStringList hwsModules;
    741e:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    7425:	48 89 c7             	mov    %rax,%rdi
    7428:	e8 00 00 00 00       	callq  742d <_ZN6Parser10compileHWSEv+0x953>
}

void Parser::compileHWS(){
    QHash<QString, QStringList>::iterator it;
    QStringList content;
    QString     hwSequenceID;
    742d:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    7434:	48 89 c7             	mov    %rax,%rdi
    7437:	e8 00 00 00 00       	callq  743c <_ZN6Parser10compileHWSEv+0x962>
    }
}

void Parser::compileHWS(){
    QHash<QString, QStringList>::iterator it;
    QStringList content;
    743c:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    7443:	48 89 c7             	mov    %rax,%rdi
    7446:	e8 00 00 00 00       	callq  744b <_ZN6Parser10compileHWSEv+0x971>
    }
    this->hwSequenceCompiled[4] = CRC16%256;
    this->hwSequenceCompiled[5] = CRC16/256;

    HWStoHex();
}
    744b:	90                   	nop
    744c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7450:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    7457:	00 00 
    7459:	0f 84 8e 01 00 00    	je     75ed <_ZN6Parser10compileHWSEv+0xb13>
    745f:	e9 84 01 00 00       	jmpq   75e8 <_ZN6Parser10compileHWSEv+0xb0e>
    7464:	48 89 c3             	mov    %rax,%rbx
    7467:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    746b:	48 89 c7             	mov    %rax,%rdi
    746e:	e8 00 00 00 00       	callq  7473 <_ZN6Parser10compileHWSEv+0x999>
    7473:	e9 1a 01 00 00       	jmpq   7592 <_ZN6Parser10compileHWSEv+0xab8>
    7478:	48 89 c3             	mov    %rax,%rbx
    747b:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    7482:	48 89 c7             	mov    %rax,%rdi
    7485:	e8 00 00 00 00       	callq  748a <_ZN6Parser10compileHWSEv+0x9b0>
    748a:	e9 03 01 00 00       	jmpq   7592 <_ZN6Parser10compileHWSEv+0xab8>
    748f:	48 89 c3             	mov    %rax,%rbx
    7492:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    7496:	48 89 c7             	mov    %rax,%rdi
    7499:	e8 00 00 00 00       	callq  749e <_ZN6Parser10compileHWSEv+0x9c4>
    749e:	e9 db 00 00 00       	jmpq   757e <_ZN6Parser10compileHWSEv+0xaa4>
    74a3:	48 89 c3             	mov    %rax,%rbx
    74a6:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    74ad:	48 89 c7             	mov    %rax,%rdi
    74b0:	e8 00 00 00 00       	callq  74b5 <_ZN6Parser10compileHWSEv+0x9db>
    74b5:	e9 c4 00 00 00       	jmpq   757e <_ZN6Parser10compileHWSEv+0xaa4>
    74ba:	48 89 c3             	mov    %rax,%rbx
            if(a>0){
                //CRC16++;
                bool anchor_detected;

                counter++;
                this->strings.append("anchor");
    74bd:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    74c1:	48 89 c7             	mov    %rax,%rdi
    74c4:	e8 00 00 00 00       	callq  74c9 <_ZN6Parser10compileHWSEv+0x9ef>
    74c9:	eb 69                	jmp    7534 <_ZN6Parser10compileHWSEv+0xa5a>
    74cb:	48 89 c3             	mov    %rax,%rbx
                QString anchor = anchors.at(1);
                quint16 anchorID = this->defines.value(anchor).toInt(&anchor_detected, 16);
    74ce:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    74d2:	48 89 c7             	mov    %rax,%rdi
    74d5:	e8 00 00 00 00       	callq  74da <_ZN6Parser10compileHWSEv+0xa00>
    74da:	eb 03                	jmp    74df <_ZN6Parser10compileHWSEv+0xa05>
    74dc:	48 89 c3             	mov    %rax,%rbx
                //CRC16++;
                bool anchor_detected;

                counter++;
                this->strings.append("anchor");
                QString anchor = anchors.at(1);
    74df:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    74e3:	48 89 c7             	mov    %rax,%rdi
    74e6:	e8 00 00 00 00       	callq  74eb <_ZN6Parser10compileHWSEv+0xa11>
    74eb:	eb 47                	jmp    7534 <_ZN6Parser10compileHWSEv+0xa5a>
    74ed:	48 89 c3             	mov    %rax,%rbx
                this->hwSequenceCompiled.append(anchorID/256);
            }
            if(d>0){
                CRC16++;
                counter++;
                this->strings.append("definition");
    74f0:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    74f4:	48 89 c7             	mov    %rax,%rdi
    74f7:	e8 00 00 00 00       	callq  74fc <_ZN6Parser10compileHWSEv+0xa22>
    74fc:	eb 36                	jmp    7534 <_ZN6Parser10compileHWSEv+0xa5a>
    74fe:	48 89 c3             	mov    %rax,%rbx
                QString strModulePosition   = definitions.at(2);
                bool module_detected;
                bool position_detected;

                quint8 moduleHWID       = 0;
                quint8 moduleID         = this->defines.value(strModuleID).toInt(&module_detected, 16);
    7501:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7505:	48 89 c7             	mov    %rax,%rdi
    7508:	e8 00 00 00 00       	callq  750d <_ZN6Parser10compileHWSEv+0xa33>
    750d:	eb 03                	jmp    7512 <_ZN6Parser10compileHWSEv+0xa38>
    750f:	48 89 c3             	mov    %rax,%rbx
            if(d>0){
                CRC16++;
                counter++;
                this->strings.append("definition");
                QString strModuleID         = definitions.at(1);
                QString strModulePosition   = definitions.at(2);
    7512:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7516:	48 89 c7             	mov    %rax,%rdi
    7519:	e8 00 00 00 00       	callq  751e <_ZN6Parser10compileHWSEv+0xa44>
    751e:	eb 03                	jmp    7523 <_ZN6Parser10compileHWSEv+0xa49>
    7520:	48 89 c3             	mov    %rax,%rbx
            }
            if(d>0){
                CRC16++;
                counter++;
                this->strings.append("definition");
                QString strModuleID         = definitions.at(1);
    7523:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7527:	48 89 c7             	mov    %rax,%rdi
    752a:	e8 00 00 00 00       	callq  752f <_ZN6Parser10compileHWSEv+0xa55>
    752f:	eb 03                	jmp    7534 <_ZN6Parser10compileHWSEv+0xa5a>
    7531:	48 89 c3             	mov    %rax,%rbx
            line = content.at(i);
            this->strings.append(line); // DEL!
            int a = QRAnchor.indexIn(line);
            int d = QRDefinition.indexIn(line);
            QStringList anchors      = QRAnchor.capturedTexts();
            QStringList definitions  = QRDefinition.capturedTexts();
    7534:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    7538:	48 89 c7             	mov    %rax,%rdi
    753b:	e8 00 00 00 00       	callq  7540 <_ZN6Parser10compileHWSEv+0xa66>
    7540:	eb 03                	jmp    7545 <_ZN6Parser10compileHWSEv+0xa6b>
    7542:	48 89 c3             	mov    %rax,%rbx
        for(i=0;i<n;i++){
            line = content.at(i);
            this->strings.append(line); // DEL!
            int a = QRAnchor.indexIn(line);
            int d = QRDefinition.indexIn(line);
            QStringList anchors      = QRAnchor.capturedTexts();
    7545:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    7549:	48 89 c7             	mov    %rax,%rdi
    754c:	e8 00 00 00 00       	callq  7551 <_ZN6Parser10compileHWSEv+0xa77>
    7551:	eb 03                	jmp    7556 <_ZN6Parser10compileHWSEv+0xa7c>
    7553:	48 89 c3             	mov    %rax,%rbx
        int n = content.size();

        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
        QRegExp QRDefinition("([\\w\\d\\_]+)[\\s\\t]*\\:[\\s\\t]*([\\w\\d]+)");

        QString line;
    7556:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    755d:	48 89 c7             	mov    %rax,%rdi
    7560:	e8 00 00 00 00       	callq  7565 <_ZN6Parser10compileHWSEv+0xa8b>
    7565:	eb 03                	jmp    756a <_ZN6Parser10compileHWSEv+0xa90>
    7567:	48 89 c3             	mov    %rax,%rbx

        int i;
        int n = content.size();

        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
        QRegExp QRDefinition("([\\w\\d\\_]+)[\\s\\t]*\\:[\\s\\t]*([\\w\\d]+)");
    756a:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    7571:	48 89 c7             	mov    %rax,%rdi
    7574:	e8 00 00 00 00       	callq  7579 <_ZN6Parser10compileHWSEv+0xa9f>
    7579:	eb 03                	jmp    757e <_ZN6Parser10compileHWSEv+0xaa4>
    757b:	48 89 c3             	mov    %rax,%rbx
        this->hwSequenceCompiled.append("xxxx");  // CRC16, counter;

        int i;
        int n = content.size();

        QRegExp QRAnchor("\\@([\\w]+)");        //\\@([\\w]+)
    757e:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
    7585:	48 89 c7             	mov    %rax,%rdi
    7588:	e8 00 00 00 00       	callq  758d <_ZN6Parser10compileHWSEv+0xab3>
    758d:	eb 03                	jmp    7592 <_ZN6Parser10compileHWSEv+0xab8>
    758f:	48 89 c3             	mov    %rax,%rbx

        content         = it.value();
        hwSequenceID    = it.key();
        quint16 counter     = 0;
                 // ...
        QString strHWSID    = this->defines.value(hwSequenceID);  // то что в скобках
    7592:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
    7599:	48 89 c7             	mov    %rax,%rdi
    759c:	e8 00 00 00 00       	callq  75a1 <_ZN6Parser10compileHWSEv+0xac7>
    75a1:	eb 03                	jmp    75a6 <_ZN6Parser10compileHWSEv+0xacc>
    75a3:	48 89 c3             	mov    %rax,%rbx
    char HWS_OPCODE  = 0x06;


    quint16 CRC16       = 0; // не обнуляется в цикле.

    QStringList hwsModules;
    75a6:	48 8d 85 30 ff ff ff 	lea    -0xd0(%rbp),%rax
    75ad:	48 89 c7             	mov    %rax,%rdi
    75b0:	e8 00 00 00 00       	callq  75b5 <_ZN6Parser10compileHWSEv+0xadb>
    75b5:	eb 03                	jmp    75ba <_ZN6Parser10compileHWSEv+0xae0>
    75b7:	48 89 c3             	mov    %rax,%rbx
}

void Parser::compileHWS(){
    QHash<QString, QStringList>::iterator it;
    QStringList content;
    QString     hwSequenceID;
    75ba:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
    75c1:	48 89 c7             	mov    %rax,%rdi
    75c4:	e8 00 00 00 00       	callq  75c9 <_ZN6Parser10compileHWSEv+0xaef>
    75c9:	eb 03                	jmp    75ce <_ZN6Parser10compileHWSEv+0xaf4>
    75cb:	48 89 c3             	mov    %rax,%rbx
    }
}

void Parser::compileHWS(){
    QHash<QString, QStringList>::iterator it;
    QStringList content;
    75ce:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
    75d5:	48 89 c7             	mov    %rax,%rdi
    75d8:	e8 00 00 00 00       	callq  75dd <_ZN6Parser10compileHWSEv+0xb03>
    75dd:	48 89 d8             	mov    %rbx,%rax
    75e0:	48 89 c7             	mov    %rax,%rdi
    75e3:	e8 00 00 00 00       	callq  75e8 <_ZN6Parser10compileHWSEv+0xb0e>
    }
    this->hwSequenceCompiled[4] = CRC16%256;
    this->hwSequenceCompiled[5] = CRC16/256;

    HWStoHex();
}
    75e8:	e8 00 00 00 00       	callq  75ed <_ZN6Parser10compileHWSEv+0xb13>
    75ed:	48 81 c4 38 01 00 00 	add    $0x138,%rsp
    75f4:	5b                   	pop    %rbx
    75f5:	5d                   	pop    %rbp
    75f6:	c3                   	retq   
    75f7:	90                   	nop

00000000000075f8 <_ZN6Parser9selectHWSEv>:

void Parser::selectHWS(){
    75f8:	55                   	push   %rbp
    75f9:	48 89 e5             	mov    %rsp,%rbp
    75fc:	53                   	push   %rbx
    75fd:	48 83 ec 58          	sub    $0x58,%rsp
    7601:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
    7605:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    760c:	00 00 
    760e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    7612:	31 c0                	xor    %eax,%eax

    int i = 0;
    7614:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%rbp)
    int n = this->sorted.size();
    761b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    761f:	48 05 a8 00 00 00    	add    $0xa8,%rax
    7625:	48 89 c7             	mov    %rax,%rdi
    7628:	e8 00 00 00 00       	callq  762d <_ZN6Parser9selectHWSEv+0x35>
    762d:	89 45 bc             	mov    %eax,-0x44(%rbp)

    QHash<QString, QStringList>::iterator it;
    7630:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7634:	48 89 c7             	mov    %rax,%rdi
    7637:	e8 00 00 00 00       	callq  763c <_ZN6Parser9selectHWSEv+0x44>
    QString firstLine;
    763c:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7640:	48 89 c7             	mov    %rax,%rdi
    7643:	e8 00 00 00 00       	callq  7648 <_ZN6Parser9selectHWSEv+0x50>

    for(it=this->sorted.begin();  it!=this->sorted.end();  ++it){
    7648:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    764c:	48 05 a8 00 00 00    	add    $0xa8,%rax
    7652:	48 89 c7             	mov    %rax,%rdi
    7655:	e8 00 00 00 00       	callq  765a <_ZN6Parser9selectHWSEv+0x62>
    765a:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    765e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    7662:	48 05 a8 00 00 00    	add    $0xa8,%rax
    7668:	48 89 c7             	mov    %rax,%rdi
    766b:	e8 00 00 00 00       	callq  7670 <_ZN6Parser9selectHWSEv+0x78>
    7670:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    7674:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    7678:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    767c:	48 89 d6             	mov    %rdx,%rsi
    767f:	48 89 c7             	mov    %rax,%rdi
    7682:	e8 00 00 00 00       	callq  7687 <_ZN6Parser9selectHWSEv+0x8f>
    7687:	84 c0                	test   %al,%al
    7689:	74 53                	je     76de <_ZN6Parser9selectHWSEv+0xe6>
        firstLine = it.value().at(0);
    768b:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    768f:	48 89 c7             	mov    %rax,%rdi
    7692:	e8 00 00 00 00       	callq  7697 <_ZN6Parser9selectHWSEv+0x9f>
    7697:	be 00 00 00 00       	mov    $0x0,%esi
    769c:	48 89 c7             	mov    %rax,%rdi
    769f:	e8 00 00 00 00       	callq  76a4 <_ZN6Parser9selectHWSEv+0xac>
    76a4:	48 89 c2             	mov    %rax,%rdx
    76a7:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    76ab:	48 89 d6             	mov    %rdx,%rsi
    76ae:	48 89 c7             	mov    %rax,%rdi
    76b1:	e8 00 00 00 00       	callq  76b6 <_ZN6Parser9selectHWSEv+0xbe>
        this->strings.append(firstLine);
    76b6:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    76ba:	48 8d 90 98 00 00 00 	lea    0x98(%rax),%rdx
    76c1:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    76c5:	48 89 c6             	mov    %rax,%rsi
    76c8:	48 89 d7             	mov    %rdx,%rdi
    76cb:	e8 00 00 00 00       	callq  76d0 <_ZN6Parser9selectHWSEv+0xd8>
    int n = this->sorted.size();

    QHash<QString, QStringList>::iterator it;
    QString firstLine;

    for(it=this->sorted.begin();  it!=this->sorted.end();  ++it){
    76d0:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    76d4:	48 89 c7             	mov    %rax,%rdi
    76d7:	e8 00 00 00 00       	callq  76dc <_ZN6Parser9selectHWSEv+0xe4>
    76dc:	eb 80                	jmp    765e <_ZN6Parser9selectHWSEv+0x66>
        firstLine = it.value().at(0);
        this->strings.append(firstLine);
    }

    for(i=0; i<n; i++){
    76de:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%rbp)
    76e5:	8b 45 b8             	mov    -0x48(%rbp),%eax
    76e8:	3b 45 bc             	cmp    -0x44(%rbp),%eax
    76eb:	7d 06                	jge    76f3 <_ZN6Parser9selectHWSEv+0xfb>
    76ed:	83 45 b8 01          	addl   $0x1,-0x48(%rbp)
    76f1:	eb f2                	jmp    76e5 <_ZN6Parser9selectHWSEv+0xed>

    int i = 0;
    int n = this->sorted.size();

    QHash<QString, QStringList>::iterator it;
    QString firstLine;
    76f3:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    76f7:	48 89 c7             	mov    %rax,%rdi
    76fa:	e8 00 00 00 00       	callq  76ff <_ZN6Parser9selectHWSEv+0x107>
    }

    for(i=0; i<n; i++){
        //QString firstLine = this->sorted.;
    }
}
    76ff:	90                   	nop
    7700:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7704:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    770b:	00 00 
    770d:	74 21                	je     7730 <_ZN6Parser9selectHWSEv+0x138>
    770f:	eb 1a                	jmp    772b <_ZN6Parser9selectHWSEv+0x133>
    7711:	48 89 c3             	mov    %rax,%rbx

    int i = 0;
    int n = this->sorted.size();

    QHash<QString, QStringList>::iterator it;
    QString firstLine;
    7714:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7718:	48 89 c7             	mov    %rax,%rdi
    771b:	e8 00 00 00 00       	callq  7720 <_ZN6Parser9selectHWSEv+0x128>
    7720:	48 89 d8             	mov    %rbx,%rax
    7723:	48 89 c7             	mov    %rax,%rdi
    7726:	e8 00 00 00 00       	callq  772b <_ZN6Parser9selectHWSEv+0x133>
    }

    for(i=0; i<n; i++){
        //QString firstLine = this->sorted.;
    }
}
    772b:	e8 00 00 00 00       	callq  7730 <_ZN6Parser9selectHWSEv+0x138>
    7730:	48 83 c4 58          	add    $0x58,%rsp
    7734:	5b                   	pop    %rbx
    7735:	5d                   	pop    %rbp
    7736:	c3                   	retq   
    7737:	90                   	nop

0000000000007738 <_ZN6Parser12loadIncludesEv>:

int Parser::loadIncludes(){
    7738:	55                   	push   %rbp
    7739:	48 89 e5             	mov    %rsp,%rbp
    773c:	53                   	push   %rbx
    773d:	48 83 ec 68          	sub    $0x68,%rsp
    7741:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
    7745:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    774c:	00 00 
    774e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    7752:	31 c0                	xor    %eax,%eax
    QStringList::iterator it;
    7754:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    7758:	48 89 c7             	mov    %rax,%rdi
    775b:	e8 00 00 00 00       	callq  7760 <_ZN6Parser12loadIncludesEv+0x28>

    for(it=this->includeFiles.begin();it!=this->includeFiles.end();++it){
    7760:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    7764:	48 8d 90 88 00 00 00 	lea    0x88(%rax),%rdx
    776b:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    776f:	48 89 d6             	mov    %rdx,%rsi
    7772:	48 89 c7             	mov    %rax,%rdi
    7775:	e8 00 00 00 00       	callq  777a <_ZN6Parser12loadIncludesEv+0x42>
    777a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    777e:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    7782:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    7786:	48 8d 90 88 00 00 00 	lea    0x88(%rax),%rdx
    778d:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7791:	48 89 d6             	mov    %rdx,%rsi
    7794:	48 89 c7             	mov    %rax,%rdi
    7797:	e8 00 00 00 00       	callq  779c <_ZN6Parser12loadIncludesEv+0x64>
    779c:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    77a0:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    77a4:	48 89 d6             	mov    %rdx,%rsi
    77a7:	48 89 c7             	mov    %rax,%rdi
    77aa:	e8 00 00 00 00       	callq  77af <_ZN6Parser12loadIncludesEv+0x77>
    77af:	84 c0                	test   %al,%al
    77b1:	0f 84 df 00 00 00    	je     7896 <_ZN6Parser12loadIncludesEv+0x15e>
        QFile hFile(*it);
    77b7:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    77bb:	48 89 c7             	mov    %rax,%rdi
    77be:	e8 00 00 00 00       	callq  77c3 <_ZN6Parser12loadIncludesEv+0x8b>
    77c3:	48 89 c2             	mov    %rax,%rdx
    77c6:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    77ca:	48 89 d6             	mov    %rdx,%rsi
    77cd:	48 89 c7             	mov    %rax,%rdi
    77d0:	e8 00 00 00 00       	callq  77d5 <_ZN6Parser12loadIncludesEv+0x9d>
        if (hFile.open(QIODevice::ReadOnly))
    77d5:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    77d9:	be 01 00 00 00       	mov    $0x1,%esi
    77de:	48 89 c7             	mov    %rax,%rdi
    77e1:	e8 00 00 00 00       	callq  77e6 <_ZN6Parser12loadIncludesEv+0xae>
    77e6:	8b 55 d0             	mov    -0x30(%rbp),%edx
    77e9:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    77ed:	89 d6                	mov    %edx,%esi
    77ef:	48 89 c7             	mov    %rax,%rdi
    77f2:	e8 00 00 00 00       	callq  77f7 <_ZN6Parser12loadIncludesEv+0xbf>
    77f7:	84 c0                	test   %al,%al
    77f9:	74 7e                	je     7879 <_ZN6Parser12loadIncludesEv+0x141>
        {
           QTextStream in(&hFile);
    77fb:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    77ff:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7803:	48 89 d6             	mov    %rdx,%rsi
    7806:	48 89 c7             	mov    %rax,%rdi
    7809:	e8 00 00 00 00       	callq  780e <_ZN6Parser12loadIncludesEv+0xd6>
           while (!in.atEnd())
    780e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7812:	48 89 c7             	mov    %rax,%rdi
    7815:	e8 00 00 00 00       	callq  781a <_ZN6Parser12loadIncludesEv+0xe2>
    781a:	83 f0 01             	xor    $0x1,%eax
    781d:	84 c0                	test   %al,%al
    781f:	74 40                	je     7861 <_ZN6Parser12loadIncludesEv+0x129>
           {
              QString line = in.readLine();
    7821:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7825:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
    7829:	ba 00 00 00 00       	mov    $0x0,%edx
    782e:	48 89 ce             	mov    %rcx,%rsi
    7831:	48 89 c7             	mov    %rax,%rdi
    7834:	e8 00 00 00 00       	callq  7839 <_ZN6Parser12loadIncludesEv+0x101>
              this->includes.append(line);
    7839:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    783d:	48 8d 90 90 00 00 00 	lea    0x90(%rax),%rdx
    7844:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7848:	48 89 c6             	mov    %rax,%rsi
    784b:	48 89 d7             	mov    %rdx,%rdi
    784e:	e8 00 00 00 00       	callq  7853 <_ZN6Parser12loadIncludesEv+0x11b>
        if (hFile.open(QIODevice::ReadOnly))
        {
           QTextStream in(&hFile);
           while (!in.atEnd())
           {
              QString line = in.readLine();
    7853:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7857:	48 89 c7             	mov    %rax,%rdi
    785a:	e8 00 00 00 00       	callq  785f <_ZN6Parser12loadIncludesEv+0x127>
    for(it=this->includeFiles.begin();it!=this->includeFiles.end();++it){
        QFile hFile(*it);
        if (hFile.open(QIODevice::ReadOnly))
        {
           QTextStream in(&hFile);
           while (!in.atEnd())
    785f:	eb ad                	jmp    780e <_ZN6Parser12loadIncludesEv+0xd6>
           {
              QString line = in.readLine();
              this->includes.append(line);
           }
           hFile.close();
    7861:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7865:	48 89 c7             	mov    %rax,%rdi
    7868:	e8 00 00 00 00       	callq  786d <_ZN6Parser12loadIncludesEv+0x135>

    for(it=this->includeFiles.begin();it!=this->includeFiles.end();++it){
        QFile hFile(*it);
        if (hFile.open(QIODevice::ReadOnly))
        {
           QTextStream in(&hFile);
    786d:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7871:	48 89 c7             	mov    %rax,%rdi
    7874:	e8 00 00 00 00       	callq  7879 <_ZN6Parser12loadIncludesEv+0x141>

int Parser::loadIncludes(){
    QStringList::iterator it;

    for(it=this->includeFiles.begin();it!=this->includeFiles.end();++it){
        QFile hFile(*it);
    7879:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    787d:	48 89 c7             	mov    %rax,%rdi
    7880:	e8 00 00 00 00       	callq  7885 <_ZN6Parser12loadIncludesEv+0x14d>
}

int Parser::loadIncludes(){
    QStringList::iterator it;

    for(it=this->includeFiles.begin();it!=this->includeFiles.end();++it){
    7885:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    7889:	48 89 c7             	mov    %rax,%rdi
    788c:	e8 00 00 00 00       	callq  7891 <_ZN6Parser12loadIncludesEv+0x159>
    7891:	e9 ec fe ff ff       	jmpq   7782 <_ZN6Parser12loadIncludesEv+0x4a>
    }

    // Append includes before first line of main script;


    QString included;
    7896:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    789a:	48 89 c7             	mov    %rax,%rdi
    789d:	e8 00 00 00 00       	callq  78a2 <_ZN6Parser12loadIncludesEv+0x16a>
    for(it=this->includes.begin();it!=this->includes.end();++it){
    78a2:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    78a6:	48 8d 90 90 00 00 00 	lea    0x90(%rax),%rdx
    78ad:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    78b1:	48 89 d6             	mov    %rdx,%rsi
    78b4:	48 89 c7             	mov    %rax,%rdi
    78b7:	e8 00 00 00 00       	callq  78bc <_ZN6Parser12loadIncludesEv+0x184>
    78bc:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    78c0:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    78c4:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    78c8:	48 8d 90 90 00 00 00 	lea    0x90(%rax),%rdx
    78cf:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    78d3:	48 89 d6             	mov    %rdx,%rsi
    78d6:	48 89 c7             	mov    %rax,%rdi
    78d9:	e8 00 00 00 00       	callq  78de <_ZN6Parser12loadIncludesEv+0x1a6>
    78de:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    78e2:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    78e6:	48 89 d6             	mov    %rdx,%rsi
    78e9:	48 89 c7             	mov    %rax,%rdi
    78ec:	e8 00 00 00 00       	callq  78f1 <_ZN6Parser12loadIncludesEv+0x1b9>
    78f1:	84 c0                	test   %al,%al
    78f3:	74 2c                	je     7921 <_ZN6Parser12loadIncludesEv+0x1e9>
        included.append(*it);
    78f5:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    78f9:	48 89 c7             	mov    %rax,%rdi
    78fc:	e8 00 00 00 00       	callq  7901 <_ZN6Parser12loadIncludesEv+0x1c9>
    7901:	48 89 c2             	mov    %rax,%rdx
    7904:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7908:	48 89 d6             	mov    %rdx,%rsi
    790b:	48 89 c7             	mov    %rax,%rdi
    790e:	e8 00 00 00 00       	callq  7913 <_ZN6Parser12loadIncludesEv+0x1db>

    // Append includes before first line of main script;


    QString included;
    for(it=this->includes.begin();it!=this->includes.end();++it){
    7913:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    7917:	48 89 c7             	mov    %rax,%rdi
    791a:	e8 00 00 00 00       	callq  791f <_ZN6Parser12loadIncludesEv+0x1e7>
    791f:	eb a3                	jmp    78c4 <_ZN6Parser12loadIncludesEv+0x18c>
        included.append(*it);
    }
    this->script.prepend(included); // nice.
    7921:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    7925:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    7929:	48 89 d6             	mov    %rdx,%rsi
    792c:	48 89 c7             	mov    %rax,%rdi
    792f:	e8 00 00 00 00       	callq  7934 <_ZN6Parser12loadIncludesEv+0x1fc>
    }

    // Append includes before first line of main script;


    QString included;
    7934:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7938:	48 89 c7             	mov    %rax,%rdi
    793b:	e8 00 00 00 00       	callq  7940 <_ZN6Parser12loadIncludesEv+0x208>
    for(it=this->includes.begin();it!=this->includes.end();++it){
        included.append(*it);
    }
    this->script.prepend(included); // nice.
}
    7940:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    7944:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    794b:	00 00 
    794d:	74 5d                	je     79ac <_ZN6Parser12loadIncludesEv+0x274>
    794f:	eb 56                	jmp    79a7 <_ZN6Parser12loadIncludesEv+0x26f>
    7951:	48 89 c3             	mov    %rax,%rbx
        if (hFile.open(QIODevice::ReadOnly))
        {
           QTextStream in(&hFile);
           while (!in.atEnd())
           {
              QString line = in.readLine();
    7954:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7958:	48 89 c7             	mov    %rax,%rdi
    795b:	e8 00 00 00 00       	callq  7960 <_ZN6Parser12loadIncludesEv+0x228>
    7960:	eb 03                	jmp    7965 <_ZN6Parser12loadIncludesEv+0x22d>
    7962:	48 89 c3             	mov    %rax,%rbx

    for(it=this->includeFiles.begin();it!=this->includeFiles.end();++it){
        QFile hFile(*it);
        if (hFile.open(QIODevice::ReadOnly))
        {
           QTextStream in(&hFile);
    7965:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    7969:	48 89 c7             	mov    %rax,%rdi
    796c:	e8 00 00 00 00       	callq  7971 <_ZN6Parser12loadIncludesEv+0x239>
    7971:	eb 03                	jmp    7976 <_ZN6Parser12loadIncludesEv+0x23e>
    7973:	48 89 c3             	mov    %rax,%rbx

int Parser::loadIncludes(){
    QStringList::iterator it;

    for(it=this->includeFiles.begin();it!=this->includeFiles.end();++it){
        QFile hFile(*it);
    7976:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    797a:	48 89 c7             	mov    %rax,%rdi
    797d:	e8 00 00 00 00       	callq  7982 <_ZN6Parser12loadIncludesEv+0x24a>
    7982:	48 89 d8             	mov    %rbx,%rax
    7985:	48 89 c7             	mov    %rax,%rdi
    7988:	e8 00 00 00 00       	callq  798d <_ZN6Parser12loadIncludesEv+0x255>
    798d:	48 89 c3             	mov    %rax,%rbx
    }

    // Append includes before first line of main script;


    QString included;
    7990:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7994:	48 89 c7             	mov    %rax,%rdi
    7997:	e8 00 00 00 00       	callq  799c <_ZN6Parser12loadIncludesEv+0x264>
    799c:	48 89 d8             	mov    %rbx,%rax
    799f:	48 89 c7             	mov    %rax,%rdi
    79a2:	e8 00 00 00 00       	callq  79a7 <_ZN6Parser12loadIncludesEv+0x26f>
    for(it=this->includes.begin();it!=this->includes.end();++it){
        included.append(*it);
    }
    this->script.prepend(included); // nice.
}
    79a7:	e8 00 00 00 00       	callq  79ac <_ZN6Parser12loadIncludesEv+0x274>
    79ac:	48 83 c4 68          	add    $0x68,%rsp
    79b0:	5b                   	pop    %rbx
    79b1:	5d                   	pop    %rbp
    79b2:	c3                   	retq   
    79b3:	90                   	nop

00000000000079b4 <_ZN6Parser13compileModuleEv>:

void Parser::compileModule(){
    79b4:	55                   	push   %rbp
    79b5:	48 89 e5             	mov    %rsp,%rbp
    79b8:	48 83 ec 20          	sub    $0x20,%rsp
    79bc:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)

    int n = this->Modules.size();
    79c0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    79c4:	48 83 c0 60          	add    $0x60,%rax
    79c8:	48 89 c7             	mov    %rax,%rdi
    79cb:	e8 00 00 00 00       	callq  79d0 <_ZN6Parser13compileModuleEv+0x1c>
    79d0:	89 45 fc             	mov    %eax,-0x4(%rbp)
    int i = 0;
    79d3:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)

    for(i=0;i<n;i++){
    79da:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
    79e1:	8b 45 f8             	mov    -0x8(%rbp),%eax
    79e4:	3b 45 fc             	cmp    -0x4(%rbp),%eax
    79e7:	7d 4f                	jge    7a38 <_ZN6Parser13compileModuleEv+0x84>

        // there are wrong space to compile module directly.
        // Module method compile() must to do it.

        this->Modules[i].compile();
    79e9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    79ed:	48 8d 50 60          	lea    0x60(%rax),%rdx
    79f1:	8b 45 f8             	mov    -0x8(%rbp),%eax
    79f4:	89 c6                	mov    %eax,%esi
    79f6:	48 89 d7             	mov    %rdx,%rdi
    79f9:	e8 00 00 00 00       	callq  79fe <_ZN6Parser13compileModuleEv+0x4a>
    79fe:	48 89 c7             	mov    %rax,%rdi
    7a01:	e8 00 00 00 00       	callq  7a06 <_ZN6Parser13compileModuleEv+0x52>
        this->modulesHex.append(this->Modules[i].compiledHex);
    7a06:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7a0a:	48 8d 50 60          	lea    0x60(%rax),%rdx
    7a0e:	8b 45 f8             	mov    -0x8(%rbp),%eax
    7a11:	89 c6                	mov    %eax,%esi
    7a13:	48 89 d7             	mov    %rdx,%rdi
    7a16:	e8 00 00 00 00       	callq  7a1b <_ZN6Parser13compileModuleEv+0x67>
    7a1b:	48 8d 50 20          	lea    0x20(%rax),%rdx
    7a1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7a23:	48 83 c0 58          	add    $0x58,%rax
    7a27:	48 89 d6             	mov    %rdx,%rsi
    7a2a:	48 89 c7             	mov    %rax,%rdi
    7a2d:	e8 00 00 00 00       	callq  7a32 <_ZN6Parser13compileModuleEv+0x7e>
void Parser::compileModule(){

    int n = this->Modules.size();
    int i = 0;

    for(i=0;i<n;i++){
    7a32:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
    7a36:	eb a9                	jmp    79e1 <_ZN6Parser13compileModuleEv+0x2d>

        this->Modules[i].compile();
        this->modulesHex.append(this->Modules[i].compiledHex);
    }

}
    7a38:	90                   	nop
    7a39:	c9                   	leaveq 
    7a3a:	c3                   	retq   
    7a3b:	90                   	nop

0000000000007a3c <_ZN6Parser9getDefineE7QString>:

unsigned char Parser::getDefine(QString name){
    7a3c:	55                   	push   %rbp
    7a3d:	48 89 e5             	mov    %rsp,%rbp
    7a40:	53                   	push   %rbx
    7a41:	48 83 ec 38          	sub    $0x38,%rsp
    7a45:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    7a49:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    7a4d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    7a54:	00 00 
    7a56:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    7a5a:	31 c0                	xor    %eax,%eax
    bool ok;
    return this->defines.take(name).toInt(&ok, 16);
    7a5c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    7a60:	48 8d 48 28          	lea    0x28(%rax),%rcx
    7a64:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    7a68:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    7a6c:	48 89 ce             	mov    %rcx,%rsi
    7a6f:	48 89 c7             	mov    %rax,%rdi
    7a72:	e8 00 00 00 00       	callq  7a77 <_ZN6Parser9getDefineE7QString+0x3b>
    7a77:	48 8d 4d df          	lea    -0x21(%rbp),%rcx
    7a7b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    7a7f:	ba 10 00 00 00       	mov    $0x10,%edx
    7a84:	48 89 ce             	mov    %rcx,%rsi
    7a87:	48 89 c7             	mov    %rax,%rdi
    7a8a:	e8 00 00 00 00       	callq  7a8f <_ZN6Parser9getDefineE7QString+0x53>
    7a8f:	89 c3                	mov    %eax,%ebx
    7a91:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    7a95:	48 89 c7             	mov    %rax,%rdi
    7a98:	e8 00 00 00 00       	callq  7a9d <_ZN6Parser9getDefineE7QString+0x61>
    7a9d:	89 d8                	mov    %ebx,%eax
}
    7a9f:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
    7aa3:	64 48 33 34 25 28 00 	xor    %fs:0x28,%rsi
    7aaa:	00 00 
    7aac:	74 21                	je     7acf <_ZN6Parser9getDefineE7QString+0x93>
    7aae:	eb 1a                	jmp    7aca <_ZN6Parser9getDefineE7QString+0x8e>
    7ab0:	48 89 c3             	mov    %rax,%rbx

}

unsigned char Parser::getDefine(QString name){
    bool ok;
    return this->defines.take(name).toInt(&ok, 16);
    7ab3:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    7ab7:	48 89 c7             	mov    %rax,%rdi
    7aba:	e8 00 00 00 00       	callq  7abf <_ZN6Parser9getDefineE7QString+0x83>
    7abf:	48 89 d8             	mov    %rbx,%rax
    7ac2:	48 89 c7             	mov    %rax,%rdi
    7ac5:	e8 00 00 00 00       	callq  7aca <_ZN6Parser9getDefineE7QString+0x8e>
}
    7aca:	e8 00 00 00 00       	callq  7acf <_ZN6Parser9getDefineE7QString+0x93>
    7acf:	48 83 c4 38          	add    $0x38,%rsp
    7ad3:	5b                   	pop    %rbx
    7ad4:	5d                   	pop    %rbp
    7ad5:	c3                   	retq   

0000000000007ad6 <_ZN6Parser11takeModulesEv>:

void Parser::takeModules(){
    7ad6:	55                   	push   %rbp
    7ad7:	48 89 e5             	mov    %rsp,%rbp
    7ada:	53                   	push   %rbx
    7adb:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
    7ae2:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
    7ae9:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    7af0:	00 00 
    7af2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    7af6:	31 c0                	xor    %eax,%eax
    int cnt = 0;
    7af8:	c7 85 7c ff ff ff 00 	movl   $0x0,-0x84(%rbp)
    7aff:	00 00 00 
    QHash<QString, QStringList>::iterator it;
    7b02:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    7b06:	48 89 c7             	mov    %rax,%rdi
    7b09:	e8 00 00 00 00       	callq  7b0e <_ZN6Parser11takeModulesEv+0x38>
    for(it = this->sorted.begin(); it != this->sorted.end(); ++it){
    7b0e:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    7b15:	48 05 a8 00 00 00    	add    $0xa8,%rax
    7b1b:	48 89 c7             	mov    %rax,%rdi
    7b1e:	e8 00 00 00 00       	callq  7b23 <_ZN6Parser11takeModulesEv+0x4d>
    7b23:	48 89 45 80          	mov    %rax,-0x80(%rbp)
    7b27:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    7b2e:	48 05 a8 00 00 00    	add    $0xa8,%rax
    7b34:	48 89 c7             	mov    %rax,%rdi
    7b37:	e8 00 00 00 00       	callq  7b3c <_ZN6Parser11takeModulesEv+0x66>
    7b3c:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    7b40:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    7b44:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    7b48:	48 89 d6             	mov    %rdx,%rsi
    7b4b:	48 89 c7             	mov    %rax,%rdi
    7b4e:	e8 00 00 00 00       	callq  7b53 <_ZN6Parser11takeModulesEv+0x7d>
    7b53:	84 c0                	test   %al,%al
    7b55:	0f 84 21 01 00 00    	je     7c7c <_ZN6Parser11takeModulesEv+0x1a6>
        module M(&it.value(), &this->indexBase);
    7b5b:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    7b62:	48 8d 98 d0 00 00 00 	lea    0xd0(%rax),%rbx
    7b69:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    7b6d:	48 89 c7             	mov    %rax,%rdi
    7b70:	e8 00 00 00 00       	callq  7b75 <_ZN6Parser11takeModulesEv+0x9f>
    7b75:	48 89 c1             	mov    %rax,%rcx
    7b78:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7b7c:	48 89 da             	mov    %rbx,%rdx
    7b7f:	48 89 ce             	mov    %rcx,%rsi
    7b82:	48 89 c7             	mov    %rax,%rdi
    7b85:	e8 00 00 00 00       	callq  7b8a <_ZN6Parser11takeModulesEv+0xb4>
        QString primary = it.key();
    7b8a:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    7b8e:	48 89 c7             	mov    %rax,%rdi
    7b91:	e8 00 00 00 00       	callq  7b96 <_ZN6Parser11takeModulesEv+0xc0>
    7b96:	48 89 c2             	mov    %rax,%rdx
    7b99:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    7b9d:	48 89 d6             	mov    %rdx,%rsi
    7ba0:	48 89 c7             	mov    %rax,%rdi
    7ba3:	e8 00 00 00 00       	callq  7ba8 <_ZN6Parser11takeModulesEv+0xd2>
        M.id        = cnt; cnt++;
    7ba8:	8b 85 7c ff ff ff    	mov    -0x84(%rbp),%eax
    7bae:	88 45 e2             	mov    %al,-0x1e(%rbp)
    7bb1:	83 85 7c ff ff ff 01 	addl   $0x1,-0x84(%rbp)

        unsigned char rr = getDefine(primary);
    7bb8:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    7bbc:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    7bc0:	48 89 d6             	mov    %rdx,%rsi
    7bc3:	48 89 c7             	mov    %rax,%rdi
    7bc6:	e8 00 00 00 00       	callq  7bcb <_ZN6Parser11takeModulesEv+0xf5>
    7bcb:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    7bcf:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    7bd6:	48 89 d6             	mov    %rdx,%rsi
    7bd9:	48 89 c7             	mov    %rax,%rdi
    7bdc:	e8 00 00 00 00       	callq  7be1 <_ZN6Parser11takeModulesEv+0x10b>
    7be1:	88 85 7b ff ff ff    	mov    %al,-0x85(%rbp)
    7be7:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    7beb:	48 89 c7             	mov    %rax,%rdi
    7bee:	e8 00 00 00 00       	callq  7bf3 <_ZN6Parser11takeModulesEv+0x11d>
        M.primary   = rr;   // first argument of module(,)
    7bf3:	0f b6 85 7b ff ff ff 	movzbl -0x85(%rbp),%eax
    7bfa:	88 45 e0             	mov    %al,-0x20(%rbp)
        this->Modules.append(M);
    7bfd:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    7c04:	48 8d 50 60          	lea    0x60(%rax),%rdx
    7c08:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7c0c:	48 89 c6             	mov    %rax,%rsi
    7c0f:	48 89 d7             	mov    %rdx,%rdi
    7c12:	e8 00 00 00 00       	callq  7c17 <_ZN6Parser11takeModulesEv+0x141>
void Parser::takeModules(){
    int cnt = 0;
    QHash<QString, QStringList>::iterator it;
    for(it = this->sorted.begin(); it != this->sorted.end(); ++it){
        module M(&it.value(), &this->indexBase);
        QString primary = it.key();
    7c17:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    7c1b:	48 89 c7             	mov    %rax,%rdi
    7c1e:	e8 00 00 00 00       	callq  7c23 <_ZN6Parser11takeModulesEv+0x14d>

void Parser::takeModules(){
    int cnt = 0;
    QHash<QString, QStringList>::iterator it;
    for(it = this->sorted.begin(); it != this->sorted.end(); ++it){
        module M(&it.value(), &this->indexBase);
    7c23:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7c27:	48 89 c7             	mov    %rax,%rdi
    7c2a:	e8 00 00 00 00       	callq  7c2f <_ZN6Parser11takeModulesEv+0x159>
}

void Parser::takeModules(){
    int cnt = 0;
    QHash<QString, QStringList>::iterator it;
    for(it = this->sorted.begin(); it != this->sorted.end(); ++it){
    7c2f:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    7c33:	48 89 c7             	mov    %rax,%rdi
    7c36:	e8 00 00 00 00       	callq  7c3b <_ZN6Parser11takeModulesEv+0x165>
    7c3b:	e9 e7 fe ff ff       	jmpq   7b27 <_ZN6Parser11takeModulesEv+0x51>
    7c40:	48 89 c3             	mov    %rax,%rbx
        module M(&it.value(), &this->indexBase);
        QString primary = it.key();
        M.id        = cnt; cnt++;

        unsigned char rr = getDefine(primary);
    7c43:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    7c47:	48 89 c7             	mov    %rax,%rdi
    7c4a:	e8 00 00 00 00       	callq  7c4f <_ZN6Parser11takeModulesEv+0x179>
    7c4f:	eb 03                	jmp    7c54 <_ZN6Parser11takeModulesEv+0x17e>
    7c51:	48 89 c3             	mov    %rax,%rbx
void Parser::takeModules(){
    int cnt = 0;
    QHash<QString, QStringList>::iterator it;
    for(it = this->sorted.begin(); it != this->sorted.end(); ++it){
        module M(&it.value(), &this->indexBase);
        QString primary = it.key();
    7c54:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    7c58:	48 89 c7             	mov    %rax,%rdi
    7c5b:	e8 00 00 00 00       	callq  7c60 <_ZN6Parser11takeModulesEv+0x18a>
    7c60:	eb 03                	jmp    7c65 <_ZN6Parser11takeModulesEv+0x18f>
    7c62:	48 89 c3             	mov    %rax,%rbx

void Parser::takeModules(){
    int cnt = 0;
    QHash<QString, QStringList>::iterator it;
    for(it = this->sorted.begin(); it != this->sorted.end(); ++it){
        module M(&it.value(), &this->indexBase);
    7c65:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7c69:	48 89 c7             	mov    %rax,%rdi
    7c6c:	e8 00 00 00 00       	callq  7c71 <_ZN6Parser11takeModulesEv+0x19b>
    7c71:	48 89 d8             	mov    %rbx,%rax
    7c74:	48 89 c7             	mov    %rax,%rdi
    7c77:	e8 00 00 00 00       	callq  7c7c <_ZN6Parser11takeModulesEv+0x1a6>

        unsigned char rr = getDefine(primary);
        M.primary   = rr;   // first argument of module(,)
        this->Modules.append(M);
    }
}
    7c7c:	90                   	nop
    7c7d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    7c81:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    7c88:	00 00 
    7c8a:	74 05                	je     7c91 <_ZN6Parser11takeModulesEv+0x1bb>
    7c8c:	e8 00 00 00 00       	callq  7c91 <_ZN6Parser11takeModulesEv+0x1bb>
    7c91:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
    7c98:	5b                   	pop    %rbx
    7c99:	5d                   	pop    %rbp
    7c9a:	c3                   	retq   
    7c9b:	90                   	nop

0000000000007c9c <_ZN6Parser7compileEv>:

int Parser::compile(){
    7c9c:	55                   	push   %rbp
    7c9d:	48 89 e5             	mov    %rsp,%rbp
    7ca0:	53                   	push   %rbx
    7ca1:	48 81 ec b8 00 00 00 	sub    $0xb8,%rsp
    7ca8:	48 89 bd 48 ff ff ff 	mov    %rdi,-0xb8(%rbp)
    7caf:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    7cb6:	00 00 
    7cb8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    7cbc:	31 c0                	xor    %eax,%eax
    // WiFi b1212556789

   //testCase01();return 0;

    Sems semSoup;
    7cbe:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7cc2:	48 89 c7             	mov    %rax,%rdi
    7cc5:	e8 00 00 00 00       	callq  7cca <_ZN6Parser7compileEv+0x2e>

    //return -1;
    QString *script = &this->script;
    7cca:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    7cd1:	48 89 45 b8          	mov    %rax,-0x48(%rbp)

    this->init();
    7cd5:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    7cdc:	48 89 c7             	mov    %rax,%rdi
    7cdf:	e8 00 00 00 00       	callq  7ce4 <_ZN6Parser7compileEv+0x48>
    //
    // ключ     - название блока
    // значение - список строк из блока, типа QStringList

    // Подключить все инклуды по списку
    this->addIncludeFile("definitions.h");
    7ce4:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    7ceb:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 7cf2 <_ZN6Parser7compileEv+0x56>
    7cf2:	48 89 c7             	mov    %rax,%rdi
    7cf5:	e8 00 00 00 00       	callq  7cfa <_ZN6Parser7compileEv+0x5e>
    7cfa:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
    7d01:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    7d08:	48 89 d6             	mov    %rdx,%rsi
    7d0b:	48 89 c7             	mov    %rax,%rdi
    7d0e:	e8 00 00 00 00       	callq  7d13 <_ZN6Parser7compileEv+0x77>
    7d13:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    7d1a:	48 89 c7             	mov    %rax,%rdi
    7d1d:	e8 00 00 00 00       	callq  7d22 <_ZN6Parser7compileEv+0x86>
    this->addIncludeFile("project1.h");
    7d22:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    7d29:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 7d30 <_ZN6Parser7compileEv+0x94>
    7d30:	48 89 c7             	mov    %rax,%rdi
    7d33:	e8 00 00 00 00       	callq  7d38 <_ZN6Parser7compileEv+0x9c>
    7d38:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
    7d3f:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    7d46:	48 89 d6             	mov    %rdx,%rsi
    7d49:	48 89 c7             	mov    %rax,%rdi
    7d4c:	e8 00 00 00 00       	callq  7d51 <_ZN6Parser7compileEv+0xb5>
    7d51:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    7d58:	48 89 c7             	mov    %rax,%rdi
    7d5b:	e8 00 00 00 00       	callq  7d60 <_ZN6Parser7compileEv+0xc4>
    this->addIncludeFile("kpa_config.h");
    7d60:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    7d64:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 7d6b <_ZN6Parser7compileEv+0xcf>
    7d6b:	48 89 c7             	mov    %rax,%rdi
    7d6e:	e8 00 00 00 00       	callq  7d73 <_ZN6Parser7compileEv+0xd7>
    7d73:	48 8d 55 80          	lea    -0x80(%rbp),%rdx
    7d77:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    7d7e:	48 89 d6             	mov    %rdx,%rsi
    7d81:	48 89 c7             	mov    %rax,%rdi
    7d84:	e8 00 00 00 00       	callq  7d89 <_ZN6Parser7compileEv+0xed>
    7d89:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    7d8d:	48 89 c7             	mov    %rax,%rdi
    7d90:	e8 00 00 00 00       	callq  7d95 <_ZN6Parser7compileEv+0xf9>
    this->addIncludeFile("names.h");
    7d95:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    7d99:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 7da0 <_ZN6Parser7compileEv+0x104>
    7da0:	48 89 c7             	mov    %rax,%rdi
    7da3:	e8 00 00 00 00       	callq  7da8 <_ZN6Parser7compileEv+0x10c>
    7da8:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
    7dac:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    7db3:	48 89 d6             	mov    %rdx,%rsi
    7db6:	48 89 c7             	mov    %rax,%rdi
    7db9:	e8 00 00 00 00       	callq  7dbe <_ZN6Parser7compileEv+0x122>
    7dbe:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    7dc2:	48 89 c7             	mov    %rax,%rdi
    7dc5:	e8 00 00 00 00       	callq  7dca <_ZN6Parser7compileEv+0x12e>
    int lIf = this->loadIncludes();
    7dca:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    7dd1:	48 89 c7             	mov    %rax,%rdi
    7dd4:	e8 00 00 00 00       	callq  7dd9 <_ZN6Parser7compileEv+0x13d>
    7dd9:	89 85 54 ff ff ff    	mov    %eax,-0xac(%rbp)
    // Найти все #define
    int cDr = this->checkDefines(script);
    7ddf:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    7de3:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    7dea:	48 89 d6             	mov    %rdx,%rsi
    7ded:	48 89 c7             	mov    %rax,%rdi
    7df0:	e8 00 00 00 00       	callq  7df5 <_ZN6Parser7compileEv+0x159>
    7df5:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%rbp)

    // Составить таблицу переменных.
    int cVr = this->checkVariables(script);
    7dfb:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    7dff:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    7e06:	48 89 d6             	mov    %rdx,%rsi
    7e09:	48 89 c7             	mov    %rax,%rdi
    7e0c:	e8 00 00 00 00       	callq  7e11 <_ZN6Parser7compileEv+0x175>
    7e11:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%rbp)

    this->classify(&this->script, &this->sorted, PARSER_QREGEXP_MODULE);
    7e17:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    7e1e:	48 8d 50 30          	lea    0x30(%rax),%rdx
    7e22:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    7e26:	48 89 d6             	mov    %rdx,%rsi
    7e29:	48 89 c7             	mov    %rax,%rdi
    7e2c:	e8 00 00 00 00       	callq  7e31 <_ZN6Parser7compileEv+0x195>
    7e31:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    7e38:	48 8d b8 a8 00 00 00 	lea    0xa8(%rax),%rdi
    7e3f:	48 8b b5 48 ff ff ff 	mov    -0xb8(%rbp),%rsi
    7e46:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    7e4a:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    7e51:	48 89 d1             	mov    %rdx,%rcx
    7e54:	48 89 fa             	mov    %rdi,%rdx
    7e57:	48 89 c7             	mov    %rax,%rdi
    7e5a:	e8 00 00 00 00       	callq  7e5f <_ZN6Parser7compileEv+0x1c3>
    7e5f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    7e63:	48 89 c7             	mov    %rax,%rdi
    7e66:	e8 00 00 00 00       	callq  7e6b <_ZN6Parser7compileEv+0x1cf>
    this->takeModules();
    7e6b:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    7e72:	48 89 c7             	mov    %rax,%rdi
    7e75:	e8 00 00 00 00       	callq  7e7a <_ZN6Parser7compileEv+0x1de>
    this->classify(&this->script, &this->hwSequence, PARSER_QREGEXP_HW_SEQUENCE);
    7e7a:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    7e81:	48 8d 50 38          	lea    0x38(%rax),%rdx
    7e85:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7e89:	48 89 d6             	mov    %rdx,%rsi
    7e8c:	48 89 c7             	mov    %rax,%rdi
    7e8f:	e8 00 00 00 00       	callq  7e94 <_ZN6Parser7compileEv+0x1f8>
    7e94:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    7e9b:	48 8d b8 b8 00 00 00 	lea    0xb8(%rax),%rdi
    7ea2:	48 8b b5 48 ff ff ff 	mov    -0xb8(%rbp),%rsi
    7ea9:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    7ead:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    7eb4:	48 89 d1             	mov    %rdx,%rcx
    7eb7:	48 89 fa             	mov    %rdi,%rdx
    7eba:	48 89 c7             	mov    %rax,%rdi
    7ebd:	e8 00 00 00 00       	callq  7ec2 <_ZN6Parser7compileEv+0x226>
    7ec2:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7ec6:	48 89 c7             	mov    %rax,%rdi
    7ec9:	e8 00 00 00 00       	callq  7ece <_ZN6Parser7compileEv+0x232>

    compileHWS();
    7ece:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    7ed5:	48 89 c7             	mov    %rax,%rdi
    7ed8:	e8 00 00 00 00       	callq  7edd <_ZN6Parser7compileEv+0x241>

    compileModule();
    7edd:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    7ee4:	48 89 c7             	mov    %rax,%rdi
    7ee7:	e8 00 00 00 00       	callq  7eec <_ZN6Parser7compileEv+0x250>
int Parser::compile(){
    // WiFi b1212556789

   //testCase01();return 0;

    Sems semSoup;
    7eec:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7ef0:	48 89 c7             	mov    %rax,%rdi
    7ef3:	e8 00 00 00 00       	callq  7ef8 <_ZN6Parser7compileEv+0x25c>
    compileHWS();

    compileModule();

    //compileHWS();
}
    7ef8:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    7efc:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    7f03:	00 00 
    7f05:	0f 84 90 00 00 00    	je     7f9b <_ZN6Parser7compileEv+0x2ff>
    7f0b:	e9 86 00 00 00       	jmpq   7f96 <_ZN6Parser7compileEv+0x2fa>
    7f10:	48 89 c3             	mov    %rax,%rbx
    //
    // ключ     - название блока
    // значение - список строк из блока, типа QStringList

    // Подключить все инклуды по списку
    this->addIncludeFile("definitions.h");
    7f13:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
    7f1a:	48 89 c7             	mov    %rax,%rdi
    7f1d:	e8 00 00 00 00       	callq  7f22 <_ZN6Parser7compileEv+0x286>
    7f22:	eb 5b                	jmp    7f7f <_ZN6Parser7compileEv+0x2e3>
    7f24:	48 89 c3             	mov    %rax,%rbx
    this->addIncludeFile("project1.h");
    7f27:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
    7f2e:	48 89 c7             	mov    %rax,%rdi
    7f31:	e8 00 00 00 00       	callq  7f36 <_ZN6Parser7compileEv+0x29a>
    7f36:	eb 47                	jmp    7f7f <_ZN6Parser7compileEv+0x2e3>
    7f38:	48 89 c3             	mov    %rax,%rbx
    this->addIncludeFile("kpa_config.h");
    7f3b:	48 8d 45 80          	lea    -0x80(%rbp),%rax
    7f3f:	48 89 c7             	mov    %rax,%rdi
    7f42:	e8 00 00 00 00       	callq  7f47 <_ZN6Parser7compileEv+0x2ab>
    7f47:	eb 36                	jmp    7f7f <_ZN6Parser7compileEv+0x2e3>
    7f49:	48 89 c3             	mov    %rax,%rbx
    this->addIncludeFile("names.h");
    7f4c:	48 8d 45 90          	lea    -0x70(%rbp),%rax
    7f50:	48 89 c7             	mov    %rax,%rdi
    7f53:	e8 00 00 00 00       	callq  7f58 <_ZN6Parser7compileEv+0x2bc>
    7f58:	eb 25                	jmp    7f7f <_ZN6Parser7compileEv+0x2e3>
    7f5a:	48 89 c3             	mov    %rax,%rbx
    int cDr = this->checkDefines(script);

    // Составить таблицу переменных.
    int cVr = this->checkVariables(script);

    this->classify(&this->script, &this->sorted, PARSER_QREGEXP_MODULE);
    7f5d:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    7f61:	48 89 c7             	mov    %rax,%rdi
    7f64:	e8 00 00 00 00       	callq  7f69 <_ZN6Parser7compileEv+0x2cd>
    7f69:	eb 14                	jmp    7f7f <_ZN6Parser7compileEv+0x2e3>
    7f6b:	48 89 c3             	mov    %rax,%rbx
    this->takeModules();
    this->classify(&this->script, &this->hwSequence, PARSER_QREGEXP_HW_SEQUENCE);
    7f6e:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    7f72:	48 89 c7             	mov    %rax,%rdi
    7f75:	e8 00 00 00 00       	callq  7f7a <_ZN6Parser7compileEv+0x2de>
    7f7a:	eb 03                	jmp    7f7f <_ZN6Parser7compileEv+0x2e3>
    7f7c:	48 89 c3             	mov    %rax,%rbx
int Parser::compile(){
    // WiFi b1212556789

   //testCase01();return 0;

    Sems semSoup;
    7f7f:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    7f83:	48 89 c7             	mov    %rax,%rdi
    7f86:	e8 00 00 00 00       	callq  7f8b <_ZN6Parser7compileEv+0x2ef>
    7f8b:	48 89 d8             	mov    %rbx,%rax
    7f8e:	48 89 c7             	mov    %rax,%rdi
    7f91:	e8 00 00 00 00       	callq  7f96 <_ZN6Parser7compileEv+0x2fa>
    compileHWS();

    compileModule();

    //compileHWS();
}
    7f96:	e8 00 00 00 00       	callq  7f9b <_ZN6Parser7compileEv+0x2ff>
    7f9b:	48 81 c4 b8 00 00 00 	add    $0xb8,%rsp
    7fa2:	5b                   	pop    %rbx
    7fa3:	5d                   	pop    %rbp
    7fa4:	c3                   	retq   

Дизассемблирование раздела .text._ZnwmPv:

0000000000000000 <_ZnwmPv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZdlPvS_:

0000000000000000 <_ZdlPvS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	90                   	nop
   d:	5d                   	pop    %rbp
   e:	c3                   	retq   

Дизассемблирование раздела .text._Z7qt_noopv:

0000000000000000 <_Z7qt_noopv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	90                   	nop
   5:	5d                   	pop    %rbp
   6:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QFlagC2Ei:

0000000000000000 <_ZN5QFlagC1Ei>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   f:	8b 55 f4             	mov    -0xc(%rbp),%edx
  12:	89 10                	mov    %edx,(%rax)
  14:	90                   	nop
  15:	5d                   	pop    %rbp
  16:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QFlagcviEv:

0000000000000000 <_ZNK5QFlagcviEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	8b 00                	mov    (%rax),%eax
   e:	5d                   	pop    %rbp
   f:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QCharC2Ev:

0000000000000000 <_ZN5QCharC1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	66 c7 00 00 00       	movw   $0x0,(%rax)
  11:	90                   	nop
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QCharC2Ei:

0000000000000000 <_ZN5QCharC1Ei>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	8b 45 f4             	mov    -0xc(%rbp),%eax
   e:	89 c2                	mov    %eax,%edx
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	66 89 10             	mov    %dx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._Zeq5QCharS_:

0000000000000000 <_Zeq5QCharS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	66 89 7d f0          	mov    %di,-0x10(%rbp)
   8:	66 89 75 e0          	mov    %si,-0x20(%rbp)
   c:	0f b7 55 f0          	movzwl -0x10(%rbp),%edx
  10:	0f b7 45 e0          	movzwl -0x20(%rbp),%eax
  14:	66 39 c2             	cmp    %ax,%dx
  17:	0f 94 c0             	sete   %al
  1a:	5d                   	pop    %rbp
  1b:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QtPrivate8RefCount3refEv:

0000000000000000 <_ZN9QtPrivate8RefCount3refEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN9QtPrivate8RefCount3refEv+0x18>
  18:	89 45 fc             	mov    %eax,-0x4(%rbp)
  1b:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  1f:	75 07                	jne    28 <_ZN9QtPrivate8RefCount3refEv+0x28>
  21:	b8 00 00 00 00       	mov    $0x0,%eax
  26:	eb 17                	jmp    3f <_ZN9QtPrivate8RefCount3refEv+0x3f>
  28:	83 7d fc ff          	cmpl   $0xffffffff,-0x4(%rbp)
    QString script = *str;
  2c:	74 0c                	je     3a <_ZN9QtPrivate8RefCount3refEv+0x3a>
  2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZN9QtPrivate8RefCount3refEv+0x3a>
  3a:	b8 01 00 00 00       	mov    $0x1,%eax
  3f:	c9                   	leaveq 
  40:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QtPrivate8RefCount5derefEv:

0000000000000000 <_ZN9QtPrivate8RefCount5derefEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN9QtPrivate8RefCount5derefEv+0x18>
  18:	89 45 fc             	mov    %eax,-0x4(%rbp)
  1b:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  1f:	75 07                	jne    28 <_ZN9QtPrivate8RefCount5derefEv+0x28>
  21:	b8 00 00 00 00       	mov    $0x0,%eax
  26:	eb 19                	jmp    41 <_ZN9QtPrivate8RefCount5derefEv+0x41>
  28:	83 7d fc ff          	cmpl   $0xffffffff,-0x4(%rbp)
    QString script = *str;
  2c:	75 07                	jne    35 <_ZN9QtPrivate8RefCount5derefEv+0x35>
  2e:	b8 01 00 00 00       	mov    $0x1,%eax
  33:	eb 0c                	jmp    41 <_ZN9QtPrivate8RefCount5derefEv+0x41>
  35:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  39:	48 89 c7             	mov    %rax,%rdi
  3c:	e8 00 00 00 00       	callq  41 <_ZN9QtPrivate8RefCount5derefEv+0x41>
  41:	c9                   	leaveq 
    QString StepArgs;
  42:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QtPrivate8RefCount8isSharedEv:

0000000000000000 <_ZNK9QtPrivate8RefCount8isSharedEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZNK9QtPrivate8RefCount8isSharedEv+0x18>
  18:	89 45 fc             	mov    %eax,-0x4(%rbp)
  1b:	83 7d fc 01          	cmpl   $0x1,-0x4(%rbp)
  1f:	74 0d                	je     2e <_ZNK9QtPrivate8RefCount8isSharedEv+0x2e>
  21:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  25:	74 07                	je     2e <_ZNK9QtPrivate8RefCount8isSharedEv+0x2e>
  27:	b8 01 00 00 00       	mov    $0x1,%eax
    QString script = *str;
  2c:	eb 05                	jmp    33 <_ZNK9QtPrivate8RefCount8isSharedEv+0x33>
  2e:	b8 00 00 00 00       	mov    $0x0,%eax
  33:	c9                   	leaveq 
  34:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QArrayData4dataEv:

0000000000000000 <_ZN10QArrayData4dataEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	8b 40 04             	mov    0x4(%rax),%eax
  13:	85 c0                	test   %eax,%eax
  15:	74 33                	je     4a <_ZN10QArrayData4dataEv+0x4a>
  17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1b:	48 8b 40 10          	mov    0x10(%rax),%rax
  1f:	48 85 c0             	test   %rax,%rax
  22:	78 26                	js     4a <_ZN10QArrayData4dataEv+0x4a>
  24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  28:	48 8b 40 10          	mov    0x10(%rax),%rax
    QString script = *str;
  2c:	48 83 f8 18          	cmp    $0x18,%rax
  30:	73 18                	jae    4a <_ZN10QArrayData4dataEv+0x4a>
  32:	ba 36 00 00 00       	mov    $0x36,%edx
  37:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3e <_ZN10QArrayData4dataEv+0x3e>
  3e:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 45 <_ZN10QArrayData4dataEv+0x45>
    QString StepArgs;
  45:	e8 00 00 00 00       	callq  4a <_ZN10QArrayData4dataEv+0x4a>
  4a:	e8 00 00 00 00       	callq  4f <_ZN10QArrayData4dataEv+0x4f>
  4f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 8b 40 10          	mov    0x10(%rax),%rax
  57:	48 89 c2             	mov    %rax,%rdx
  5a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5e:	48 01 d0             	add    %rdx,%rax
  61:	c9                   	leaveq 
  62:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QArrayData11detachFlagsEv:

0000000000000000 <_ZNK10QArrayData11detachFlagsEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  1f:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZNK10QArrayData11detachFlagsEv+0x2e>
  2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  32:	0f b6 40 0b          	movzbl 0xb(%rax),%eax
  36:	83 e0 80             	and    $0xffffff80,%eax
  39:	84 c0                	test   %al,%al
  3b:	74 11                	je     4e <_ZNK10QArrayData11detachFlagsEv+0x4e>
  3d:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  41:	be 01 00 00 00       	mov    $0x1,%esi
    QString StepArgs;
  46:	48 89 c7             	mov    %rax,%rdi
  49:	e8 00 00 00 00       	callq  4e <_ZNK10QArrayData11detachFlagsEv+0x4e>
  4e:	8b 45 f0             	mov    -0x10(%rbp),%eax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  55:	64 48 33 14 25 28 00 	xor    %fs:0x28,%rdx
  5c:	00 00 
  5e:	74 05                	je     65 <_ZNK10QArrayData11detachFlagsEv+0x65>
  60:	e8 00 00 00 00       	callq  65 <_ZNK10QArrayData11detachFlagsEv+0x65>
  65:	c9                   	leaveq 
  66:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QArrayData10sharedNullEv:

0000000000000000 <_ZN10QArrayData10sharedNullEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # b <_ZN10QArrayData10sharedNullEv+0xb>
   b:	5d                   	pop    %rbp
   c:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QByteArray6lengthEv:

0000000000000000 <_ZNK10QByteArray6lengthEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 40 04             	mov    0x4(%rax),%eax
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QByteArrayC2Ev:

0000000000000000 <_ZN10QByteArrayC1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN10QByteArrayC1Ev+0x11>
  11:	48 89 c2             	mov    %rax,%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 10             	mov    %rdx,(%rax)
  1b:	90                   	nop
  1c:	c9                   	leaveq 
  1d:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QByteArrayD2Ev:

0000000000000000 <_ZN10QByteArrayD1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN10QByteArrayD1Ev+0x1b>
  1b:	83 f0 01             	xor    $0x1,%eax
  1e:	84 c0                	test   %al,%al
  20:	74 0f                	je     31 <_ZN10QByteArrayD1Ev+0x31>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 8b 00             	mov    (%rax),%rax
    QString script = *str;
  29:	48 89 c7             	mov    %rax,%rdi
  2c:	e8 00 00 00 00       	callq  31 <_ZN10QByteArrayD1Ev+0x31>
  31:	90                   	nop
  32:	c9                   	leaveq 
  33:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QByteArray4sizeEv:

0000000000000000 <_ZNK10QByteArray4sizeEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 40 04             	mov    0x4(%rax),%eax
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QByteArray2atEi:

0000000000000000 <_ZNK10QByteArray2atEi>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZNK10QByteArray2atEi+0x1b>
  1b:	89 c2                	mov    %eax,%edx
  1d:	8b 45 f4             	mov    -0xc(%rbp),%eax
  20:	39 c2                	cmp    %eax,%edx
  22:	77 18                	ja     3c <_ZNK10QByteArray2atEi+0x3c>
  24:	ba d0 01 00 00       	mov    $0x1d0,%edx
    QString script = *str;
  29:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 30 <_ZNK10QByteArray2atEi+0x30>
  30:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 37 <_ZNK10QByteArray2atEi+0x37>
  37:	e8 00 00 00 00       	callq  3c <_ZNK10QByteArray2atEi+0x3c>
  3c:	e8 00 00 00 00       	callq  41 <_ZNK10QByteArray2atEi+0x41>
  41:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  45:	48 8b 00             	mov    (%rax),%rax
  48:	48 89 c7             	mov    %rax,%rdi
  4b:	e8 00 00 00 00       	callq  50 <_ZNK10QByteArray2atEi+0x50>
  50:	48 89 c2             	mov    %rax,%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	8b 45 f4             	mov    -0xc(%rbp),%eax
  56:	48 98                	cltq   
  58:	48 01 d0             	add    %rdx,%rax
  5b:	0f b6 00             	movzbl (%rax),%eax
  5e:	c9                   	leaveq 
  5f:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QByteArray6detachEv:

0000000000000000 <_ZN10QByteArray6detachEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN10QByteArray6detachEv+0x1b>
  1b:	84 c0                	test   %al,%al
  1d:	75 11                	jne    30 <_ZN10QByteArray6detachEv+0x30>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 8b 00             	mov    (%rax),%rax
  26:	48 8b 40 10          	mov    0x10(%rax),%rax
    QString script = *str;
  2a:	48 83 f8 18          	cmp    $0x18,%rax
  2e:	74 07                	je     37 <_ZN10QByteArray6detachEv+0x37>
  30:	b8 01 00 00 00       	mov    $0x1,%eax
  35:	eb 05                	jmp    3c <_ZN10QByteArray6detachEv+0x3c>
  37:	b8 00 00 00 00       	mov    $0x0,%eax
  3c:	84 c0                	test   %al,%al
  3e:	74 2c                	je     6c <_ZN10QByteArray6detachEv+0x6c>
  40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  44:	48 8b 00             	mov    (%rax),%rax
  47:	48 89 c7             	mov    %rax,%rdi
  4a:	e8 00 00 00 00       	callq  4f <_ZN10QByteArray6detachEv+0x4f>
  4f:	89 c2                	mov    %eax,%edx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  55:	48 8b 00             	mov    (%rax),%rax
  58:	8b 40 04             	mov    0x4(%rax),%eax
  5b:	8d 48 01             	lea    0x1(%rax),%ecx
  5e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  62:	89 ce                	mov    %ecx,%esi
  64:	48 89 c7             	mov    %rax,%rdi
  67:	e8 00 00 00 00       	callq  6c <_ZN10QByteArray6detachEv+0x6c>
  6c:	90                   	nop
  6d:	c9                   	leaveq 
  6e:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QByteArrayC2ERKS_:

0000000000000000 <_ZN10QByteArrayC1ERKS_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 8b 10             	mov    (%rax),%rdx
  17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1b:	48 89 10             	mov    %rdx,(%rax)
  1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  22:	48 8b 00             	mov    (%rax),%rax
  25:	48 89 c7             	mov    %rax,%rdi
  28:	e8 00 00 00 00       	callq  2d <_ZN10QByteArrayC1ERKS_+0x2d>
    QString script = *str;
  2d:	90                   	nop
  2e:	c9                   	leaveq 
  2f:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QByteRefC2ER10QByteArrayi:

0000000000000000 <_ZN8QByteRefC1ER10QByteArrayi>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	89 55 ec             	mov    %edx,-0x14(%rbp)
   f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  13:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  17:	48 89 10             	mov    %rdx,(%rax)
  1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1e:	8b 55 ec             	mov    -0x14(%rbp),%edx
  21:	89 50 08             	mov    %edx,0x8(%rax)
  24:	90                   	nop
  25:	5d                   	pop    %rbp
  26:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QByteRefaSEc:

0000000000000000 <_ZN8QByteRefaSEc>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 f0                	mov    %esi,%eax
   e:	88 45 f4             	mov    %al,-0xc(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	8b 50 08             	mov    0x8(%rax),%edx
  18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1c:	48 8b 00             	mov    (%rax),%rax
  1f:	48 8b 00             	mov    (%rax),%rax
  22:	8b 40 04             	mov    0x4(%rax),%eax
  25:	39 c2                	cmp    %eax,%edx
  27:	7c 1a                	jl     43 <_ZN8QByteRefaSEc+0x43>
    QString script = *str;
  29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2d:	8b 50 08             	mov    0x8(%rax),%edx
  30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  34:	48 8b 00             	mov    (%rax),%rax
  37:	89 d6                	mov    %edx,%esi
  39:	48 89 c7             	mov    %rax,%rdi
  3c:	e8 00 00 00 00       	callq  41 <_ZN8QByteRefaSEc+0x41>
  41:	eb 0f                	jmp    52 <_ZN8QByteRefaSEc+0x52>
    QString StepArgs;
  43:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  47:	48 8b 00             	mov    (%rax),%rax
  4a:	48 89 c7             	mov    %rax,%rdi
  4d:	e8 00 00 00 00       	callq  52 <_ZN8QByteRefaSEc+0x52>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 8b 00             	mov    (%rax),%rax
  59:	48 8b 00             	mov    (%rax),%rax
  5c:	48 89 c7             	mov    %rax,%rdi
  5f:	e8 00 00 00 00       	callq  64 <_ZN8QByteRefaSEc+0x64>
  64:	48 89 c2             	mov    %rax,%rdx
  67:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  6b:	8b 40 08             	mov    0x8(%rax),%eax
  6e:	48 98                	cltq   
  70:	48 01 c2             	add    %rax,%rdx
  73:	0f b6 45 f4          	movzbl -0xc(%rbp),%eax
  77:	88 02                	mov    %al,(%rdx)
  79:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  7d:	c9                   	leaveq 
  7e:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QByteArrayixEi:

0000000000000000 <_ZN10QByteArrayixEi>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   c:	89 75 d4             	mov    %esi,-0x2c(%rbp)
   f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  16:	00 00 
  18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	83 7d d4 00          	cmpl   $0x0,-0x2c(%rbp)
  22:	79 18                	jns    3c <_ZN10QByteArrayixEi+0x3c>
  24:	ba 22 02 00 00       	mov    $0x222,%edx
    QString script = *str;
  29:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 30 <_ZN10QByteArrayixEi+0x30>
  30:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 37 <_ZN10QByteArrayixEi+0x37>
  37:	e8 00 00 00 00       	callq  3c <_ZN10QByteArrayixEi+0x3c>
  3c:	e8 00 00 00 00       	callq  41 <_ZN10QByteArrayixEi+0x41>
  41:	8b 55 d4             	mov    -0x2c(%rbp),%edx
    QString StepArgs;
  44:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  48:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  4c:	48 89 ce             	mov    %rcx,%rsi
  4f:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	e8 00 00 00 00       	callq  57 <_ZN10QByteArrayixEi+0x57>
  57:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  5b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  5f:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  63:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  6a:	00 00 
  6c:	74 05                	je     73 <_ZN10QByteArrayixEi+0x73>
  6e:	e8 00 00 00 00       	callq  73 <_ZN10QByteArrayixEi+0x73>
  73:	c9                   	leaveq 
  74:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QByteArraypLEc:

0000000000000000 <_ZN10QByteArraypLEc>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 f0                	mov    %esi,%eax
   e:	88 45 f4             	mov    %al,-0xc(%rbp)
  11:	0f be 55 f4          	movsbl -0xc(%rbp),%edx
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	89 d6                	mov    %edx,%esi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN10QByteArraypLEc+0x23>
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QByteArraypLERKS_:

0000000000000000 <_ZN10QByteArraypLERKS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN10QByteArraypLERKS_+0x23>
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._ZNK7QString4sizeEv:

0000000000000000 <_ZNK7QString4sizeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 40 04             	mov    0x4(%rax),%eax
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QString6insertEiRKS_:

0000000000000000 <_ZN7QString6insertEiRKS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  10:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  14:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	callq  20 <_ZN7QString6insertEiRKS_+0x20>
  20:	89 c3                	mov    %eax,%ebx
  22:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZN7QString6insertEiRKS_+0x2e>
  2e:	48 89 c2             	mov    %rax,%rdx
  31:	8b 75 e4             	mov    -0x1c(%rbp),%esi
  34:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  38:	89 d9                	mov    %ebx,%ecx
  3a:	48 89 c7             	mov    %rax,%rdi
  3d:	e8 00 00 00 00       	callq  42 <_ZN7QString6insertEiRKS_+0x42>
    QString StepArgs;
  42:	48 83 c4 28          	add    $0x28,%rsp
  46:	5b                   	pop    %rbx
  47:	5d                   	pop    %rbp
  48:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QString7prependERKS_:

0000000000000000 <_ZN7QString7prependERKS_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	be 00 00 00 00       	mov    $0x0,%esi
  1d:	48 89 c7             	mov    %rax,%rdi
  20:	e8 00 00 00 00       	callq  25 <_ZN7QString7prependERKS_+0x25>
  25:	c9                   	leaveq 
  26:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringpLERKS_:

0000000000000000 <_ZN7QStringpLERKS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN7QStringpLERKS_+0x23>
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QString8fromUtf8EPKci:

0000000000000000 <_ZN7QString8fromUtf8EPKci>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	89 55 dc             	mov    %edx,-0x24(%rbp)
  13:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1a:	00 00 
  1c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  20:	31 c0                	xor    %eax,%eax
  22:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  27:	74 14                	je     3d <_ZN7QString8fromUtf8EPKci+0x3d>
    QString script = *str;
  29:	83 7d dc ff          	cmpl   $0xffffffff,-0x24(%rbp)
  2d:	75 0e                	jne    3d <_ZN7QString8fromUtf8EPKci+0x3d>
  2f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  33:	48 89 c7             	mov    %rax,%rdi
  36:	e8 00 00 00 00       	callq  3b <_ZN7QString8fromUtf8EPKci+0x3b>
  3b:	eb 03                	jmp    40 <_ZN7QString8fromUtf8EPKci+0x40>
  3d:	8b 45 dc             	mov    -0x24(%rbp),%eax
  40:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    QString StepArgs;
  44:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  48:	89 c2                	mov    %eax,%edx
  4a:	48 89 cf             	mov    %rcx,%rdi
  4d:	e8 00 00 00 00       	callq  52 <_ZN7QString8fromUtf8EPKci+0x52>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  56:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  5a:	64 48 33 14 25 28 00 	xor    %fs:0x28,%rdx
  61:	00 00 
  63:	74 05                	je     6a <_ZN7QString8fromUtf8EPKci+0x6a>
  65:	e8 00 00 00 00       	callq  6a <_ZN7QString8fromUtf8EPKci+0x6a>
  6a:	c9                   	leaveq 
  6b:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringC2EPKc:

0000000000000000 <_ZN7QStringC1EPKc>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  15:	74 10                	je     27 <_ZN7QStringC1EPKc+0x27>
  17:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN7QStringC1EPKc+0x23>
  23:	89 c2                	mov    %eax,%edx
  25:	eb 05                	jmp    2c <_ZN7QStringC1EPKc+0x2c>
  27:	ba ff ff ff ff       	mov    $0xffffffff,%edx
    QString script = *str;
  2c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  30:	89 d6                	mov    %edx,%esi
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZN7QStringC1EPKc+0x3a>
  3a:	48 89 c2             	mov    %rax,%rdx
  3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41:	48 89 10             	mov    %rdx,(%rax)
    QString StepArgs;
  44:	90                   	nop
  45:	c9                   	leaveq 
  46:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringaSEPKc:

0000000000000000 <_ZN7QStringaSEPKc>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  24:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  28:	ba ff ff ff ff       	mov    $0xffffffff,%edx
    QString script = *str;
  2d:	48 89 ce             	mov    %rcx,%rsi
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN7QStringaSEPKc+0x38>
  38:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  3c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40:	48 89 d6             	mov    %rdx,%rsi
    QString StepArgs;
  43:	48 89 c7             	mov    %rax,%rdi
  46:	e8 00 00 00 00       	callq  4b <_ZN7QStringaSEPKc+0x4b>
  4b:	48 89 c3             	mov    %rax,%rbx
  4e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 89 c7             	mov    %rax,%rdi
  55:	e8 00 00 00 00       	callq  5a <_ZN7QStringaSEPKc+0x5a>
  5a:	48 89 d8             	mov    %rbx,%rax
  5d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  61:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  68:	00 00 
  6a:	74 21                	je     8d <_ZN7QStringaSEPKc+0x8d>
  6c:	eb 1a                	jmp    88 <_ZN7QStringaSEPKc+0x88>
  6e:	48 89 c3             	mov    %rax,%rbx
  71:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  75:	48 89 c7             	mov    %rax,%rdi
  78:	e8 00 00 00 00       	callq  7d <_ZN7QStringaSEPKc+0x7d>
  7d:	48 89 d8             	mov    %rbx,%rax
  80:	48 89 c7             	mov    %rax,%rdi
  83:	e8 00 00 00 00       	callq  88 <_ZN7QStringaSEPKc+0x88>
  88:	e8 00 00 00 00       	callq  8d <_ZN7QStringaSEPKc+0x8d>
    QR.setMinimal(false);
  8d:	48 83 c4 28          	add    $0x28,%rsp
  91:	5b                   	pop    %rbx
  92:	5d                   	pop    %rbp
  93:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QString6appendEPKc:

0000000000000000 <_ZN7QString6appendEPKc>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  24:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  28:	ba ff ff ff ff       	mov    $0xffffffff,%edx
    QString script = *str;
  2d:	48 89 ce             	mov    %rcx,%rsi
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN7QString6appendEPKc+0x38>
  38:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  3c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40:	48 89 d6             	mov    %rdx,%rsi
    QString StepArgs;
  43:	48 89 c7             	mov    %rax,%rdi
  46:	e8 00 00 00 00       	callq  4b <_ZN7QString6appendEPKc+0x4b>
  4b:	48 89 c3             	mov    %rax,%rbx
  4e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 89 c7             	mov    %rax,%rdi
  55:	e8 00 00 00 00       	callq  5a <_ZN7QString6appendEPKc+0x5a>
  5a:	48 89 d8             	mov    %rbx,%rax
  5d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  61:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  68:	00 00 
  6a:	74 21                	je     8d <_ZN7QString6appendEPKc+0x8d>
  6c:	eb 1a                	jmp    88 <_ZN7QString6appendEPKc+0x88>
  6e:	48 89 c3             	mov    %rax,%rbx
  71:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  75:	48 89 c7             	mov    %rax,%rdi
  78:	e8 00 00 00 00       	callq  7d <_ZN7QString6appendEPKc+0x7d>
  7d:	48 89 d8             	mov    %rbx,%rax
  80:	48 89 c7             	mov    %rax,%rdi
  83:	e8 00 00 00 00       	callq  88 <_ZN7QString6appendEPKc+0x88>
  88:	e8 00 00 00 00       	callq  8d <_ZN7QString6appendEPKc+0x8d>
    QR.setMinimal(false);
  8d:	48 83 c4 28          	add    $0x28,%rsp
  91:	5b                   	pop    %rbx
  92:	5d                   	pop    %rbp
  93:	c3                   	retq   

Дизассемблирование раздела .text._ZNK7QString6isNullEv:

0000000000000000 <_ZNK7QString6isNullEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  11:	48 8b 18             	mov    (%rax),%rbx
  14:	e8 00 00 00 00       	callq  19 <_ZNK7QString6isNullEv+0x19>
  19:	48 39 c3             	cmp    %rax,%rbx
  1c:	0f 94 c0             	sete   %al
  1f:	48 83 c4 18          	add    $0x18,%rsp
  23:	5b                   	pop    %rbx
  24:	5d                   	pop    %rbp
  25:	c3                   	retq   

Дизассемблирование раздела .text._ZNK7QString6lengthEv:

0000000000000000 <_ZNK7QString6lengthEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 40 04             	mov    0x4(%rax),%eax
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

Дизассемблирование раздела .text._ZNK7QString7unicodeEv:

0000000000000000 <_ZNK7QString7unicodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZNK7QString7unicodeEv+0x1b>
  1b:	c9                   	leaveq 
  1c:	c3                   	retq   

Дизассемблирование раздела .text._ZNK7QString9constDataEv:

0000000000000000 <_ZNK7QString9constDataEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZNK7QString9constDataEv+0x1b>
  1b:	c9                   	leaveq 
  1c:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QString5clearEv:

0000000000000000 <_ZN7QString5clearEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  14:	00 00 
  16:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1a:	31 c0                	xor    %eax,%eax
  1c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZN7QString5clearEv+0x28>
  28:	83 f0 01             	xor    $0x1,%eax
    QString script = *str;
  2b:	84 c0                	test   %al,%al
  2d:	74 47                	je     76 <_ZN7QString5clearEv+0x76>
  2f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  33:	48 89 c7             	mov    %rax,%rdi
  36:	e8 00 00 00 00       	callq  3b <_ZN7QString5clearEv+0x3b>
  3b:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  3f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString StepArgs;
  43:	48 89 d6             	mov    %rdx,%rsi
  46:	48 89 c7             	mov    %rax,%rdi
  49:	e8 00 00 00 00       	callq  4e <_ZN7QString5clearEv+0x4e>
  4e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 89 c7             	mov    %rax,%rdi
  55:	e8 00 00 00 00       	callq  5a <_ZN7QString5clearEv+0x5a>
  5a:	eb 1a                	jmp    76 <_ZN7QString5clearEv+0x76>
  5c:	48 89 c3             	mov    %rax,%rbx
  5f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  63:	48 89 c7             	mov    %rax,%rdi
  66:	e8 00 00 00 00       	callq  6b <_ZN7QString5clearEv+0x6b>
  6b:	48 89 d8             	mov    %rbx,%rax
  6e:	48 89 c7             	mov    %rax,%rdi
  71:	e8 00 00 00 00       	callq  76 <_ZN7QString5clearEv+0x76>
  76:	90                   	nop
  77:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7b:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  82:	00 00 
  84:	74 05                	je     8b <_ZN7QString5clearEv+0x8b>
  86:	e8 00 00 00 00       	callq  8b <_ZN7QString5clearEv+0x8b>
    QR.setMinimal(false);
  8b:	48 83 c4 28          	add    $0x28,%rsp
  8f:	5b                   	pop    %rbx
  90:	5d                   	pop    %rbp
  91:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringC2ERKS_:

0000000000000000 <_ZN7QStringC1ERKS_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 8b 10             	mov    (%rax),%rdx
  17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1b:	48 89 10             	mov    %rdx,(%rax)
  1e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  22:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  26:	75 18                	jne    40 <_ZN7QStringC1ERKS_+0x40>
  28:	ba 6e 03 00 00       	mov    $0x36e,%edx
    QString script = *str;
  2d:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 34 <_ZN7QStringC1ERKS_+0x34>
  34:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 3b <_ZN7QStringC1ERKS_+0x3b>
  3b:	e8 00 00 00 00       	callq  40 <_ZN7QStringC1ERKS_+0x40>
  40:	e8 00 00 00 00       	callq  45 <_ZN7QStringC1ERKS_+0x45>
    QString StepArgs;
  45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  49:	48 8b 00             	mov    (%rax),%rax
  4c:	48 89 c7             	mov    %rax,%rdi
  4f:	e8 00 00 00 00       	callq  54 <_ZN7QStringC1ERKS_+0x54>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  54:	90                   	nop
  55:	c9                   	leaveq 
  56:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QCharRefC2ER7QStringi:

0000000000000000 <_ZN8QCharRefC1ER7QStringi>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	89 55 ec             	mov    %edx,-0x14(%rbp)
   f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  13:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  17:	48 89 10             	mov    %rdx,(%rax)
  1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1e:	8b 55 ec             	mov    -0x14(%rbp),%edx
  21:	89 50 08             	mov    %edx,0x8(%rax)
  24:	90                   	nop
  25:	5d                   	pop    %rbp
  26:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QCharRefcv5QCharEv:

0000000000000000 <_ZNK8QCharRefcv5QCharEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	8b 50 08             	mov    0x8(%rax),%edx
  22:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  26:	48 8b 00             	mov    (%rax),%rax
    QString script = *str;
  29:	48 8b 00             	mov    (%rax),%rax
  2c:	8b 40 04             	mov    0x4(%rax),%eax
  2f:	39 c2                	cmp    %eax,%edx
  31:	7d 2c                	jge    5f <_ZNK8QCharRefcv5QCharEv+0x5f>
  33:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  37:	48 8b 00             	mov    (%rax),%rax
  3a:	48 8b 00             	mov    (%rax),%rax
  3d:	48 89 c7             	mov    %rax,%rdi
  40:	e8 00 00 00 00       	callq  45 <_ZNK8QCharRefcv5QCharEv+0x45>
    QString StepArgs;
  45:	48 89 c2             	mov    %rax,%rdx
  48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4c:	8b 40 08             	mov    0x8(%rax),%eax
  4f:	48 98                	cltq   
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 01 c0             	add    %rax,%rax
  54:	48 01 d0             	add    %rdx,%rax
  57:	0f b7 00             	movzwl (%rax),%eax
  5a:	0f b7 c0             	movzwl %ax,%eax
  5d:	eb 05                	jmp    64 <_ZNK8QCharRefcv5QCharEv+0x64>
  5f:	b8 00 00 00 00       	mov    $0x0,%eax
  64:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
  68:	89 c6                	mov    %eax,%esi
  6a:	48 89 d7             	mov    %rdx,%rdi
  6d:	e8 00 00 00 00       	callq  72 <_ZNK8QCharRefcv5QCharEv+0x72>
  72:	0f b7 45 f0          	movzwl -0x10(%rbp),%eax
  76:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  7a:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  81:	00 00 
  83:	74 05                	je     8a <_ZNK8QCharRefcv5QCharEv+0x8a>
  85:	e8 00 00 00 00       	callq  8a <_ZNK8QCharRefcv5QCharEv+0x8a>
    QR.setMinimal(false);
  8a:	c9                   	leaveq 
  8b:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringC2Ev:

0000000000000000 <_ZN7QStringC1Ev>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN7QStringC1Ev+0x11>
  11:	48 89 c2             	mov    %rax,%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 10             	mov    %rdx,(%rax)
  1b:	90                   	nop
  1c:	c9                   	leaveq 
  1d:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringD2Ev:

0000000000000000 <_ZN7QStringD1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN7QStringD1Ev+0x1b>
  1b:	83 f0 01             	xor    $0x1,%eax
  1e:	84 c0                	test   %al,%al
  20:	74 0f                	je     31 <_ZN7QStringD1Ev+0x31>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 8b 00             	mov    (%rax),%rax
    QString script = *str;
  29:	48 89 c7             	mov    %rax,%rdi
  2c:	e8 00 00 00 00       	callq  31 <_ZN7QStringD1Ev+0x31>
  31:	90                   	nop
  32:	c9                   	leaveq 
  33:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringixEi:

0000000000000000 <_ZN7QStringixEi>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   c:	89 75 d4             	mov    %esi,-0x2c(%rbp)
   f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  16:	00 00 
  18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	83 7d d4 00          	cmpl   $0x0,-0x2c(%rbp)
  22:	79 18                	jns    3c <_ZN7QStringixEi+0x3c>
  24:	ba 39 04 00 00       	mov    $0x439,%edx
    QString script = *str;
  29:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 30 <_ZN7QStringixEi+0x30>
  30:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 37 <_ZN7QStringixEi+0x37>
  37:	e8 00 00 00 00       	callq  3c <_ZN7QStringixEi+0x3c>
  3c:	e8 00 00 00 00       	callq  41 <_ZN7QStringixEi+0x41>
  41:	8b 55 d4             	mov    -0x2c(%rbp),%edx
    QString StepArgs;
  44:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  48:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  4c:	48 89 ce             	mov    %rcx,%rsi
  4f:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	e8 00 00 00 00       	callq  57 <_ZN7QStringixEi+0x57>
  57:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  5b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  5f:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  63:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  6a:	00 00 
  6c:	74 05                	je     73 <_ZN7QStringixEi+0x73>
  6e:	e8 00 00 00 00       	callq  73 <_ZN7QStringixEi+0x73>
  73:	c9                   	leaveq 
  74:	c3                   	retq   

Дизассемблирование раздела .text._ZNK7QStringeqEPKc:

0000000000000000 <_ZNK7QStringeqEPKc>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  11:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNK7QStringeqEPKc+0x1d>
  1d:	89 c3                	mov    %eax,%ebx
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZNK7QStringeqEPKc+0x2b>
    QString script = *str;
  2b:	48 89 c7             	mov    %rax,%rdi
  2e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  32:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  38:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  3d:	48 89 c2             	mov    %rax,%rdx
  40:	89 de                	mov    %ebx,%esi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZNK7QStringeqEPKc+0x47>
  47:	85 c0                	test   %eax,%eax
  49:	0f 94 c0             	sete   %al
  4c:	48 83 c4 18          	add    $0x18,%rsp
  50:	5b                   	pop    %rbx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	5d                   	pop    %rbp
  52:	c3                   	retq   

Дизассемблирование раздела .text._ZplRK7QStringS1_:

0000000000000000 <_ZplRK7QStringS1_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  11:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  28:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString script = *str;
  2c:	48 89 d6             	mov    %rdx,%rsi
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZplRK7QStringS1_+0x37>
  37:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  3b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  3f:	48 89 d6             	mov    %rdx,%rsi
    QString StepArgs;
  42:	48 89 c7             	mov    %rax,%rdi
  45:	e8 00 00 00 00       	callq  4a <_ZplRK7QStringS1_+0x4a>
  4a:	eb 1a                	jmp    66 <_ZplRK7QStringS1_+0x66>
  4c:	48 89 c3             	mov    %rax,%rbx
  4f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 89 c7             	mov    %rax,%rdi
  56:	e8 00 00 00 00       	callq  5b <_ZplRK7QStringS1_+0x5b>
  5b:	48 89 d8             	mov    %rbx,%rax
  5e:	48 89 c7             	mov    %rax,%rdi
  61:	e8 00 00 00 00       	callq  66 <_ZplRK7QStringS1_+0x66>
  66:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  6e:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  75:	00 00 
  77:	74 05                	je     7e <_ZplRK7QStringS1_+0x7e>
  79:	e8 00 00 00 00       	callq  7e <_ZplRK7QStringS1_+0x7e>
  7e:	48 83 c4 38          	add    $0x38,%rsp
  82:	5b                   	pop    %rbx
  83:	5d                   	pop    %rbp
  84:	c3                   	retq   

Дизассемблирование раздела .text._ZplRK7QStringPKc:

0000000000000000 <_ZplRK7QStringPKc>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  11:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  28:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString script = *str;
  2c:	48 89 d6             	mov    %rdx,%rsi
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZplRK7QStringPKc+0x37>
  37:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  3b:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  3f:	ba ff ff ff ff       	mov    $0xffffffff,%edx
    QString StepArgs;
  44:	48 89 ce             	mov    %rcx,%rsi
  47:	48 89 c7             	mov    %rax,%rdi
  4a:	e8 00 00 00 00       	callq  4f <_ZplRK7QStringPKc+0x4f>
  4f:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  57:	48 89 d6             	mov    %rdx,%rsi
  5a:	48 89 c7             	mov    %rax,%rdi
  5d:	e8 00 00 00 00       	callq  62 <_ZplRK7QStringPKc+0x62>
  62:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZplRK7QStringPKc+0x6e>
  6e:	eb 2b                	jmp    9b <_ZplRK7QStringPKc+0x9b>
  70:	48 89 c3             	mov    %rax,%rbx
  73:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  77:	48 89 c7             	mov    %rax,%rdi
  7a:	e8 00 00 00 00       	callq  7f <_ZplRK7QStringPKc+0x7f>
  7f:	eb 03                	jmp    84 <_ZplRK7QStringPKc+0x84>
  81:	48 89 c3             	mov    %rax,%rbx
  84:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  88:	48 89 c7             	mov    %rax,%rdi
    QR.setMinimal(false);
  8b:	e8 00 00 00 00       	callq  90 <_ZplRK7QStringPKc+0x90>
  90:	48 89 d8             	mov    %rbx,%rax
  93:	48 89 c7             	mov    %rax,%rdi
  96:	e8 00 00 00 00       	callq  9b <_ZplRK7QStringPKc+0x9b>

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  9f:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  a3:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  aa:	00 00 
  ac:	74 05                	je     b3 <_ZplRK7QStringPKc+0xb3>
  ae:	e8 00 00 00 00       	callq  b3 <_ZplRK7QStringPKc+0xb3>
  b3:	48 83 c4 38          	add    $0x38,%rsp
  b7:	5b                   	pop    %rbx
  b8:	5d                   	pop    %rbp
  b9:	c3                   	retq   

Дизассемблирование раздела .text._ZplPKcRK7QString:

0000000000000000 <_ZplPKcRK7QString>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  11:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  28:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    QString script = *str;
  2c:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  31:	48 89 ce             	mov    %rcx,%rsi
  34:	48 89 c7             	mov    %rax,%rdi
  37:	e8 00 00 00 00       	callq  3c <_ZplPKcRK7QString+0x3c>
  3c:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  40:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString StepArgs;
  44:	48 89 d6             	mov    %rdx,%rsi
  47:	48 89 c7             	mov    %rax,%rdi
  4a:	e8 00 00 00 00       	callq  4f <_ZplPKcRK7QString+0x4f>
  4f:	eb 1a                	jmp    6b <_ZplPKcRK7QString+0x6b>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 c3             	mov    %rax,%rbx
  54:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  58:	48 89 c7             	mov    %rax,%rdi
  5b:	e8 00 00 00 00       	callq  60 <_ZplPKcRK7QString+0x60>
  60:	48 89 d8             	mov    %rbx,%rax
  63:	48 89 c7             	mov    %rax,%rdi
  66:	e8 00 00 00 00       	callq  6b <_ZplPKcRK7QString+0x6b>
  6b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6f:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  73:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  7a:	00 00 
  7c:	74 05                	je     83 <_ZplPKcRK7QString+0x83>
  7e:	e8 00 00 00 00       	callq  83 <_ZplPKcRK7QString+0x83>
  83:	48 83 c4 38          	add    $0x38,%rsp
  87:	5b                   	pop    %rbx
  88:	5d                   	pop    %rbp
  89:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QStringRefD2Ev:

0000000000000000 <_ZN10QStringRefD1Ev>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	90                   	nop
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QStringRef4sizeEv:

0000000000000000 <_ZNK10QStringRef4sizeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	8b 40 0c             	mov    0xc(%rax),%eax
   f:	5d                   	pop    %rbp
  10:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QStringRef7unicodeEv:

0000000000000000 <_ZNK10QStringRef7unicodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 85 c0             	test   %rax,%rax
  16:	75 0f                	jne    27 <_ZNK10QStringRef7unicodeEv+0x27>
  18:	e8 00 00 00 00       	callq  1d <_ZNK10QStringRef7unicodeEv+0x1d>
  1d:	48 89 c7             	mov    %rax,%rdi
  20:	e8 00 00 00 00       	callq  25 <_ZNK10QStringRef7unicodeEv+0x25>
  25:	eb 21                	jmp    48 <_ZNK10QStringRef7unicodeEv+0x48>
  27:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString script = *str;
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZNK10QStringRef7unicodeEv+0x36>
  36:	48 89 c2             	mov    %rax,%rdx
  39:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3d:	8b 40 08             	mov    0x8(%rax),%eax
  40:	48 98                	cltq   
    QString StepArgs;
  42:	48 01 c0             	add    %rax,%rax
  45:	48 01 d0             	add    %rdx,%rax
  48:	c9                   	leaveq 
  49:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QStringRef9constDataEv:

0000000000000000 <_ZNK10QStringRef9constDataEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZNK10QStringRef9constDataEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QStringRef6isNullEv:

0000000000000000 <_ZNK10QStringRef6isNullEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 85 c0             	test   %rax,%rax
  16:	74 13                	je     2b <_ZNK10QStringRef6isNullEv+0x2b>
  18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1c:	48 8b 00             	mov    (%rax),%rax
  1f:	48 89 c7             	mov    %rax,%rdi
  22:	e8 00 00 00 00       	callq  27 <_ZNK10QStringRef6isNullEv+0x27>
  27:	84 c0                	test   %al,%al
    QString script = *str;
  29:	74 07                	je     32 <_ZNK10QStringRef6isNullEv+0x32>
  2b:	b8 01 00 00 00       	mov    $0x1,%eax
  30:	eb 05                	jmp    37 <_ZNK10QStringRef6isNullEv+0x37>
  32:	b8 00 00 00 00       	mov    $0x0,%eax
  37:	c9                   	leaveq 
  38:	c3                   	retq   

Дизассемблирование раздела .text._ZNK10QStringRefeqEPKc:

0000000000000000 <_ZNK10QStringRefeqEPKc>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  11:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNK10QStringRefeqEPKc+0x1d>
  1d:	89 c3                	mov    %eax,%ebx
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZNK10QStringRefeqEPKc+0x2b>
    QString script = *str;
  2b:	48 89 c7             	mov    %rax,%rdi
  2e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  32:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  38:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  3d:	48 89 c2             	mov    %rax,%rdx
  40:	89 de                	mov    %ebx,%esi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZNK10QStringRefeqEPKc+0x47>
  47:	85 c0                	test   %eax,%eax
  49:	0f 94 c0             	sete   %al
  4c:	48 83 c4 18          	add    $0x18,%rsp
  50:	5b                   	pop    %rbx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	5d                   	pop    %rbp
  52:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QListData7disposeEv:

0000000000000000 <_ZN9QListData7disposeEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN9QListData7disposeEv+0x1b>
  1b:	90                   	nop
  1c:	c9                   	leaveq 
  1d:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QListData4sizeEv:

0000000000000000 <_ZNK9QListData4sizeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 50 0c             	mov    0xc(%rax),%edx
  12:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  16:	48 8b 00             	mov    (%rax),%rax
  19:	8b 40 08             	mov    0x8(%rax),%eax
  1c:	29 c2                	sub    %eax,%edx
  1e:	89 d0                	mov    %edx,%eax
  20:	5d                   	pop    %rbp
  21:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QListData7isEmptyEv:

0000000000000000 <_ZNK9QListData7isEmptyEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 50 0c             	mov    0xc(%rax),%edx
  12:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  16:	48 8b 00             	mov    (%rax),%rax
  19:	8b 40 08             	mov    0x8(%rax),%eax
  1c:	39 c2                	cmp    %eax,%edx
  1e:	0f 94 c0             	sete   %al
  21:	5d                   	pop    %rbp
  22:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QListData2atEi:

0000000000000000 <_ZNK9QListData2atEi>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   f:	48 8b 00             	mov    (%rax),%rax
  12:	48 8d 48 10          	lea    0x10(%rax),%rcx
  16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1a:	48 8b 00             	mov    (%rax),%rax
  1d:	8b 40 08             	mov    0x8(%rax),%eax
  20:	48 63 d0             	movslq %eax,%rdx
  23:	8b 45 f4             	mov    -0xc(%rbp),%eax
  26:	48 98                	cltq   
  28:	48 01 d0             	add    %rdx,%rax
    QString script = *str;
  2b:	48 c1 e0 03          	shl    $0x3,%rax
  2f:	48 01 c8             	add    %rcx,%rax
  32:	5d                   	pop    %rbp
  33:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QListData5beginEv:

0000000000000000 <_ZNK9QListData5beginEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	48 8d 50 10          	lea    0x10(%rax),%rdx
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	48 8b 00             	mov    (%rax),%rax
  1a:	8b 40 08             	mov    0x8(%rax),%eax
  1d:	48 98                	cltq   
  1f:	48 c1 e0 03          	shl    $0x3,%rax
  23:	48 01 d0             	add    %rdx,%rax
  26:	5d                   	pop    %rbp
  27:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QListData3endEv:

0000000000000000 <_ZNK9QListData3endEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	48 8d 50 10          	lea    0x10(%rax),%rdx
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	48 8b 00             	mov    (%rax),%rax
  1a:	8b 40 0c             	mov    0xc(%rax),%eax
  1d:	48 98                	cltq   
  1f:	48 c1 e0 03          	shl    $0x3,%rax
  23:	48 01 d0             	add    %rdx,%rax
  26:	5d                   	pop    %rbp
  27:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QListSpecialMethodsI10QByteArrayED2Ev:

0000000000000000 <_ZN19QListSpecialMethodsI10QByteArrayED1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	90                   	nop
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QListSpecialMethodsI7QStringED2Ev:

0000000000000000 <_ZN19QListSpecialMethodsI7QStringED1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	90                   	nop
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZN11QStringListC2Ev:

0000000000000000 <_ZN11QStringListC1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN11QStringListC1Ev+0x18>
  18:	90                   	nop
  19:	c9                   	leaveq 
  1a:	c3                   	retq   

Дизассемблирование раздела .text._ZN11QStringListC2ERKS_:

0000000000000000 <_ZN11QStringListC1ERKS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN11QStringListC1ERKS_+0x23>
  23:	90                   	nop
  24:	c9                   	leaveq 
  25:	c3                   	retq   

Дизассемблирование раздела .text._ZN11QStringListD2Ev:

0000000000000000 <_ZN11QStringListD1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN11QStringListD1Ev+0x18>
  18:	90                   	nop
  19:	c9                   	leaveq 
  1a:	c3                   	retq   

Дизассемблирование раздела .text._ZN11QStringListlsERK7QString:

0000000000000000 <_ZN11QStringListlsERK7QString>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN11QStringListlsERK7QString+0x23>
  23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN11QStringListlsERKS_:

0000000000000000 <_ZN11QStringListlsERKS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN11QStringListlsERKS_+0x23>
  23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QListSpecialMethodsI7QStringE4selfEv:

0000000000000000 <_ZN19QListSpecialMethodsI7QStringE4selfEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	5d                   	pop    %rbp
   d:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QListSpecialMethodsI7QStringE16removeDuplicatesEv:

0000000000000000 <_ZN19QListSpecialMethodsI7QStringE16removeDuplicatesEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN19QListSpecialMethodsI7QStringE16removeDuplicatesEv+0x18>
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	callq  20 <_ZN19QListSpecialMethodsI7QStringE16removeDuplicatesEv+0x20>
  20:	c9                   	leaveq 
  21:	c3                   	retq   

Дизассемблирование раздела .text._ZNK11QStringList8containsERK7QStringN2Qt15CaseSensitivityE:

0000000000000000 <_ZNK11QStringList8containsERK7QStringN2Qt15CaseSensitivityE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	89 55 ec             	mov    %edx,-0x14(%rbp)
  13:	8b 55 ec             	mov    -0x14(%rbp),%edx
  16:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1e:	48 89 ce             	mov    %rcx,%rsi
  21:	48 89 c7             	mov    %rax,%rdi
  24:	e8 00 00 00 00       	callq  29 <_ZNK11QStringList8containsERK7QStringN2Qt15CaseSensitivityE+0x29>
    QString script = *str;
  29:	c9                   	leaveq 
  2a:	c3                   	retq   

Дизассемблирование раздела .text._ZNK12QMapNodeBase5colorEv:

0000000000000000 <_ZNK12QMapNodeBase5colorEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	83 e0 01             	and    $0x1,%eax
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

Дизассемблирование раздела .text._ZN12QMapNodeBase8setColorENS_5ColorE:

0000000000000000 <_ZN12QMapNodeBase8setColorENS_5ColorE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	83 7d f4 01          	cmpl   $0x1,-0xc(%rbp)
   f:	75 17                	jne    28 <_ZN12QMapNodeBase8setColorENS_5ColorE+0x28>
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 8b 00             	mov    (%rax),%rax
  18:	48 83 c8 01          	or     $0x1,%rax
  1c:	48 89 c2             	mov    %rax,%rdx
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 10             	mov    %rdx,(%rax)
  26:	eb 15                	jmp    3d <_ZN12QMapNodeBase8setColorENS_5ColorE+0x3d>
  28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString script = *str;
  2c:	48 8b 00             	mov    (%rax),%rax
  2f:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
  33:	48 89 c2             	mov    %rax,%rdx
  36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3a:	48 89 10             	mov    %rdx,(%rax)
  3d:	90                   	nop
  3e:	5d                   	pop    %rbp
  3f:	c3                   	retq   

Дизассемблирование раздела .text._ZN12QMapNodeBase9setParentEPS_:

0000000000000000 <_ZN12QMapNodeBase9setParentEPS_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	83 e0 03             	and    $0x3,%eax
  16:	48 89 c2             	mov    %rax,%rdx
  19:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1d:	48 09 c2             	or     %rax,%rdx
  20:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  24:	48 89 10             	mov    %rdx,(%rax)
  27:	90                   	nop
  28:	5d                   	pop    %rbp
    QString script = *str;
  29:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashData8willGrowEv:

0000000000000000 <_ZN9QHashData8willGrowEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	8b 50 14             	mov    0x14(%rax),%edx
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	8b 40 20             	mov    0x20(%rax),%eax
  1a:	39 c2                	cmp    %eax,%edx
  1c:	7c 21                	jl     3f <_ZN9QHashData8willGrowEv+0x3f>
  1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  22:	0f b7 40 1e          	movzwl 0x1e(%rax),%eax
  26:	98                   	cwtl   
  27:	8d 50 01             	lea    0x1(%rax),%edx
    QString script = *str;
  2a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2e:	89 d6                	mov    %edx,%esi
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN9QHashData8willGrowEv+0x38>
  38:	b8 01 00 00 00       	mov    $0x1,%eax
  3d:	eb 05                	jmp    44 <_ZN9QHashData8willGrowEv+0x44>
  3f:	b8 00 00 00 00       	mov    $0x0,%eax
    QString StepArgs;
  44:	c9                   	leaveq 
  45:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashData9hasShrunkEv:

0000000000000000 <_ZN9QHashData9hasShrunkEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  1f:	8b 50 14             	mov    0x14(%rax),%edx
  22:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  26:	8b 40 20             	mov    0x20(%rax),%eax
    QString script = *str;
  29:	c1 f8 03             	sar    $0x3,%eax
  2c:	39 c2                	cmp    %eax,%edx
  2e:	7f 74                	jg     a4 <_ZN9QHashData9hasShrunkEv+0xa4>
  30:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  34:	0f b7 50 1e          	movzwl 0x1e(%rax),%edx
  38:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  3c:	0f b7 40 1c          	movzwl 0x1c(%rax),%eax
  40:	66 39 c2             	cmp    %ax,%dx
    QString StepArgs;
  43:	7e 5f                	jle    a4 <_ZN9QHashData9hasShrunkEv+0xa4>
  45:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  49:	0f b7 40 1c          	movzwl 0x1c(%rax),%eax
  4d:	98                   	cwtl   
  4e:	89 45 ec             	mov    %eax,-0x14(%rbp)
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  55:	0f b7 40 1e          	movzwl 0x1e(%rax),%eax
  59:	98                   	cwtl   
  5a:	83 e8 02             	sub    $0x2,%eax
  5d:	89 45 e8             	mov    %eax,-0x18(%rbp)
  60:	48 8d 55 ec          	lea    -0x14(%rbp),%rdx
  64:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
  68:	48 89 d6             	mov    %rdx,%rsi
  6b:	48 89 c7             	mov    %rax,%rdi
  6e:	e8 00 00 00 00       	callq  73 <_ZN9QHashData9hasShrunkEv+0x73>
  73:	8b 10                	mov    (%rax),%edx
  75:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  79:	89 d6                	mov    %edx,%esi
  7b:	48 89 c7             	mov    %rax,%rdi
  7e:	e8 00 00 00 00       	callq  83 <_ZN9QHashData9hasShrunkEv+0x83>
  83:	eb 1f                	jmp    a4 <_ZN9QHashData9hasShrunkEv+0xa4>
  85:	48 83 fa 01          	cmp    $0x1,%rdx
  89:	74 08                	je     93 <_ZN9QHashData9hasShrunkEv+0x93>
    QR.setMinimal(false);
  8b:	48 89 c7             	mov    %rax,%rdi
  8e:	e8 00 00 00 00       	callq  93 <_ZN9QHashData9hasShrunkEv+0x93>
  93:	48 89 c7             	mov    %rax,%rdi
  96:	e8 00 00 00 00       	callq  9b <_ZN9QHashData9hasShrunkEv+0x9b>

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  9f:	e8 00 00 00 00       	callq  a4 <_ZN9QHashData9hasShrunkEv+0xa4>
  a4:	90                   	nop
  a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  a9:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  b0:	00 00 
  b2:	74 05                	je     b9 <_ZN9QHashData9hasShrunkEv+0xb9>
  b4:	e8 00 00 00 00       	callq  b9 <_ZN9QHashData9hasShrunkEv+0xb9>
  b9:	c9                   	leaveq 
  ba:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashData9firstNodeEv:

0000000000000000 <_ZN9QHashData9firstNodeEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  10:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  14:	48 8b 40 08          	mov    0x8(%rax),%rax
  18:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  1c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  20:	8b 40 20             	mov    0x20(%rax),%eax
  23:	89 45 ec             	mov    %eax,-0x14(%rbp)
  26:	8b 45 ec             	mov    -0x14(%rbp),%eax
    QString script = *str;
  29:	8d 50 ff             	lea    -0x1(%rax),%edx
  2c:	89 55 ec             	mov    %edx,-0x14(%rbp)
  2f:	85 c0                	test   %eax,%eax
  31:	0f 95 c0             	setne  %al
  34:	84 c0                	test   %al,%al
  36:	74 1d                	je     55 <_ZN9QHashData9firstNodeEv+0x55>
  38:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  3c:	48 8b 00             	mov    (%rax),%rax
  3f:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
    QString StepArgs;
  43:	74 09                	je     4e <_ZN9QHashData9firstNodeEv+0x4e>
  45:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  49:	48 8b 00             	mov    (%rax),%rax
  4c:	eb 0b                	jmp    59 <_ZN9QHashData9firstNodeEv+0x59>
  4e:	48 83 45 f0 08       	addq   $0x8,-0x10(%rbp)
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	eb d1                	jmp    26 <_ZN9QHashData9firstNodeEv+0x26>
  55:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  59:	5d                   	pop    %rbp
  5a:	c3                   	retq   

Дизассемблирование раздела .text._ZorN9QIODevice12OpenModeFlagES0_:

0000000000000000 <_ZorN9QIODevice12OpenModeFlagES0_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	89 7d ec             	mov    %edi,-0x14(%rbp)
   b:	89 75 e8             	mov    %esi,-0x18(%rbp)
   e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  15:	00 00 
  17:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1b:	31 c0                	xor    %eax,%eax
  1d:	8b 55 ec             	mov    -0x14(%rbp),%edx
  20:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  24:	89 d6                	mov    %edx,%esi
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZorN9QIODevice12OpenModeFlagES0_+0x2e>
  2e:	8b 55 e8             	mov    -0x18(%rbp),%edx
  31:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  35:	89 d6                	mov    %edx,%esi
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	e8 00 00 00 00       	callq  3f <_ZorN9QIODevice12OpenModeFlagES0_+0x3f>
  3f:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    QString StepArgs;
  43:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  4a:	00 00 
  4c:	74 05                	je     53 <_ZorN9QIODevice12OpenModeFlagES0_+0x53>
  4e:	e8 00 00 00 00       	callq  53 <_ZorN9QIODevice12OpenModeFlagES0_+0x53>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	c9                   	leaveq 
  54:	c3                   	retq   

Дизассемблирование раздела .text._ZNK20QXmlStreamAttributes12hasAttributeERK7QString:

0000000000000000 <_ZNK20QXmlStreamAttributes12hasAttributeERK7QString>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   d:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  24:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  28:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
    QString script = *str;
  2c:	48 89 ce             	mov    %rcx,%rsi
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZNK20QXmlStreamAttributes12hasAttributeERK7QString+0x37>
  37:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  3b:	48 89 c7             	mov    %rax,%rdi
  3e:	e8 00 00 00 00       	callq  43 <_ZNK20QXmlStreamAttributes12hasAttributeERK7QString+0x43>
    QString StepArgs;
  43:	83 f0 01             	xor    $0x1,%eax
  46:	89 c3                	mov    %eax,%ebx
  48:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  4c:	48 89 c7             	mov    %rax,%rdi
  4f:	e8 00 00 00 00       	callq  54 <_ZNK20QXmlStreamAttributes12hasAttributeERK7QString+0x54>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  54:	89 d8                	mov    %ebx,%eax
  56:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  5a:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  61:	00 00 
  63:	74 05                	je     6a <_ZNK20QXmlStreamAttributes12hasAttributeERK7QString+0x6a>
  65:	e8 00 00 00 00       	callq  6a <_ZNK20QXmlStreamAttributes12hasAttributeERK7QString+0x6a>
  6a:	48 83 c4 38          	add    $0x38,%rsp
  6e:	5b                   	pop    %rbx
  6f:	5d                   	pop    %rbp
  70:	c3                   	retq   

Дизассемблирование раздела .text._ZNK16QXmlStreamReader8hasErrorEv:

0000000000000000 <_ZNK16QXmlStreamReader8hasErrorEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZNK16QXmlStreamReader8hasErrorEv+0x18>
  18:	85 c0                	test   %eax,%eax
  1a:	0f 95 c0             	setne  %al
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

Дизассемблирование раздела .text._ZN11QDataStreamlsEh:

0000000000000000 <_ZN11QDataStreamlsEh>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 f0                	mov    %esi,%eax
   e:	88 45 f4             	mov    %al,-0xc(%rbp)
  11:	0f b6 45 f4          	movzbl -0xc(%rbp),%eax
  15:	0f be d0             	movsbl %al,%edx
  18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1c:	89 d6                	mov    %edx,%esi
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZN11QDataStreamlsEh+0x26>
  26:	c9                   	leaveq 
  27:	c3                   	retq   

Дизассемблирование раздела .text._ZN8VarTypesD2Ev:

0000000000000000 <_ZN8VarTypesD1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN8VarTypesD1Ev+0x18>
  18:	90                   	nop
  19:	c9                   	leaveq 
  1a:	c3                   	retq   

Дизассемблирование раздела .text._ZN11QStringListaSERKS_:

0000000000000000 <_ZN11QStringListaSERKS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN11QStringListaSERKS_+0x23>
  23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN20QXmlStreamAttributesD2Ev:

0000000000000000 <_ZN20QXmlStreamAttributesD1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN20QXmlStreamAttributesD1Ev+0x18>
  18:	90                   	nop
  19:	c9                   	leaveq 
  1a:	c3                   	retq   

Дизассемблирование раздела .text._ZN4SemsD2Ev:

0000000000000000 <_ZN4SemsD1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  11:	48 83 c0 20          	add    $0x20,%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZN4SemsD1Ev+0x1d>
  1d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  21:	48 83 c0 18          	add    $0x18,%rax
  25:	48 89 c7             	mov    %rax,%rdi
  28:	e8 00 00 00 00       	callq  2d <_ZN4SemsD1Ev+0x2d>
    QString script = *str;
  2d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  31:	48 83 c0 10          	add    $0x10,%rax
  35:	48 89 c7             	mov    %rax,%rdi
  38:	e8 00 00 00 00       	callq  3d <_ZN4SemsD1Ev+0x3d>
  3d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41:	48 83 c0 08          	add    $0x8,%rax
    QString StepArgs;
  45:	48 89 c7             	mov    %rax,%rdi
  48:	e8 00 00 00 00       	callq  4d <_ZN4SemsD1Ev+0x4d>
  4d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 c7             	mov    %rax,%rdi
  54:	e8 00 00 00 00       	callq  59 <_ZN4SemsD1Ev+0x59>
  59:	eb 59                	jmp    b4 <_ZN4SemsD1Ev+0xb4>
  5b:	48 89 c3             	mov    %rax,%rbx
  5e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  62:	48 83 c0 18          	add    $0x18,%rax
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZN4SemsD1Ev+0x6e>
  6e:	eb 03                	jmp    73 <_ZN4SemsD1Ev+0x73>
  70:	48 89 c3             	mov    %rax,%rbx
  73:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  77:	48 83 c0 10          	add    $0x10,%rax
  7b:	48 89 c7             	mov    %rax,%rdi
  7e:	e8 00 00 00 00       	callq  83 <_ZN4SemsD1Ev+0x83>
  83:	eb 03                	jmp    88 <_ZN4SemsD1Ev+0x88>
  85:	48 89 c3             	mov    %rax,%rbx
  88:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QR.setMinimal(false);
  8c:	48 83 c0 08          	add    $0x8,%rax
  90:	48 89 c7             	mov    %rax,%rdi
  93:	e8 00 00 00 00       	callq  98 <_ZN4SemsD1Ev+0x98>
  98:	eb 03                	jmp    9d <_ZN4SemsD1Ev+0x9d>
  9a:	48 89 c3             	mov    %rax,%rbx

    while(1==1)
    {
        int i = QR.indexIn(script);
  9d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a1:	48 89 c7             	mov    %rax,%rdi
  a4:	e8 00 00 00 00       	callq  a9 <_ZN4SemsD1Ev+0xa9>
  a9:	48 89 d8             	mov    %rbx,%rax
  ac:	48 89 c7             	mov    %rax,%rdi
  af:	e8 00 00 00 00       	callq  b4 <_ZN4SemsD1Ev+0xb4>
  b4:	48 83 c4 18          	add    $0x18,%rsp
  b8:	5b                   	pop    %rbx
  b9:	5d                   	pop    %rbp
  ba:	c3                   	retq   

Дизассемблирование раздела .text._ZN6moduleD2Ev:

0000000000000000 <_ZN6moduleD1Ev>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  11:	48 83 c0 28          	add    $0x28,%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZN6moduleD1Ev+0x1d>
  1d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  21:	48 83 c0 20          	add    $0x20,%rax
  25:	48 89 c7             	mov    %rax,%rdi
  28:	e8 00 00 00 00       	callq  2d <_ZN6moduleD1Ev+0x2d>
    QString script = *str;
  2d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  31:	48 83 c0 18          	add    $0x18,%rax
  35:	48 89 c7             	mov    %rax,%rdi
  38:	e8 00 00 00 00       	callq  3d <_ZN6moduleD1Ev+0x3d>
  3d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41:	48 83 c0 10          	add    $0x10,%rax
    QString StepArgs;
  45:	48 89 c7             	mov    %rax,%rdi
  48:	e8 00 00 00 00       	callq  4d <_ZN6moduleD1Ev+0x4d>
  4d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 83 c0 08          	add    $0x8,%rax
  55:	48 89 c7             	mov    %rax,%rdi
  58:	e8 00 00 00 00       	callq  5d <_ZN6moduleD1Ev+0x5d>
  5d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  61:	48 89 c7             	mov    %rax,%rdi
  64:	e8 00 00 00 00       	callq  69 <_ZN6moduleD1Ev+0x69>
  69:	eb 6e                	jmp    d9 <_ZN6moduleD1Ev+0xd9>
  6b:	48 89 c3             	mov    %rax,%rbx
  6e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  72:	48 83 c0 20          	add    $0x20,%rax
  76:	48 89 c7             	mov    %rax,%rdi
  79:	e8 00 00 00 00       	callq  7e <_ZN6moduleD1Ev+0x7e>
  7e:	eb 03                	jmp    83 <_ZN6moduleD1Ev+0x83>
  80:	48 89 c3             	mov    %rax,%rbx
  83:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  87:	48 83 c0 18          	add    $0x18,%rax
    QR.setMinimal(false);
  8b:	48 89 c7             	mov    %rax,%rdi
  8e:	e8 00 00 00 00       	callq  93 <_ZN6moduleD1Ev+0x93>
  93:	eb 03                	jmp    98 <_ZN6moduleD1Ev+0x98>
  95:	48 89 c3             	mov    %rax,%rbx
  98:	48 8b 45 e8          	mov    -0x18(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 83 c0 10          	add    $0x10,%rax
  a0:	48 89 c7             	mov    %rax,%rdi
  a3:	e8 00 00 00 00       	callq  a8 <_ZN6moduleD1Ev+0xa8>
  a8:	eb 03                	jmp    ad <_ZN6moduleD1Ev+0xad>
  aa:	48 89 c3             	mov    %rax,%rbx
  ad:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b1:	48 83 c0 08          	add    $0x8,%rax
  b5:	48 89 c7             	mov    %rax,%rdi
  b8:	e8 00 00 00 00       	callq  bd <_ZN6moduleD1Ev+0xbd>
  bd:	eb 03                	jmp    c2 <_ZN6moduleD1Ev+0xc2>
        if(i<0) return -1;
  bf:	48 89 c3             	mov    %rax,%rbx
  c2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  c6:	48 89 c7             	mov    %rax,%rdi
  c9:	e8 00 00 00 00       	callq  ce <_ZN6moduleD1Ev+0xce>
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  ce:	48 89 d8             	mov    %rbx,%rax
  d1:	48 89 c7             	mov    %rax,%rdi
  d4:	e8 00 00 00 00       	callq  d9 <_ZN6moduleD1Ev+0xd9>
  d9:	48 83 c4 18          	add    $0x18,%rsp

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	5b                   	pop    %rbx
  de:	5d                   	pop    %rbp
  df:	c3                   	retq   

Дизассемблирование раздела .text._ZNK19QBasicAtomicIntegerIiE4loadEv:

0000000000000000 <_ZNK19QBasicAtomicIntegerIiE4loadEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	8b 00                	mov    (%rax),%eax
  16:	90                   	nop
  17:	5d                   	pop    %rbp
  18:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QBasicAtomicIntegerIiE3refEv:

0000000000000000 <_ZN19QBasicAtomicIntegerIiE3refEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN19QBasicAtomicIntegerIiE3refEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QBasicAtomicIntegerIiE5derefEv:

0000000000000000 <_ZN19QBasicAtomicIntegerIiE5derefEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN19QBasicAtomicIntegerIiE5derefEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN6QFlagsIN10QArrayData16AllocationOptionEEC2EMNS2_7PrivateEi:

0000000000000000 <_ZN6QFlagsIN10QArrayData16AllocationOptionEEC1EMNS2_7PrivateEi>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  16:	90                   	nop
  17:	5d                   	pop    %rbp
  18:	c3                   	retq   

Дизассемблирование раздела .text._ZN6QFlagsIN10QArrayData16AllocationOptionEEoRES1_:

0000000000000000 <_ZN6QFlagsIN10QArrayData16AllocationOptionEEoRES1_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   f:	8b 10                	mov    (%rax),%edx
  11:	8b 45 f4             	mov    -0xc(%rbp),%eax
  14:	09 c2                	or     %eax,%edx
  16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1a:	89 10                	mov    %edx,(%rax)
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	5d                   	pop    %rbp
  21:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataIcE10sharedNullEv:

0000000000000000 <_ZN15QTypedArrayDataIcE10sharedNullEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	e8 00 00 00 00       	callq  9 <_ZN15QTypedArrayDataIcE10sharedNullEv+0x9>
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataIcE10deallocateEP10QArrayData:

0000000000000000 <_ZN15QTypedArrayDataIcE10deallocateEP10QArrayData>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	ba 08 00 00 00       	mov    $0x8,%edx
  15:	be 01 00 00 00       	mov    $0x1,%esi
  1a:	48 89 c7             	mov    %rax,%rdi
  1d:	e8 00 00 00 00       	callq  22 <_ZN15QTypedArrayDataIcE10deallocateEP10QArrayData+0x22>
  22:	90                   	nop
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataIcE4dataEv:

0000000000000000 <_ZN15QTypedArrayDataIcE4dataEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN15QTypedArrayDataIcE4dataEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataItE4dataEv:

0000000000000000 <_ZN15QTypedArrayDataItE4dataEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN15QTypedArrayDataItE4dataEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataItE10sharedNullEv:

0000000000000000 <_ZN15QTypedArrayDataItE10sharedNullEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	e8 00 00 00 00       	callq  9 <_ZN15QTypedArrayDataItE10sharedNullEv+0x9>
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataItE10deallocateEP10QArrayData:

0000000000000000 <_ZN15QTypedArrayDataItE10deallocateEP10QArrayData>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	ba 08 00 00 00       	mov    $0x8,%edx
  15:	be 02 00 00 00       	mov    $0x2,%esi
  1a:	48 89 c7             	mov    %rax,%rdi
  1d:	e8 00 00 00 00       	callq  22 <_ZN15QTypedArrayDataItE10deallocateEP10QArrayData+0x22>
  22:	90                   	nop
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._Z4qMaxIiERKT_S2_S2_:

0000000000000000 <_Z4qMaxIiERKT_S2_S2_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	8b 10                	mov    (%rax),%edx
  12:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  16:	8b 00                	mov    (%rax),%eax
  18:	39 c2                	cmp    %eax,%edx
  1a:	7d 06                	jge    22 <_Z4qMaxIiERKT_S2_S2_+0x22>
  1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  20:	eb 04                	jmp    26 <_Z4qMaxIiERKT_S2_S2_+0x26>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	5d                   	pop    %rbp
  27:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QListSpecialMethodsI7QStringEC2Ev:

0000000000000000 <_ZN19QListSpecialMethodsI7QStringEC1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	90                   	nop
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringEC2Ev:

0000000000000000 <_ZN5QListI7QStringEC1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN5QListI7QStringEC1Ev+0x18>
  18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1c:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 23 <_ZN5QListI7QStringEC1Ev+0x23>
  23:	48 89 10             	mov    %rdx,(%rax)
  26:	90                   	nop
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringED2Ev:

0000000000000000 <_ZN5QListI7QStringED1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  11:	48 8b 00             	mov    (%rax),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN5QListI7QStringED1Ev+0x1c>
  1c:	83 f0 01             	xor    $0x1,%eax
  1f:	84 c0                	test   %al,%al
  21:	74 16                	je     39 <_ZN5QListI7QStringED1Ev+0x39>
  23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  27:	48 8b 10             	mov    (%rax),%rdx
    QString script = *str;
  2a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2e:	48 89 d6             	mov    %rdx,%rsi
  31:	48 89 c7             	mov    %rax,%rdi
  34:	e8 00 00 00 00       	callq  39 <_ZN5QListI7QStringED1Ev+0x39>
  39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3d:	48 89 c7             	mov    %rax,%rdi
  40:	e8 00 00 00 00       	callq  45 <_ZN5QListI7QStringED1Ev+0x45>
    QString StepArgs;
  45:	eb 1a                	jmp    61 <_ZN5QListI7QStringED1Ev+0x61>
  47:	48 89 c3             	mov    %rax,%rbx
  4a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4e:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	e8 00 00 00 00       	callq  56 <_ZN5QListI7QStringED1Ev+0x56>
  56:	48 89 d8             	mov    %rbx,%rax
  59:	48 89 c7             	mov    %rax,%rdi
  5c:	e8 00 00 00 00       	callq  61 <_ZN5QListI7QStringED1Ev+0x61>
  61:	48 83 c4 18          	add    $0x18,%rsp
  65:	5b                   	pop    %rbx
  66:	5d                   	pop    %rbp
  67:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE6appendERKS0_:

0000000000000000 <_ZN5QListI7QStringE6appendERKS0_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   d:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  24:	48 8b 00             	mov    (%rax),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QListI7QStringE6appendERKS0_+0x2f>
  2f:	84 c0                	test   %al,%al
  31:	74 36                	je     69 <_ZN5QListI7QStringE6appendERKS0_+0x69>
  33:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  37:	ba 01 00 00 00       	mov    $0x1,%edx
  3c:	be ff ff ff 7f       	mov    $0x7fffffff,%esi
  41:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  44:	e8 00 00 00 00       	callq  49 <_ZN5QListI7QStringE6appendERKS0_+0x49>
  49:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  4d:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  55:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  59:	48 89 ce             	mov    %rcx,%rsi
  5c:	48 89 c7             	mov    %rax,%rdi
  5f:	e8 00 00 00 00       	callq  64 <_ZN5QListI7QStringE6appendERKS0_+0x64>
  64:	e9 97 00 00 00       	jmpq   100 <_ZN5QListI7QStringE6appendERKS0_+0x100>
  69:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  6d:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  71:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  75:	48 89 ce             	mov    %rcx,%rsi
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	callq  80 <_ZN5QListI7QStringE6appendERKS0_+0x80>
  80:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  84:	48 89 c7             	mov    %rax,%rdi
  87:	e8 00 00 00 00       	callq  8c <_ZN5QListI7QStringE6appendERKS0_+0x8c>
    QR.setMinimal(false);
  8c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  90:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  94:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  98:	48 89 10             	mov    %rdx,(%rax)

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	eb 63                	jmp    100 <_ZN5QListI7QStringE6appendERKS0_+0x100>
  9d:	48 89 c7             	mov    %rax,%rdi
  a0:	e8 00 00 00 00       	callq  a5 <_ZN5QListI7QStringE6appendERKS0_+0xa5>
  a5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  a9:	48 8b 00             	mov    (%rax),%rax
  ac:	8b 50 0c             	mov    0xc(%rax),%edx
  af:	83 ea 01             	sub    $0x1,%edx
  b2:	89 50 0c             	mov    %edx,0xc(%rax)
  b5:	e8 00 00 00 00       	callq  ba <_ZN5QListI7QStringE6appendERKS0_+0xba>
  ba:	48 89 c3             	mov    %rax,%rbx
  bd:	e8 00 00 00 00       	callq  c2 <_ZN5QListI7QStringE6appendERKS0_+0xc2>
        if(i<0) return -1;
  c2:	48 89 d8             	mov    %rbx,%rax
  c5:	48 89 c7             	mov    %rax,%rdi
  c8:	e8 00 00 00 00       	callq  cd <_ZN5QListI7QStringE6appendERKS0_+0xcd>
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 89 c7             	mov    %rax,%rdi
  d0:	e8 00 00 00 00       	callq  d5 <_ZN5QListI7QStringE6appendERKS0_+0xd5>
  d5:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  d9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	48 89 d6             	mov    %rdx,%rsi
  e0:	48 89 c7             	mov    %rax,%rdi
  e3:	e8 00 00 00 00       	callq  e8 <_ZN5QListI7QStringE6appendERKS0_+0xe8>
  e8:	e8 00 00 00 00       	callq  ed <_ZN5QListI7QStringE6appendERKS0_+0xed>
  ed:	48 89 c3             	mov    %rax,%rbx
  f0:	e8 00 00 00 00       	callq  f5 <_ZN5QListI7QStringE6appendERKS0_+0xf5>
  f5:	48 89 d8             	mov    %rbx,%rax
  f8:	48 89 c7             	mov    %rax,%rdi
  fb:	e8 00 00 00 00       	callq  100 <_ZN5QListI7QStringE6appendERKS0_+0x100>
 100:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 104:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
 10b:	00 00 
 10d:	74 05                	je     114 <_ZN5QListI7QStringE6appendERKS0_+0x114>
 10f:	e8 00 00 00 00       	callq  114 <_ZN5QListI7QStringE6appendERKS0_+0x114>
 114:	48 83 c4 38          	add    $0x38,%rsp
        this->constants.append(QR.cap(1));
 118:	5b                   	pop    %rbx
 119:	5d                   	pop    %rbp
 11a:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringEC2ERKS1_:

0000000000000000 <_ZN5QListI7QStringEC1ERKS1_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 54                	push   %r12
   6:	53                   	push   %rbx
   7:	48 83 ec 10          	sub    $0x10,%rsp
   b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  13:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  17:	48 8b 10             	mov    (%rax),%rdx
  1a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1e:	48 89 10             	mov    %rdx,(%rax)
  21:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  25:	48 8b 00             	mov    (%rax),%rax
  28:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2b:	e8 00 00 00 00       	callq  30 <_ZN5QListI7QStringEC1ERKS1_+0x30>
  30:	83 f0 01             	xor    $0x1,%eax
  33:	84 c0                	test   %al,%al
  35:	0f 84 99 00 00 00    	je     d4 <_ZN5QListI7QStringEC1ERKS1_+0xd4>
  3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3f:	48 8b 00             	mov    (%rax),%rax
    QString StepArgs;
  42:	8b 50 04             	mov    0x4(%rax),%edx
  45:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  49:	89 d6                	mov    %edx,%esi
  4b:	48 89 c7             	mov    %rax,%rdi
  4e:	e8 00 00 00 00       	callq  53 <_ZN5QListI7QStringEC1ERKS1_+0x53>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  57:	48 89 c7             	mov    %rax,%rdi
  5a:	e8 00 00 00 00       	callq  5f <_ZN5QListI7QStringEC1ERKS1_+0x5f>
  5f:	49 89 c4             	mov    %rax,%r12
  62:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZN5QListI7QStringEC1ERKS1_+0x6e>
  6e:	48 89 c3             	mov    %rax,%rbx
  71:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  75:	48 89 c7             	mov    %rax,%rdi
  78:	e8 00 00 00 00       	callq  7d <_ZN5QListI7QStringEC1ERKS1_+0x7d>
  7d:	48 89 c6             	mov    %rax,%rsi
  80:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  84:	4c 89 e1             	mov    %r12,%rcx
  87:	48 89 da             	mov    %rbx,%rdx
    QR.setMinimal(false);
  8a:	48 89 c7             	mov    %rax,%rdi
  8d:	e8 00 00 00 00       	callq  92 <_ZN5QListI7QStringEC1ERKS1_+0x92>
  92:	eb 40                	jmp    d4 <_ZN5QListI7QStringEC1ERKS1_+0xd4>
  94:	48 89 c7             	mov    %rax,%rdi
  97:	e8 00 00 00 00       	callq  9c <_ZN5QListI7QStringEC1ERKS1_+0x9c>

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a0:	48 8b 00             	mov    (%rax),%rax
  a3:	48 89 c7             	mov    %rax,%rdi
  a6:	e8 00 00 00 00       	callq  ab <_ZN5QListI7QStringEC1ERKS1_+0xab>
  ab:	e8 00 00 00 00       	callq  b0 <_ZN5QListI7QStringEC1ERKS1_+0xb0>
  b0:	48 89 c3             	mov    %rax,%rbx
  b3:	e8 00 00 00 00       	callq  b8 <_ZN5QListI7QStringEC1ERKS1_+0xb8>
  b8:	eb 03                	jmp    bd <_ZN5QListI7QStringEC1ERKS1_+0xbd>
  ba:	48 89 c3             	mov    %rax,%rbx
  bd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
        if(i<0) return -1;
  c1:	48 89 c7             	mov    %rax,%rdi
  c4:	e8 00 00 00 00       	callq  c9 <_ZN5QListI7QStringEC1ERKS1_+0xc9>
  c9:	48 89 d8             	mov    %rbx,%rax
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cc:	48 89 c7             	mov    %rax,%rdi
  cf:	e8 00 00 00 00       	callq  d4 <_ZN5QListI7QStringEC1ERKS1_+0xd4>
  d4:	90                   	nop
  d5:	48 83 c4 10          	add    $0x10,%rsp
  d9:	5b                   	pop    %rbx
  da:	41 5c                	pop    %r12
  dc:	5d                   	pop    %rbp

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringEaSERKS1_:

0000000000000000 <_ZN5QListI7QStringEaSERKS1_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  24:	48 8b 10             	mov    (%rax),%rdx
  27:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    QString script = *str;
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	48 39 c2             	cmp    %rax,%rdx
  31:	74 32                	je     65 <_ZN5QListI7QStringEaSERKS1_+0x65>
  33:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  37:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  3b:	48 89 d6             	mov    %rdx,%rsi
  3e:	48 89 c7             	mov    %rax,%rdi
  41:	e8 00 00 00 00       	callq  46 <_ZN5QListI7QStringEaSERKS1_+0x46>
    QString StepArgs;
  46:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  4e:	48 89 d6             	mov    %rdx,%rsi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 c7             	mov    %rax,%rdi
  54:	e8 00 00 00 00       	callq  59 <_ZN5QListI7QStringEaSERKS1_+0x59>
  59:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  5d:	48 89 c7             	mov    %rax,%rdi
  60:	e8 00 00 00 00       	callq  65 <_ZN5QListI7QStringEaSERKS1_+0x65>
  65:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  69:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  6d:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  74:	00 00 
  76:	74 21                	je     99 <_ZN5QListI7QStringEaSERKS1_+0x99>
  78:	eb 1a                	jmp    94 <_ZN5QListI7QStringEaSERKS1_+0x94>
  7a:	48 89 c3             	mov    %rax,%rbx
  7d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  81:	48 89 c7             	mov    %rax,%rdi
  84:	e8 00 00 00 00       	callq  89 <_ZN5QListI7QStringEaSERKS1_+0x89>
  89:	48 89 d8             	mov    %rbx,%rax
    QR.setMinimal(false);
  8c:	48 89 c7             	mov    %rax,%rdi
  8f:	e8 00 00 00 00       	callq  94 <_ZN5QListI7QStringEaSERKS1_+0x94>
  94:	e8 00 00 00 00       	callq  99 <_ZN5QListI7QStringEaSERKS1_+0x99>
  99:	48 83 c4 28          	add    $0x28,%rsp

    while(1==1)
    {
        int i = QR.indexIn(script);
  9d:	5b                   	pop    %rbx
  9e:	5d                   	pop    %rbp
  9f:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringEpLERKS1_:

0000000000000000 <_ZN5QListI7QStringEpLERKS1_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  11:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZN5QListI7QStringEpLERKS1_+0x1d>
  1d:	83 f0 01             	xor    $0x1,%eax
  20:	84 c0                	test   %al,%al
  22:	0f 84 a1 00 00 00    	je     c9 <_ZN5QListI7QStringEpLERKS1_+0xc9>
  28:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString script = *str;
  2c:	48 89 c7             	mov    %rax,%rdi
  2f:	e8 00 00 00 00       	callq  34 <_ZN5QListI7QStringEpLERKS1_+0x34>
  34:	84 c0                	test   %al,%al
  36:	74 15                	je     4d <_ZN5QListI7QStringEpLERKS1_+0x4d>
  38:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  3c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40:	48 89 d6             	mov    %rdx,%rsi
    QString StepArgs;
  43:	48 89 c7             	mov    %rax,%rdi
  46:	e8 00 00 00 00       	callq  4b <_ZN5QListI7QStringEpLERKS1_+0x4b>
  4b:	eb 7c                	jmp    c9 <_ZN5QListI7QStringEpLERKS1_+0xc9>
  4d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 00             	mov    (%rax),%rax
  54:	48 89 c7             	mov    %rax,%rdi
  57:	e8 00 00 00 00       	callq  5c <_ZN5QListI7QStringEpLERKS1_+0x5c>
  5c:	84 c0                	test   %al,%al
  5e:	74 21                	je     81 <_ZN5QListI7QStringEpLERKS1_+0x81>
  60:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  64:	48 89 c7             	mov    %rax,%rdi
  67:	e8 00 00 00 00       	callq  6c <_ZN5QListI7QStringEpLERKS1_+0x6c>
  6c:	89 c2                	mov    %eax,%edx
  6e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  72:	be ff ff ff 7f       	mov    $0x7fffffff,%esi
  77:	48 89 c7             	mov    %rax,%rdi
  7a:	e8 00 00 00 00       	callq  7f <_ZN5QListI7QStringEpLERKS1_+0x7f>
  7f:	eb 13                	jmp    94 <_ZN5QListI7QStringEpLERKS1_+0x94>
  81:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  85:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  89:	48 89 d6             	mov    %rdx,%rsi
    QR.setMinimal(false);
  8c:	48 89 c7             	mov    %rax,%rdi
  8f:	e8 00 00 00 00       	callq  94 <_ZN5QListI7QStringEpLERKS1_+0x94>
  94:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  98:	48 8b 45 d0          	mov    -0x30(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZN5QListI7QStringEpLERKS1_+0xa4>
  a4:	48 89 c3             	mov    %rax,%rbx
  a7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  ab:	48 89 c7             	mov    %rax,%rdi
  ae:	e8 00 00 00 00       	callq  b3 <_ZN5QListI7QStringEpLERKS1_+0xb3>
  b3:	48 89 c2             	mov    %rax,%rdx
  b6:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  ba:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
        if(i<0) return -1;
  be:	48 89 d9             	mov    %rbx,%rcx
  c1:	48 89 c7             	mov    %rax,%rdi
  c4:	e8 00 00 00 00       	callq  c9 <_ZN5QListI7QStringEpLERKS1_+0xc9>
  c9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	eb 55                	jmp    124 <_ZN5QListI7QStringEpLERKS1_+0x124>
  cf:	48 89 c7             	mov    %rax,%rdi
  d2:	e8 00 00 00 00       	callq  d7 <_ZN5QListI7QStringEpLERKS1_+0xd7>
  d7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  db:	48 89 c7             	mov    %rax,%rdi

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  de:	e8 00 00 00 00       	callq  e3 <_ZN5QListI7QStringEpLERKS1_+0xe3>
  e3:	48 89 c2             	mov    %rax,%rdx
  e6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  ea:	48 29 c2             	sub    %rax,%rdx
  ed:	48 89 d0             	mov    %rdx,%rax
  f0:	48 c1 f8 03          	sar    $0x3,%rax
  f4:	89 c1                	mov    %eax,%ecx
  f6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  fa:	48 8b 00             	mov    (%rax),%rax
  fd:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
 101:	48 8b 12             	mov    (%rdx),%rdx
 104:	8b 52 0c             	mov    0xc(%rdx),%edx
 107:	29 ca                	sub    %ecx,%edx
 109:	89 50 0c             	mov    %edx,0xc(%rax)
 10c:	e8 00 00 00 00       	callq  111 <_ZN5QListI7QStringEpLERKS1_+0x111>
 111:	48 89 c3             	mov    %rax,%rbx
 114:	e8 00 00 00 00       	callq  119 <_ZN5QListI7QStringEpLERKS1_+0x119>
        this->constants.append(QR.cap(1));
 119:	48 89 d8             	mov    %rbx,%rax
 11c:	48 89 c7             	mov    %rax,%rdi
 11f:	e8 00 00 00 00       	callq  124 <_ZN5QListI7QStringEpLERKS1_+0x124>
 124:	48 83 c4 28          	add    $0x28,%rsp
 128:	5b                   	pop    %rbx
 129:	5d                   	pop    %rbp
 12a:	c3                   	retq   

Дизассемблирование раздела .text._ZN6QFlagsIN9QIODevice12OpenModeFlagEEC2ES1_:

0000000000000000 <_ZN6QFlagsIN9QIODevice12OpenModeFlagEEC1ES1_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	8b 55 f4             	mov    -0xc(%rbp),%edx
   e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  12:	89 10                	mov    %edx,(%rax)
  14:	90                   	nop
  15:	5d                   	pop    %rbp
  16:	c3                   	retq   

Дизассемблирование раздела .text._ZNK6QFlagsIN9QIODevice12OpenModeFlagEEorES1_:

0000000000000000 <_ZNK6QFlagsIN9QIODevice12OpenModeFlagEEorES1_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   c:	89 75 d4             	mov    %esi,-0x2c(%rbp)
   f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  16:	00 00 
  18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  22:	8b 10                	mov    (%rax),%edx
  24:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  27:	09 c2                	or     %eax,%edx
    QString script = *str;
  29:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  2d:	89 d6                	mov    %edx,%esi
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZNK6QFlagsIN9QIODevice12OpenModeFlagEEorES1_+0x37>
  37:	8b 55 e0             	mov    -0x20(%rbp),%edx
  3a:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  3e:	89 d6                	mov    %edx,%esi
  40:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZNK6QFlagsIN9QIODevice12OpenModeFlagEEorES1_+0x48>
  48:	8b 45 f0             	mov    -0x10(%rbp),%eax
  4b:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  4f:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  56:	00 00 
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  58:	74 05                	je     5f <_ZNK6QFlagsIN9QIODevice12OpenModeFlagEEorES1_+0x5f>
  5a:	e8 00 00 00 00       	callq  5f <_ZNK6QFlagsIN9QIODevice12OpenModeFlagEEorES1_+0x5f>
  5f:	c9                   	leaveq 
  60:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QVectorI19QXmlStreamAttributeED2Ev:

0000000000000000 <_ZN7QVectorI19QXmlStreamAttributeED1Ev>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN7QVectorI19QXmlStreamAttributeED1Ev+0x1b>
  1b:	83 f0 01             	xor    $0x1,%eax
  1e:	84 c0                	test   %al,%al
  20:	74 16                	je     38 <_ZN7QVectorI19QXmlStreamAttributeED1Ev+0x38>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 8b 10             	mov    (%rax),%rdx
    QString script = *str;
  29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2d:	48 89 d6             	mov    %rdx,%rsi
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN7QVectorI19QXmlStreamAttributeED1Ev+0x38>
  38:	90                   	nop
  39:	c9                   	leaveq 
  3a:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E6insertERKS0_S3_:

0000000000000000 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 50          	sub    $0x50,%rsp
   8:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   c:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  10:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0x2f>
  2f:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
  33:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  37:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  3b:	48 89 ce             	mov    %rcx,%rsi
  3e:	48 89 c7             	mov    %rax,%rdi
  41:	e8 00 00 00 00       	callq  46 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0x46>
    QString StepArgs;
  46:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  4a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4e:	48 8b 10             	mov    (%rax),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  55:	48 8b 00             	mov    (%rax),%rax
  58:	48 39 c2             	cmp    %rax,%rdx
  5b:	75 64                	jne    c1 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0xc1>
  5d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  61:	48 8b 00             	mov    (%rax),%rax
  64:	48 89 c7             	mov    %rax,%rdi
  67:	e8 00 00 00 00       	callq  6c <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0x6c>
  6c:	84 c0                	test   %al,%al
  6e:	74 1b                	je     8b <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0x8b>
  70:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
  74:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  78:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  7c:	48 89 ce             	mov    %rcx,%rsi
  7f:	48 89 c7             	mov    %rax,%rdi
  82:	e8 00 00 00 00       	callq  87 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0x87>
  87:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    QR.setMinimal(false);
  8b:	8b 75 dc             	mov    -0x24(%rbp),%esi
  8e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  92:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  96:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  9a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9e:	49 89 f8             	mov    %rdi,%r8
  a1:	48 89 c7             	mov    %rax,%rdi
  a4:	e8 00 00 00 00       	callq  a9 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0xa9>
  a9:	48 89 c2             	mov    %rax,%rdx
  ac:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  b0:	48 89 d6             	mov    %rdx,%rsi
  b3:	48 89 c7             	mov    %rax,%rdi
  b6:	e8 00 00 00 00       	callq  bb <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0xbb>
  bb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
        if(i<0) return -1;
  bf:	eb 34                	jmp    f5 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0xf5>
  c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  c5:	48 8b 00             	mov    (%rax),%rax
  c8:	48 8d 50 18          	lea    0x18(%rax),%rdx
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  d0:	48 89 c6             	mov    %rax,%rsi
  d3:	48 89 d7             	mov    %rdx,%rdi
  d6:	e8 00 00 00 00       	callq  db <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0xdb>
  db:	48 8b 45 f0          	mov    -0x10(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  df:	48 8b 10             	mov    (%rax),%rdx
  e2:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  e6:	48 89 d6             	mov    %rdx,%rsi
  e9:	48 89 c7             	mov    %rax,%rdi
  ec:	e8 00 00 00 00       	callq  f1 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0xf1>
  f1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  f5:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  f9:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
 100:	00 00 
 102:	74 05                	je     109 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0x109>
 104:	e8 00 00 00 00       	callq  109 <_ZN5QHashI7QStringS0_E6insertERKS0_S3_+0x109>
 109:	c9                   	leaveq 
 10a:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QListSpecialMethodsI10QByteArrayEC2Ev:

0000000000000000 <_ZN19QListSpecialMethodsI10QByteArrayEC1Ev>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	90                   	nop
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI10QByteArrayEC2Ev:

0000000000000000 <_ZN5QListI10QByteArrayEC1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN5QListI10QByteArrayEC1Ev+0x18>
  18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1c:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 23 <_ZN5QListI10QByteArrayEC1Ev+0x23>
  23:	48 89 10             	mov    %rdx,(%rax)
  26:	90                   	nop
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI10QByteArrayED2Ev:

0000000000000000 <_ZN5QListI10QByteArrayED1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  11:	48 8b 00             	mov    (%rax),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN5QListI10QByteArrayED1Ev+0x1c>
  1c:	83 f0 01             	xor    $0x1,%eax
  1f:	84 c0                	test   %al,%al
  21:	74 16                	je     39 <_ZN5QListI10QByteArrayED1Ev+0x39>
  23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  27:	48 8b 10             	mov    (%rax),%rdx
    QString script = *str;
  2a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2e:	48 89 d6             	mov    %rdx,%rsi
  31:	48 89 c7             	mov    %rax,%rdi
  34:	e8 00 00 00 00       	callq  39 <_ZN5QListI10QByteArrayED1Ev+0x39>
  39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3d:	48 89 c7             	mov    %rax,%rdi
  40:	e8 00 00 00 00       	callq  45 <_ZN5QListI10QByteArrayED1Ev+0x45>
    QString StepArgs;
  45:	eb 1a                	jmp    61 <_ZN5QListI10QByteArrayED1Ev+0x61>
  47:	48 89 c3             	mov    %rax,%rbx
  4a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4e:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	e8 00 00 00 00       	callq  56 <_ZN5QListI10QByteArrayED1Ev+0x56>
  56:	48 89 d8             	mov    %rbx,%rax
  59:	48 89 c7             	mov    %rax,%rdi
  5c:	e8 00 00 00 00       	callq  61 <_ZN5QListI10QByteArrayED1Ev+0x61>
  61:	48 83 c4 18          	add    $0x18,%rsp
  65:	5b                   	pop    %rbx
  66:	5d                   	pop    %rbp
  67:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE8iteratorC2Ev:

0000000000000000 <_ZN5QListI7QStringE8iteratorC1Ev>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  13:	90                   	nop
  14:	5d                   	pop    %rbp
  15:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE5beginEv:

0000000000000000 <_ZN5QListI7QStringE5beginEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN5QListI7QStringE5beginEv+0x1c>
  1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZN5QListI7QStringE5beginEv+0x28>
  28:	48 89 c2             	mov    %rax,%rdx
    QString script = *str;
  2b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2f:	48 89 d6             	mov    %rdx,%rsi
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZN5QListI7QStringE5beginEv+0x3a>
  3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3e:	c9                   	leaveq 
  3f:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE3endEv:

0000000000000000 <_ZN5QListI7QStringE3endEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN5QListI7QStringE3endEv+0x1c>
  1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZN5QListI7QStringE3endEv+0x28>
  28:	48 89 c2             	mov    %rax,%rdx
    QString script = *str;
  2b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2f:	48 89 d6             	mov    %rdx,%rsi
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZN5QListI7QStringE3endEv+0x3a>
  3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3e:	c9                   	leaveq 
  3f:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE8iteratorneERKS2_:

0000000000000000 <_ZNK5QListI7QStringE8iteratorneERKS2_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 10             	mov    (%rax),%rdx
  13:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  17:	48 8b 00             	mov    (%rax),%rax
  1a:	48 39 c2             	cmp    %rax,%rdx
  1d:	0f 95 c0             	setne  %al
  20:	5d                   	pop    %rbp
  21:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE8iteratorppEv:

0000000000000000 <_ZN5QListI7QStringE8iteratorppEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	48 8d 50 08          	lea    0x8(%rax),%rdx
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	48 89 10             	mov    %rdx,(%rax)
  1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1e:	5d                   	pop    %rbp
  1f:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE8iteratordeEv:

0000000000000000 <_ZNK5QListI7QStringE8iteratordeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZNK5QListI7QStringE8iteratordeEv+0x1b>
  1b:	c9                   	leaveq 
  1c:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringhE4takeERKS0_:

0000000000000000 <_ZN4QMapI7QStringhE4takeERKS0_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN4QMapI7QStringhE4takeERKS0_+0x1c>
  1c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  20:	48 8b 00             	mov    (%rax),%rax
  23:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  27:	48 89 d6             	mov    %rdx,%rsi
    QString script = *str;
  2a:	48 89 c7             	mov    %rax,%rdi
  2d:	e8 00 00 00 00       	callq  32 <_ZN4QMapI7QStringhE4takeERKS0_+0x32>
  32:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  36:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  3b:	74 27                	je     64 <_ZN4QMapI7QStringhE4takeERKS0_+0x64>
  3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41:	0f b6 40 20          	movzbl 0x20(%rax),%eax
    QString StepArgs;
  45:	88 45 f7             	mov    %al,-0x9(%rbp)
  48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4c:	48 8b 00             	mov    (%rax),%rax
  4f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 89 d6             	mov    %rdx,%rsi
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	callq  5e <_ZN4QMapI7QStringhE4takeERKS0_+0x5e>
  5e:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  62:	eb 05                	jmp    69 <_ZN4QMapI7QStringhE4takeERKS0_+0x69>
  64:	b8 00 00 00 00       	mov    $0x0,%eax
  69:	c9                   	leaveq 
  6a:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapIhhE4takeERKh:

0000000000000000 <_ZN4QMapIhhE4takeERKh>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN4QMapIhhE4takeERKh+0x1c>
  1c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  20:	48 8b 00             	mov    (%rax),%rax
  23:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  27:	48 89 d6             	mov    %rdx,%rsi
    QString script = *str;
  2a:	48 89 c7             	mov    %rax,%rdi
  2d:	e8 00 00 00 00       	callq  32 <_ZN4QMapIhhE4takeERKh+0x32>
  32:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  36:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  3b:	74 27                	je     64 <_ZN4QMapIhhE4takeERKh+0x64>
  3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41:	0f b6 40 19          	movzbl 0x19(%rax),%eax
    QString StepArgs;
  45:	88 45 f7             	mov    %al,-0x9(%rbp)
  48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4c:	48 8b 00             	mov    (%rax),%rax
  4f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 89 d6             	mov    %rdx,%rsi
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	callq  5e <_ZN4QMapIhhE4takeERKh+0x5e>
  5e:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  62:	eb 05                	jmp    69 <_ZN4QMapIhhE4takeERKh+0x69>
  64:	b8 00 00 00 00       	mov    $0x0,%eax
  69:	c9                   	leaveq 
  6a:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI10QByteArrayE6appendERKS0_:

0000000000000000 <_ZN5QListI10QByteArrayE6appendERKS0_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   d:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  24:	48 8b 00             	mov    (%rax),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QListI10QByteArrayE6appendERKS0_+0x2f>
  2f:	84 c0                	test   %al,%al
  31:	74 36                	je     69 <_ZN5QListI10QByteArrayE6appendERKS0_+0x69>
  33:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  37:	ba 01 00 00 00       	mov    $0x1,%edx
  3c:	be ff ff ff 7f       	mov    $0x7fffffff,%esi
  41:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  44:	e8 00 00 00 00       	callq  49 <_ZN5QListI10QByteArrayE6appendERKS0_+0x49>
  49:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  4d:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  55:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  59:	48 89 ce             	mov    %rcx,%rsi
  5c:	48 89 c7             	mov    %rax,%rdi
  5f:	e8 00 00 00 00       	callq  64 <_ZN5QListI10QByteArrayE6appendERKS0_+0x64>
  64:	e9 97 00 00 00       	jmpq   100 <_ZN5QListI10QByteArrayE6appendERKS0_+0x100>
  69:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  6d:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  71:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  75:	48 89 ce             	mov    %rcx,%rsi
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	callq  80 <_ZN5QListI10QByteArrayE6appendERKS0_+0x80>
  80:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  84:	48 89 c7             	mov    %rax,%rdi
  87:	e8 00 00 00 00       	callq  8c <_ZN5QListI10QByteArrayE6appendERKS0_+0x8c>
    QR.setMinimal(false);
  8c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  90:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  94:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  98:	48 89 10             	mov    %rdx,(%rax)

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	eb 63                	jmp    100 <_ZN5QListI10QByteArrayE6appendERKS0_+0x100>
  9d:	48 89 c7             	mov    %rax,%rdi
  a0:	e8 00 00 00 00       	callq  a5 <_ZN5QListI10QByteArrayE6appendERKS0_+0xa5>
  a5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  a9:	48 8b 00             	mov    (%rax),%rax
  ac:	8b 50 0c             	mov    0xc(%rax),%edx
  af:	83 ea 01             	sub    $0x1,%edx
  b2:	89 50 0c             	mov    %edx,0xc(%rax)
  b5:	e8 00 00 00 00       	callq  ba <_ZN5QListI10QByteArrayE6appendERKS0_+0xba>
  ba:	48 89 c3             	mov    %rax,%rbx
  bd:	e8 00 00 00 00       	callq  c2 <_ZN5QListI10QByteArrayE6appendERKS0_+0xc2>
        if(i<0) return -1;
  c2:	48 89 d8             	mov    %rbx,%rax
  c5:	48 89 c7             	mov    %rax,%rdi
  c8:	e8 00 00 00 00       	callq  cd <_ZN5QListI10QByteArrayE6appendERKS0_+0xcd>
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 89 c7             	mov    %rax,%rdi
  d0:	e8 00 00 00 00       	callq  d5 <_ZN5QListI10QByteArrayE6appendERKS0_+0xd5>
  d5:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  d9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	48 89 d6             	mov    %rdx,%rsi
  e0:	48 89 c7             	mov    %rax,%rdi
  e3:	e8 00 00 00 00       	callq  e8 <_ZN5QListI10QByteArrayE6appendERKS0_+0xe8>
  e8:	e8 00 00 00 00       	callq  ed <_ZN5QListI10QByteArrayE6appendERKS0_+0xed>
  ed:	48 89 c3             	mov    %rax,%rbx
  f0:	e8 00 00 00 00       	callq  f5 <_ZN5QListI10QByteArrayE6appendERKS0_+0xf5>
  f5:	48 89 d8             	mov    %rbx,%rax
  f8:	48 89 c7             	mov    %rax,%rdi
  fb:	e8 00 00 00 00       	callq  100 <_ZN5QListI10QByteArrayE6appendERKS0_+0x100>
 100:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 104:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
 10b:	00 00 
 10d:	74 05                	je     114 <_ZN5QListI10QByteArrayE6appendERKS0_+0x114>
 10f:	e8 00 00 00 00       	callq  114 <_ZN5QListI10QByteArrayE6appendERKS0_+0x114>
 114:	48 83 c4 38          	add    $0x38,%rsp
        this->constants.append(QR.cap(1));
 118:	5b                   	pop    %rbx
 119:	5d                   	pop    %rbp
 11a:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringS0_E6insertERKS0_S3_:

0000000000000000 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 60          	sub    $0x60,%rsp
   8:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
   c:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  10:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x2f>
  2f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  33:	48 8b 00             	mov    (%rax),%rax
  36:	48 89 c7             	mov    %rax,%rdi
  39:	e8 00 00 00 00       	callq  3e <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x3e>
  3e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    QString StepArgs;
  42:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  46:	48 8b 00             	mov    (%rax),%rax
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  55:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  5c:	00 
  5d:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
  61:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  66:	74 5a                	je     c2 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0xc2>
  68:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  70:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  74:	48 8d 50 18          	lea    0x18(%rax),%rdx
  78:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  7c:	48 89 c6             	mov    %rax,%rsi
  7f:	48 89 d7             	mov    %rdx,%rdi
  82:	e8 00 00 00 00       	callq  87 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x87>
  87:	83 f0 01             	xor    $0x1,%eax
    QR.setMinimal(false);
  8a:	84 c0                	test   %al,%al
  8c:	74 1e                	je     ac <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0xac>
  8e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  92:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  96:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
  9a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9e:	48 89 c7             	mov    %rax,%rdi
  a1:	e8 00 00 00 00       	callq  a6 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0xa6>
  a6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  aa:	eb b5                	jmp    61 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x61>
  ac:	c6 45 cf 00          	movb   $0x0,-0x31(%rbp)
  b0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b4:	48 89 c7             	mov    %rax,%rdi
  b7:	e8 00 00 00 00       	callq  bc <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0xbc>
  bc:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        if(i<0) return -1;
  c0:	eb 9f                	jmp    61 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x61>
  c2:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  c7:	74 25                	je     ee <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0xee>
  c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 8d 50 18          	lea    0x18(%rax),%rdx
  d1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  d5:	48 89 d6             	mov    %rdx,%rsi
  d8:	48 89 c7             	mov    %rax,%rdi
  db:	e8 00 00 00 00       	callq  e0 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0xe0>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  e0:	83 f0 01             	xor    $0x1,%eax
  e3:	84 c0                	test   %al,%al
  e5:	74 07                	je     ee <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0xee>
  e7:	b8 01 00 00 00       	mov    $0x1,%eax
  ec:	eb 05                	jmp    f3 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0xf3>
  ee:	b8 00 00 00 00       	mov    $0x0,%eax
  f3:	84 c0                	test   %al,%al
  f5:	74 30                	je     127 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x127>
  f7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  fb:	48 8d 50 20          	lea    0x20(%rax),%rdx
  ff:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
 103:	48 89 c6             	mov    %rax,%rsi
 106:	48 89 d7             	mov    %rdx,%rdi
 109:	e8 00 00 00 00       	callq  10e <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x10e>
 10e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 112:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 116:	48 89 d6             	mov    %rdx,%rsi
        this->constants.append(QR.cap(1));
 119:	48 89 c7             	mov    %rax,%rdi
 11c:	e8 00 00 00 00       	callq  121 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x121>
 121:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 125:	eb 3d                	jmp    164 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x164>
 127:	0f b6 7d cf          	movzbl -0x31(%rbp),%edi
 12b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 12f:	48 8b 00             	mov    (%rax),%rax
 132:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
 136:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
 13a:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
 13e:	41 89 f8             	mov    %edi,%r8d
 141:	48 89 c7             	mov    %rax,%rdi
 144:	e8 00 00 00 00       	callq  149 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x149>
 149:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
 14d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
 151:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
        this->defines.insert(QR.cap(1),QR.cap(2));
 155:	48 89 d6             	mov    %rdx,%rsi
 158:	48 89 c7             	mov    %rax,%rdi
 15b:	e8 00 00 00 00       	callq  160 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x160>
 160:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 164:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
 168:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
 16f:	00 00 
 171:	74 05                	je     178 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x178>
 173:	e8 00 00 00 00       	callq  178 <_ZN4QMapI7QStringS0_E6insertERKS0_S3_+0x178>
 178:	c9                   	leaveq 
 179:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringhE6insertERKS0_RKh:

0000000000000000 <_ZN4QMapI7QStringhE6insertERKS0_RKh>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 60          	sub    $0x60,%rsp
   8:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
   c:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  10:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x2f>
  2f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  33:	48 8b 00             	mov    (%rax),%rax
  36:	48 89 c7             	mov    %rax,%rdi
  39:	e8 00 00 00 00       	callq  3e <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x3e>
  3e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    QString StepArgs;
  42:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  46:	48 8b 00             	mov    (%rax),%rax
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  55:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  5c:	00 
  5d:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
  61:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  66:	74 5a                	je     c2 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0xc2>
  68:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  70:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  74:	48 8d 50 18          	lea    0x18(%rax),%rdx
  78:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  7c:	48 89 c6             	mov    %rax,%rsi
  7f:	48 89 d7             	mov    %rdx,%rdi
  82:	e8 00 00 00 00       	callq  87 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x87>
  87:	83 f0 01             	xor    $0x1,%eax
    QR.setMinimal(false);
  8a:	84 c0                	test   %al,%al
  8c:	74 1e                	je     ac <_ZN4QMapI7QStringhE6insertERKS0_RKh+0xac>
  8e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  92:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  96:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
  9a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9e:	48 89 c7             	mov    %rax,%rdi
  a1:	e8 00 00 00 00       	callq  a6 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0xa6>
  a6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  aa:	eb b5                	jmp    61 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x61>
  ac:	c6 45 cf 00          	movb   $0x0,-0x31(%rbp)
  b0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b4:	48 89 c7             	mov    %rax,%rdi
  b7:	e8 00 00 00 00       	callq  bc <_ZN4QMapI7QStringhE6insertERKS0_RKh+0xbc>
  bc:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        if(i<0) return -1;
  c0:	eb 9f                	jmp    61 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x61>
  c2:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  c7:	74 25                	je     ee <_ZN4QMapI7QStringhE6insertERKS0_RKh+0xee>
  c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 8d 50 18          	lea    0x18(%rax),%rdx
  d1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  d5:	48 89 d6             	mov    %rdx,%rsi
  d8:	48 89 c7             	mov    %rax,%rdi
  db:	e8 00 00 00 00       	callq  e0 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0xe0>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  e0:	83 f0 01             	xor    $0x1,%eax
  e3:	84 c0                	test   %al,%al
  e5:	74 07                	je     ee <_ZN4QMapI7QStringhE6insertERKS0_RKh+0xee>
  e7:	b8 01 00 00 00       	mov    $0x1,%eax
  ec:	eb 05                	jmp    f3 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0xf3>
  ee:	b8 00 00 00 00       	mov    $0x0,%eax
  f3:	84 c0                	test   %al,%al
  f5:	74 27                	je     11e <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x11e>
  f7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  fb:	0f b6 10             	movzbl (%rax),%edx
  fe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 102:	88 50 20             	mov    %dl,0x20(%rax)
 105:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 109:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 10d:	48 89 d6             	mov    %rdx,%rsi
 110:	48 89 c7             	mov    %rax,%rdi
 113:	e8 00 00 00 00       	callq  118 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x118>
        this->constants.append(QR.cap(1));
 118:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 11c:	eb 3d                	jmp    15b <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x15b>
 11e:	0f b6 7d cf          	movzbl -0x31(%rbp),%edi
 122:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 126:	48 8b 00             	mov    (%rax),%rax
 129:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
 12d:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
 131:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
 135:	41 89 f8             	mov    %edi,%r8d
 138:	48 89 c7             	mov    %rax,%rdi
 13b:	e8 00 00 00 00       	callq  140 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x140>
 140:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
 144:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
 148:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 14c:	48 89 d6             	mov    %rdx,%rsi
 14f:	48 89 c7             	mov    %rax,%rdi
 152:	e8 00 00 00 00       	callq  157 <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x157>
        this->defines.insert(QR.cap(1),QR.cap(2));
 157:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 15b:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
 15f:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
 166:	00 00 
 168:	74 05                	je     16f <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x16f>
 16a:	e8 00 00 00 00       	callq  16f <_ZN4QMapI7QStringhE6insertERKS0_RKh+0x16f>
 16f:	c9                   	leaveq 
 170:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapIhhE6insertERKhS2_:

0000000000000000 <_ZN4QMapIhhE6insertERKhS2_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 60          	sub    $0x60,%rsp
   8:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
   c:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  10:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN4QMapIhhE6insertERKhS2_+0x2f>
  2f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  33:	48 8b 00             	mov    (%rax),%rax
  36:	48 89 c7             	mov    %rax,%rdi
  39:	e8 00 00 00 00       	callq  3e <_ZN4QMapIhhE6insertERKhS2_+0x3e>
  3e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    QString StepArgs;
  42:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  46:	48 8b 00             	mov    (%rax),%rax
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN4QMapIhhE6insertERKhS2_+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  55:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  5c:	00 
  5d:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
  61:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  66:	74 5a                	je     c2 <_ZN4QMapIhhE6insertERKhS2_+0xc2>
  68:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  70:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  74:	48 8d 50 18          	lea    0x18(%rax),%rdx
  78:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  7c:	48 89 c6             	mov    %rax,%rsi
  7f:	48 89 d7             	mov    %rdx,%rdi
  82:	e8 00 00 00 00       	callq  87 <_ZN4QMapIhhE6insertERKhS2_+0x87>
  87:	83 f0 01             	xor    $0x1,%eax
    QR.setMinimal(false);
  8a:	84 c0                	test   %al,%al
  8c:	74 1e                	je     ac <_ZN4QMapIhhE6insertERKhS2_+0xac>
  8e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  92:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  96:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
  9a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9e:	48 89 c7             	mov    %rax,%rdi
  a1:	e8 00 00 00 00       	callq  a6 <_ZN4QMapIhhE6insertERKhS2_+0xa6>
  a6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  aa:	eb b5                	jmp    61 <_ZN4QMapIhhE6insertERKhS2_+0x61>
  ac:	c6 45 cf 00          	movb   $0x0,-0x31(%rbp)
  b0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b4:	48 89 c7             	mov    %rax,%rdi
  b7:	e8 00 00 00 00       	callq  bc <_ZN4QMapIhhE6insertERKhS2_+0xbc>
  bc:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        if(i<0) return -1;
  c0:	eb 9f                	jmp    61 <_ZN4QMapIhhE6insertERKhS2_+0x61>
  c2:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  c7:	74 25                	je     ee <_ZN4QMapIhhE6insertERKhS2_+0xee>
  c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 8d 50 18          	lea    0x18(%rax),%rdx
  d1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  d5:	48 89 d6             	mov    %rdx,%rsi
  d8:	48 89 c7             	mov    %rax,%rdi
  db:	e8 00 00 00 00       	callq  e0 <_ZN4QMapIhhE6insertERKhS2_+0xe0>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  e0:	83 f0 01             	xor    $0x1,%eax
  e3:	84 c0                	test   %al,%al
  e5:	74 07                	je     ee <_ZN4QMapIhhE6insertERKhS2_+0xee>
  e7:	b8 01 00 00 00       	mov    $0x1,%eax
  ec:	eb 05                	jmp    f3 <_ZN4QMapIhhE6insertERKhS2_+0xf3>
  ee:	b8 00 00 00 00       	mov    $0x0,%eax
  f3:	84 c0                	test   %al,%al
  f5:	74 27                	je     11e <_ZN4QMapIhhE6insertERKhS2_+0x11e>
  f7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  fb:	0f b6 10             	movzbl (%rax),%edx
  fe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 102:	88 50 19             	mov    %dl,0x19(%rax)
 105:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 109:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 10d:	48 89 d6             	mov    %rdx,%rsi
 110:	48 89 c7             	mov    %rax,%rdi
 113:	e8 00 00 00 00       	callq  118 <_ZN4QMapIhhE6insertERKhS2_+0x118>
        this->constants.append(QR.cap(1));
 118:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 11c:	eb 3d                	jmp    15b <_ZN4QMapIhhE6insertERKhS2_+0x15b>
 11e:	0f b6 7d cf          	movzbl -0x31(%rbp),%edi
 122:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 126:	48 8b 00             	mov    (%rax),%rax
 129:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
 12d:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
 131:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
 135:	41 89 f8             	mov    %edi,%r8d
 138:	48 89 c7             	mov    %rax,%rdi
 13b:	e8 00 00 00 00       	callq  140 <_ZN4QMapIhhE6insertERKhS2_+0x140>
 140:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
 144:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
 148:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 14c:	48 89 d6             	mov    %rdx,%rsi
 14f:	48 89 c7             	mov    %rax,%rdi
 152:	e8 00 00 00 00       	callq  157 <_ZN4QMapIhhE6insertERKhS2_+0x157>
        this->defines.insert(QR.cap(1),QR.cap(2));
 157:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 15b:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
 15f:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
 166:	00 00 
 168:	74 05                	je     16f <_ZN4QMapIhhE6insertERKhS2_+0x16f>
 16a:	e8 00 00 00 00       	callq  16f <_ZN4QMapIhhE6insertERKhS2_+0x16f>
 16f:	c9                   	leaveq 
 170:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE14const_iteratorC2Ev:

0000000000000000 <_ZN5QListI7QStringE14const_iteratorC1Ev>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  13:	90                   	nop
  14:	5d                   	pop    %rbp
  15:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE10constBeginEv:

0000000000000000 <_ZNK5QListI7QStringE10constBeginEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZNK5QListI7QStringE10constBeginEv+0x1c>
  1c:	48 89 c2             	mov    %rax,%rdx
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 d6             	mov    %rdx,%rsi
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZNK5QListI7QStringE10constBeginEv+0x2e>
  2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  32:	c9                   	leaveq 
  33:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE8constEndEv:

0000000000000000 <_ZNK5QListI7QStringE8constEndEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZNK5QListI7QStringE8constEndEv+0x1c>
  1c:	48 89 c2             	mov    %rax,%rdx
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 d6             	mov    %rdx,%rsi
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZNK5QListI7QStringE8constEndEv+0x2e>
  2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  32:	c9                   	leaveq 
  33:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE14const_iteratorneERKS2_:

0000000000000000 <_ZNK5QListI7QStringE14const_iteratorneERKS2_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 10             	mov    (%rax),%rdx
  13:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  17:	48 8b 00             	mov    (%rax),%rax
  1a:	48 39 c2             	cmp    %rax,%rdx
  1d:	0f 95 c0             	setne  %al
  20:	5d                   	pop    %rbp
  21:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE14const_iteratorppEv:

0000000000000000 <_ZN5QListI7QStringE14const_iteratorppEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	48 8d 50 08          	lea    0x8(%rax),%rdx
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	48 89 10             	mov    %rdx,(%rax)
  1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1e:	5d                   	pop    %rbp
  1f:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE14const_iteratordeEv:

0000000000000000 <_ZNK5QListI7QStringE14const_iteratordeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZNK5QListI7QStringE14const_iteratordeEv+0x1b>
  1b:	c9                   	leaveq 
  1c:	c3                   	retq   

Дизассемблирование раздела .text._ZNK4QMapI7QStringiE8containsERKS0_:

0000000000000000 <_ZNK4QMapI7QStringiE8containsERKS0_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 8b 00             	mov    (%rax),%rax
  17:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  1b:	48 89 d6             	mov    %rdx,%rsi
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZNK4QMapI7QStringiE8containsERKS0_+0x26>
  26:	48 85 c0             	test   %rax,%rax
    QString script = *str;
  29:	0f 95 c0             	setne  %al
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiE6insertERKS0_RKi:

0000000000000000 <_ZN4QMapI7QStringiE6insertERKS0_RKi>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 60          	sub    $0x60,%rsp
   8:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
   c:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  10:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x2f>
  2f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  33:	48 8b 00             	mov    (%rax),%rax
  36:	48 89 c7             	mov    %rax,%rdi
  39:	e8 00 00 00 00       	callq  3e <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x3e>
  3e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    QString StepArgs;
  42:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  46:	48 8b 00             	mov    (%rax),%rax
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  55:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  5c:	00 
  5d:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
  61:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  66:	74 5a                	je     c2 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xc2>
  68:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  70:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  74:	48 8d 50 18          	lea    0x18(%rax),%rdx
  78:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  7c:	48 89 c6             	mov    %rax,%rsi
  7f:	48 89 d7             	mov    %rdx,%rdi
  82:	e8 00 00 00 00       	callq  87 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x87>
  87:	83 f0 01             	xor    $0x1,%eax
    QR.setMinimal(false);
  8a:	84 c0                	test   %al,%al
  8c:	74 1e                	je     ac <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xac>
  8e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  92:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  96:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
  9a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9e:	48 89 c7             	mov    %rax,%rdi
  a1:	e8 00 00 00 00       	callq  a6 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xa6>
  a6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  aa:	eb b5                	jmp    61 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x61>
  ac:	c6 45 cf 00          	movb   $0x0,-0x31(%rbp)
  b0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b4:	48 89 c7             	mov    %rax,%rdi
  b7:	e8 00 00 00 00       	callq  bc <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xbc>
  bc:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        if(i<0) return -1;
  c0:	eb 9f                	jmp    61 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x61>
  c2:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  c7:	74 25                	je     ee <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xee>
  c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 8d 50 18          	lea    0x18(%rax),%rdx
  d1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  d5:	48 89 d6             	mov    %rdx,%rsi
  d8:	48 89 c7             	mov    %rax,%rdi
  db:	e8 00 00 00 00       	callq  e0 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xe0>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  e0:	83 f0 01             	xor    $0x1,%eax
  e3:	84 c0                	test   %al,%al
  e5:	74 07                	je     ee <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xee>
  e7:	b8 01 00 00 00       	mov    $0x1,%eax
  ec:	eb 05                	jmp    f3 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0xf3>
  ee:	b8 00 00 00 00       	mov    $0x0,%eax
  f3:	84 c0                	test   %al,%al
  f5:	74 26                	je     11d <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x11d>
  f7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  fb:	8b 10                	mov    (%rax),%edx
  fd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 101:	89 50 20             	mov    %edx,0x20(%rax)
 104:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 108:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 10c:	48 89 d6             	mov    %rdx,%rsi
 10f:	48 89 c7             	mov    %rax,%rdi
 112:	e8 00 00 00 00       	callq  117 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x117>
        this->constants.append(QR.cap(1));
 117:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 11b:	eb 3d                	jmp    15a <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x15a>
 11d:	0f b6 7d cf          	movzbl -0x31(%rbp),%edi
 121:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 125:	48 8b 00             	mov    (%rax),%rax
 128:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
 12c:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
 130:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
 134:	41 89 f8             	mov    %edi,%r8d
 137:	48 89 c7             	mov    %rax,%rdi
 13a:	e8 00 00 00 00       	callq  13f <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x13f>
 13f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
 143:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
 147:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 14b:	48 89 d6             	mov    %rdx,%rsi
 14e:	48 89 c7             	mov    %rax,%rdi
 151:	e8 00 00 00 00       	callq  156 <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x156>
        this->defines.insert(QR.cap(1),QR.cap(2));
 156:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 15a:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
 15e:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
 165:	00 00 
 167:	74 05                	je     16e <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x16e>
 169:	e8 00 00 00 00       	callq  16e <_ZN4QMapI7QStringiE6insertERKS0_RKi+0x16e>
 16e:	c9                   	leaveq 
 16f:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiE5beginEv:

0000000000000000 <_ZN4QMapI7QStringiE5beginEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	48 89 c7             	mov    %rax,%rdi
  22:	e8 00 00 00 00       	callq  27 <_ZN4QMapI7QStringiE5beginEv+0x27>
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN4QMapI7QStringiE5beginEv+0x36>
  36:	48 89 c2             	mov    %rax,%rdx
  39:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  3d:	48 89 d6             	mov    %rdx,%rsi
  40:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZN4QMapI7QStringiE5beginEv+0x48>
  48:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4c:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  50:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  57:	00 00 
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  59:	74 05                	je     60 <_ZN4QMapI7QStringiE5beginEv+0x60>
  5b:	e8 00 00 00 00       	callq  60 <_ZN4QMapI7QStringiE5beginEv+0x60>
  60:	c9                   	leaveq 
  61:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiE14const_iteratorC2ERKNS1_8iteratorE:

0000000000000000 <_ZN4QMapI7QStringiE14const_iteratorC1ERKNS1_8iteratorE>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10:	48 8b 10             	mov    (%rax),%rdx
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	48 89 10             	mov    %rdx,(%rax)
  1a:	90                   	nop
  1b:	5d                   	pop    %rbp
  1c:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiE3endEv:

0000000000000000 <_ZN4QMapI7QStringiE3endEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	48 89 c7             	mov    %rax,%rdi
  22:	e8 00 00 00 00       	callq  27 <_ZN4QMapI7QStringiE3endEv+0x27>
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN4QMapI7QStringiE3endEv+0x36>
  36:	48 89 c2             	mov    %rax,%rdx
  39:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  3d:	48 89 d6             	mov    %rdx,%rsi
  40:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZN4QMapI7QStringiE3endEv+0x48>
  48:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4c:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  50:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  57:	00 00 
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  59:	74 05                	je     60 <_ZN4QMapI7QStringiE3endEv+0x60>
  5b:	e8 00 00 00 00       	callq  60 <_ZN4QMapI7QStringiE3endEv+0x60>
  60:	c9                   	leaveq 
  61:	c3                   	retq   

Дизассемблирование раздела .text._ZNK4QMapI7QStringiE14const_iteratorneERKS2_:

0000000000000000 <_ZNK4QMapI7QStringiE14const_iteratorneERKS2_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 10             	mov    (%rax),%rdx
  13:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  17:	48 8b 00             	mov    (%rax),%rax
  1a:	48 39 c2             	cmp    %rax,%rdx
  1d:	0f 95 c0             	setne  %al
  20:	5d                   	pop    %rbp
  21:	c3                   	retq   

Дизассемблирование раздела .text._ZNK4QMapI7QStringiE14const_iterator3keyEv:

0000000000000000 <_ZNK4QMapI7QStringiE14const_iterator3keyEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	48 83 c0 18          	add    $0x18,%rax
  13:	5d                   	pop    %rbp
  14:	c3                   	retq   

Дизассемблирование раздела .text._ZNK4QMapI7QStringiE14const_iterator5valueEv:

0000000000000000 <_ZNK4QMapI7QStringiE14const_iterator5valueEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	48 83 c0 20          	add    $0x20,%rax
  13:	5d                   	pop    %rbp
  14:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiEC2Ev:

0000000000000000 <_ZN4QMapI7QStringiEC1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 13 <_ZN4QMapI7QStringiEC1Ev+0x13>
  13:	48 89 10             	mov    %rdx,(%rax)
  16:	90                   	nop
  17:	5d                   	pop    %rbp
  18:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiED2Ev:

0000000000000000 <_ZN4QMapI7QStringiED1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN4QMapI7QStringiED1Ev+0x1b>
  1b:	83 f0 01             	xor    $0x1,%eax
  1e:	84 c0                	test   %al,%al
  20:	74 0f                	je     31 <_ZN4QMapI7QStringiED1Ev+0x31>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 8b 00             	mov    (%rax),%rax
    QString script = *str;
  29:	48 89 c7             	mov    %rax,%rdi
  2c:	e8 00 00 00 00       	callq  31 <_ZN4QMapI7QStringiED1Ev+0x31>
  31:	90                   	nop
  32:	c9                   	leaveq 
  33:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE6lengthEv:

0000000000000000 <_ZNK5QListI7QStringE6lengthEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZNK5QListI7QStringE6lengthEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringEixEi:

0000000000000000 <_ZN5QListI7QStringEixEi>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   f:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  13:	78 11                	js     26 <_ZN5QListI7QStringEixEi+0x26>
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZN5QListI7QStringEixEi+0x21>
  21:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  24:	7f 1f                	jg     45 <_ZN5QListI7QStringEixEi+0x45>
  26:	b9 06 02 00 00       	mov    $0x206,%ecx
    QString script = *str;
  2b:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 32 <_ZN5QListI7QStringEixEi+0x32>
  32:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 39 <_ZN5QListI7QStringEixEi+0x39>
  39:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 40 <_ZN5QListI7QStringEixEi+0x40>
  40:	e8 00 00 00 00       	callq  45 <_ZN5QListI7QStringEixEi+0x45>
    QString StepArgs;
  45:	e8 00 00 00 00       	callq  4a <_ZN5QListI7QStringEixEi+0x4a>
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	e8 00 00 00 00       	callq  56 <_ZN5QListI7QStringEixEi+0x56>
  56:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5a:	8b 55 f4             	mov    -0xc(%rbp),%edx
  5d:	89 d6                	mov    %edx,%esi
  5f:	48 89 c7             	mov    %rax,%rdi
  62:	e8 00 00 00 00       	callq  67 <_ZN5QListI7QStringEixEi+0x67>
  67:	48 89 c7             	mov    %rax,%rdi
  6a:	e8 00 00 00 00       	callq  6f <_ZN5QListI7QStringEixEi+0x6f>
  6f:	c9                   	leaveq 
  70:	c3                   	retq   

Дизассемблирование раздела .text._ZNK4QMapI7QStringiEixERKS0_:

0000000000000000 <_ZNK4QMapI7QStringiEixERKS0_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  26:	48 8d 55 f4          	lea    -0xc(%rbp),%rdx
    QString script = *str;
  2a:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  32:	48 89 ce             	mov    %rcx,%rsi
  35:	48 89 c7             	mov    %rax,%rdi
  38:	e8 00 00 00 00       	callq  3d <_ZNK4QMapI7QStringiEixERKS0_+0x3d>
  3d:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  41:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  48:	00 00 
    QString StepArgs;
  4a:	74 05                	je     51 <_ZNK4QMapI7QStringiEixERKS0_+0x51>
  4c:	e8 00 00 00 00       	callq  51 <_ZNK4QMapI7QStringiEixERKS0_+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	c9                   	leaveq 
  52:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE4sizeEv:

0000000000000000 <_ZNK5QListI7QStringE4sizeEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZNK5QListI7QStringE4sizeEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringiED2Ev:

0000000000000000 <_ZN5QHashI7QStringiED1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 83 c0 10          	add    $0x10,%rax
  17:	48 89 c7             	mov    %rax,%rdi
  1a:	e8 00 00 00 00       	callq  1f <_ZN5QHashI7QStringiED1Ev+0x1f>
  1f:	83 f0 01             	xor    $0x1,%eax
  22:	84 c0                	test   %al,%al
  24:	74 16                	je     3c <_ZN5QHashI7QStringiED1Ev+0x3c>
  26:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString script = *str;
  2a:	48 8b 10             	mov    (%rax),%rdx
  2d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  31:	48 89 d6             	mov    %rdx,%rsi
  34:	48 89 c7             	mov    %rax,%rdi
  37:	e8 00 00 00 00       	callq  3c <_ZN5QHashI7QStringiED1Ev+0x3c>
  3c:	90                   	nop
  3d:	c9                   	leaveq 
  3e:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_:

0000000000000000 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 50          	sub    $0x50,%rsp
   8:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   c:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  10:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0x2f>
  2f:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
  33:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  37:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  3b:	48 89 ce             	mov    %rcx,%rsi
  3e:	48 89 c7             	mov    %rax,%rdi
  41:	e8 00 00 00 00       	callq  46 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0x46>
    QString StepArgs;
  46:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  4a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4e:	48 8b 10             	mov    (%rax),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  55:	48 8b 00             	mov    (%rax),%rax
  58:	48 39 c2             	cmp    %rax,%rdx
  5b:	75 64                	jne    c1 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0xc1>
  5d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  61:	48 8b 00             	mov    (%rax),%rax
  64:	48 89 c7             	mov    %rax,%rdi
  67:	e8 00 00 00 00       	callq  6c <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0x6c>
  6c:	84 c0                	test   %al,%al
  6e:	74 1b                	je     8b <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0x8b>
  70:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
  74:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  78:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  7c:	48 89 ce             	mov    %rcx,%rsi
  7f:	48 89 c7             	mov    %rax,%rdi
  82:	e8 00 00 00 00       	callq  87 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0x87>
  87:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    QR.setMinimal(false);
  8b:	8b 75 dc             	mov    -0x24(%rbp),%esi
  8e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  92:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  96:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  9a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9e:	49 89 f8             	mov    %rdi,%r8
  a1:	48 89 c7             	mov    %rax,%rdi
  a4:	e8 00 00 00 00       	callq  a9 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0xa9>
  a9:	48 89 c2             	mov    %rax,%rdx
  ac:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  b0:	48 89 d6             	mov    %rdx,%rsi
  b3:	48 89 c7             	mov    %rax,%rdi
  b6:	e8 00 00 00 00       	callq  bb <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0xbb>
  bb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
        if(i<0) return -1;
  bf:	eb 34                	jmp    f5 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0xf5>
  c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  c5:	48 8b 00             	mov    (%rax),%rax
  c8:	48 8d 50 18          	lea    0x18(%rax),%rdx
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  d0:	48 89 c6             	mov    %rax,%rsi
  d3:	48 89 d7             	mov    %rdx,%rdi
  d6:	e8 00 00 00 00       	callq  db <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0xdb>
  db:	48 8b 45 f0          	mov    -0x10(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  df:	48 8b 10             	mov    (%rax),%rdx
  e2:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  e6:	48 89 d6             	mov    %rdx,%rsi
  e9:	48 89 c7             	mov    %rax,%rdi
  ec:	e8 00 00 00 00       	callq  f1 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0xf1>
  f1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  f5:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  f9:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
 100:	00 00 
 102:	74 05                	je     109 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0x109>
 104:	e8 00 00 00 00       	callq  109 <_ZN5QHashI7QString11QStringListE6insertERKS0_RKS1_+0x109>
 109:	c9                   	leaveq 
 10a:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE8iteratorC2Ev:

0000000000000000 <_ZN5QHashI7QString11QStringListE8iteratorC1Ev>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  13:	90                   	nop
  14:	5d                   	pop    %rbp
  15:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE5beginEv:

0000000000000000 <_ZN5QHashI7QString11QStringListE5beginEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	48 89 c7             	mov    %rax,%rdi
  22:	e8 00 00 00 00       	callq  27 <_ZN5QHashI7QString11QStringListE5beginEv+0x27>
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN5QHashI7QString11QStringListE5beginEv+0x36>
  36:	48 89 c2             	mov    %rax,%rdx
  39:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  3d:	48 89 d6             	mov    %rdx,%rsi
  40:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZN5QHashI7QString11QStringListE5beginEv+0x48>
  48:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4c:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  50:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  57:	00 00 
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  59:	74 05                	je     60 <_ZN5QHashI7QString11QStringListE5beginEv+0x60>
  5b:	e8 00 00 00 00       	callq  60 <_ZN5QHashI7QString11QStringListE5beginEv+0x60>
  60:	c9                   	leaveq 
  61:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE3endEv:

0000000000000000 <_ZN5QHashI7QString11QStringListE3endEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	48 89 c7             	mov    %rax,%rdi
  22:	e8 00 00 00 00       	callq  27 <_ZN5QHashI7QString11QStringListE3endEv+0x27>
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	48 8b 10             	mov    (%rax),%rdx
  2e:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  32:	48 89 d6             	mov    %rdx,%rsi
  35:	48 89 c7             	mov    %rax,%rdi
  38:	e8 00 00 00 00       	callq  3d <_ZN5QHashI7QString11QStringListE3endEv+0x3d>
  3d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  41:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    QString StepArgs;
  45:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  4c:	00 00 
  4e:	74 05                	je     55 <_ZN5QHashI7QString11QStringListE3endEv+0x55>
  50:	e8 00 00 00 00       	callq  55 <_ZN5QHashI7QString11QStringListE3endEv+0x55>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  55:	c9                   	leaveq 
  56:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QString11QStringListE8iteratorneERKS3_:

0000000000000000 <_ZNK5QHashI7QString11QStringListE8iteratorneERKS3_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 10             	mov    (%rax),%rdx
  13:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  17:	48 8b 00             	mov    (%rax),%rax
  1a:	48 39 c2             	cmp    %rax,%rdx
  1d:	0f 95 c0             	setne  %al
  20:	5d                   	pop    %rbp
  21:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE8iteratorppEv:

0000000000000000 <_ZN5QHashI7QString11QStringListE8iteratorppEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN5QHashI7QString11QStringListE8iteratorppEv+0x1b>
  1b:	48 89 c2             	mov    %rax,%rdx
  1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  22:	48 89 10             	mov    %rdx,(%rax)
  25:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString script = *str;
  29:	c9                   	leaveq 
  2a:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QString11QStringListE8iterator5valueEv:

0000000000000000 <_ZNK5QHashI7QString11QStringListE8iterator5valueEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZNK5QHashI7QString11QStringListE8iterator5valueEv+0x1b>
  1b:	48 83 c0 18          	add    $0x18,%rax
  1f:	c9                   	leaveq 
  20:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QString11QStringListE8iterator3keyEv:

0000000000000000 <_ZNK5QHashI7QString11QStringListE8iterator3keyEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZNK5QHashI7QString11QStringListE8iterator3keyEv+0x1b>
  1b:	48 83 c0 10          	add    $0x10,%rax
  1f:	c9                   	leaveq 
  20:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QStringS0_E5valueERKS0_:

0000000000000000 <_ZNK5QHashI7QStringS0_E5valueERKS0_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  14:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  18:	48 8b 00             	mov    (%rax),%rax
  1b:	8b 40 14             	mov    0x14(%rax),%eax
  1e:	85 c0                	test   %eax,%eax
  20:	74 2c                	je     4e <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x4e>
  22:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  26:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    QString script = *str;
  2a:	ba 00 00 00 00       	mov    $0x0,%edx
  2f:	48 89 ce             	mov    %rcx,%rsi
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x3a>
  3a:	48 8b 00             	mov    (%rax),%rax
  3d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  41:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    QString StepArgs;
  45:	48 8b 00             	mov    (%rax),%rax
  48:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  4c:	75 07                	jne    55 <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x55>
  4e:	b8 01 00 00 00       	mov    $0x1,%eax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	eb 05                	jmp    5a <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x5a>
  55:	b8 00 00 00 00       	mov    $0x0,%eax
  5a:	84 c0                	test   %al,%al
  5c:	74 0e                	je     6c <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x6c>
  5e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  62:	48 89 c7             	mov    %rax,%rdi
  65:	e8 00 00 00 00       	callq  6a <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x6a>
  6a:	eb 17                	jmp    83 <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x83>
  6c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  70:	48 8d 50 18          	lea    0x18(%rax),%rdx
  74:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  78:	48 89 d6             	mov    %rdx,%rsi
  7b:	48 89 c7             	mov    %rax,%rdi
  7e:	e8 00 00 00 00       	callq  83 <_ZNK5QHashI7QStringS0_E5valueERKS0_+0x83>
  83:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  87:	c9                   	leaveq 
  88:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE2atEi:

0000000000000000 <_ZNK5QListI7QStringE2atEi>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   f:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  13:	78 11                	js     26 <_ZNK5QListI7QStringE2atEi+0x26>
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZNK5QListI7QStringE2atEi+0x21>
  21:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  24:	7f 1f                	jg     45 <_ZNK5QListI7QStringE2atEi+0x45>
  26:	b9 fe 01 00 00       	mov    $0x1fe,%ecx
    QString script = *str;
  2b:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 32 <_ZNK5QListI7QStringE2atEi+0x32>
  32:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 39 <_ZNK5QListI7QStringE2atEi+0x39>
  39:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 40 <_ZNK5QListI7QStringE2atEi+0x40>
  40:	e8 00 00 00 00       	callq  45 <_ZNK5QListI7QStringE2atEi+0x45>
    QString StepArgs;
  45:	e8 00 00 00 00       	callq  4a <_ZNK5QListI7QStringE2atEi+0x4a>
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	8b 55 f4             	mov    -0xc(%rbp),%edx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	89 d6                	mov    %edx,%esi
  53:	48 89 c7             	mov    %rax,%rdi
  56:	e8 00 00 00 00       	callq  5b <_ZNK5QListI7QStringE2atEi+0x5b>
  5b:	48 89 c7             	mov    %rax,%rdi
  5e:	e8 00 00 00 00       	callq  63 <_ZNK5QListI7QStringE2atEi+0x63>
  63:	c9                   	leaveq 
  64:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE7indexOfERKS0_i:

0000000000000000 <_ZNK5QListI7QStringE7indexOfERKS0_i>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 48          	sub    $0x48,%rsp
   9:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   d:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  11:	89 55 bc             	mov    %edx,-0x44(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	83 7d bc 00          	cmpl   $0x0,-0x44(%rbp)
  27:	79 35                	jns    5e <_ZNK5QListI7QStringE7indexOfERKS0_i+0x5e>
    QString script = *str;
  29:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%rbp)
  30:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  34:	48 89 c7             	mov    %rax,%rdi
  37:	e8 00 00 00 00       	callq  3c <_ZNK5QListI7QStringE7indexOfERKS0_i+0x3c>
  3c:	89 c2                	mov    %eax,%edx
  3e:	8b 45 bc             	mov    -0x44(%rbp),%eax
  41:	01 d0                	add    %edx,%eax
    QString StepArgs;
  43:	89 45 d0             	mov    %eax,-0x30(%rbp)
  46:	48 8d 55 d4          	lea    -0x2c(%rbp),%rdx
  4a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  4e:	48 89 d6             	mov    %rdx,%rsi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 c7             	mov    %rax,%rdi
  54:	e8 00 00 00 00       	callq  59 <_ZNK5QListI7QStringE7indexOfERKS0_i+0x59>
  59:	8b 00                	mov    (%rax),%eax
  5b:	89 45 bc             	mov    %eax,-0x44(%rbp)
  5e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  62:	48 89 c7             	mov    %rax,%rdi
  65:	e8 00 00 00 00       	callq  6a <_ZNK5QListI7QStringE7indexOfERKS0_i+0x6a>
  6a:	3b 45 bc             	cmp    -0x44(%rbp),%eax
  6d:	0f 9f c0             	setg   %al
  70:	84 c0                	test   %al,%al
  72:	74 7a                	je     ee <_ZNK5QListI7QStringE7indexOfERKS0_i+0xee>
  74:	8b 45 bc             	mov    -0x44(%rbp),%eax
  77:	8d 50 ff             	lea    -0x1(%rax),%edx
  7a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  7e:	89 d6                	mov    %edx,%esi
  80:	48 89 c7             	mov    %rax,%rdi
  83:	e8 00 00 00 00       	callq  88 <_ZNK5QListI7QStringE7indexOfERKS0_i+0x88>
  88:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    QR.setMinimal(false);
  8c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  90:	48 89 c7             	mov    %rax,%rdi
  93:	e8 00 00 00 00       	callq  98 <_ZNK5QListI7QStringE7indexOfERKS0_i+0x98>
  98:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 83 45 d8 08       	addq   $0x8,-0x28(%rbp)
  a1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a5:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  a9:	0f 95 c0             	setne  %al
  ac:	84 c0                	test   %al,%al
  ae:	74 3e                	je     ee <_ZNK5QListI7QStringE7indexOfERKS0_i+0xee>
  b0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b4:	48 89 c7             	mov    %rax,%rdi
  b7:	e8 00 00 00 00       	callq  bc <_ZNK5QListI7QStringE7indexOfERKS0_i+0xbc>
  bc:	48 89 c2             	mov    %rax,%rdx
        if(i<0) return -1;
  bf:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  c3:	48 89 c6             	mov    %rax,%rsi
  c6:	48 89 d7             	mov    %rdx,%rdi
  c9:	e8 00 00 00 00       	callq  ce <_ZNK5QListI7QStringE7indexOfERKS0_i+0xce>
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  ce:	84 c0                	test   %al,%al
  d0:	74 ca                	je     9c <_ZNK5QListI7QStringE7indexOfERKS0_i+0x9c>
  d2:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  d6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  da:	48 89 c7             	mov    %rax,%rdi

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	e8 00 00 00 00       	callq  e2 <_ZNK5QListI7QStringE7indexOfERKS0_i+0xe2>
  e2:	48 29 c3             	sub    %rax,%rbx
  e5:	48 89 d8             	mov    %rbx,%rax
  e8:	48 c1 f8 03          	sar    $0x3,%rax
  ec:	eb 05                	jmp    f3 <_ZNK5QListI7QStringE7indexOfERKS0_i+0xf3>
  ee:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  f3:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  f7:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  fe:	00 00 
 100:	74 05                	je     107 <_ZNK5QListI7QStringE7indexOfERKS0_i+0x107>
 102:	e8 00 00 00 00       	callq  107 <_ZNK5QListI7QStringE7indexOfERKS0_i+0x107>
 107:	48 83 c4 48          	add    $0x48,%rsp
 10b:	5b                   	pop    %rbx
 10c:	5d                   	pop    %rbp
 10d:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QString11QStringListE4sizeEv:

0000000000000000 <_ZNK5QHashI7QString11QStringListE4sizeEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 40 14             	mov    0x14(%rax),%eax
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI6moduleE4sizeEv:

0000000000000000 <_ZNK5QListI6moduleE4sizeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZNK5QListI6moduleE4sizeEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI6moduleEixEi:

0000000000000000 <_ZN5QListI6moduleEixEi>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   f:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  13:	78 11                	js     26 <_ZN5QListI6moduleEixEi+0x26>
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZN5QListI6moduleEixEi+0x21>
  21:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  24:	7f 1f                	jg     45 <_ZN5QListI6moduleEixEi+0x45>
  26:	b9 06 02 00 00       	mov    $0x206,%ecx
    QString script = *str;
  2b:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 32 <_ZN5QListI6moduleEixEi+0x32>
  32:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 39 <_ZN5QListI6moduleEixEi+0x39>
  39:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 40 <_ZN5QListI6moduleEixEi+0x40>
  40:	e8 00 00 00 00       	callq  45 <_ZN5QListI6moduleEixEi+0x45>
    QString StepArgs;
  45:	e8 00 00 00 00       	callq  4a <_ZN5QListI6moduleEixEi+0x4a>
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	e8 00 00 00 00       	callq  56 <_ZN5QListI6moduleEixEi+0x56>
  56:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5a:	8b 55 f4             	mov    -0xc(%rbp),%edx
  5d:	89 d6                	mov    %edx,%esi
  5f:	48 89 c7             	mov    %rax,%rdi
  62:	e8 00 00 00 00       	callq  67 <_ZN5QListI6moduleEixEi+0x67>
  67:	48 89 c7             	mov    %rax,%rdi
  6a:	e8 00 00 00 00       	callq  6f <_ZN5QListI6moduleEixEi+0x6f>
  6f:	c9                   	leaveq 
  70:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E4takeERKS0_:

0000000000000000 <_ZN5QHashI7QStringS0_E4takeERKS0_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 48          	sub    $0x48,%rsp
   9:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   d:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  11:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  28:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2b:	e8 00 00 00 00       	callq  30 <_ZN5QHashI7QStringS0_E4takeERKS0_+0x30>
  30:	84 c0                	test   %al,%al
  32:	74 11                	je     45 <_ZN5QHashI7QStringS0_E4takeERKS0_+0x45>
  34:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  38:	48 89 c7             	mov    %rax,%rdi
  3b:	e8 00 00 00 00       	callq  40 <_ZN5QHashI7QStringS0_E4takeERKS0_+0x40>
  40:	e9 f1 00 00 00       	jmpq   136 <_ZN5QHashI7QStringS0_E4takeERKS0_+0x136>
    QString StepArgs;
  45:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN5QHashI7QStringS0_E4takeERKS0_+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  55:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  59:	ba 00 00 00 00       	mov    $0x0,%edx
  5e:	48 89 ce             	mov    %rcx,%rsi
  61:	48 89 c7             	mov    %rax,%rdi
  64:	e8 00 00 00 00       	callq  69 <_ZN5QHashI7QStringS0_E4takeERKS0_+0x69>
  69:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  6d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  71:	48 8b 10             	mov    (%rax),%rdx
  74:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  78:	48 8b 00             	mov    (%rax),%rax
  7b:	48 39 c2             	cmp    %rax,%rdx
  7e:	0f 84 8a 00 00 00    	je     10e <_ZN5QHashI7QStringS0_E4takeERKS0_+0x10e>
  84:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  88:	48 8b 00             	mov    (%rax),%rax
    QR.setMinimal(false);
  8b:	48 8d 50 18          	lea    0x18(%rax),%rdx
  8f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  93:	48 89 d6             	mov    %rdx,%rsi
  96:	48 89 c7             	mov    %rax,%rdi
  99:	e8 00 00 00 00       	callq  9e <_ZN5QHashI7QStringS0_E4takeERKS0_+0x9e>

    while(1==1)
    {
        int i = QR.indexIn(script);
  9e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a2:	48 8b 00             	mov    (%rax),%rax
  a5:	48 8b 00             	mov    (%rax),%rax
  a8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  ac:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b0:	48 8b 10             	mov    (%rax),%rdx
  b3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  b7:	48 89 d6             	mov    %rdx,%rsi
  ba:	48 89 c7             	mov    %rax,%rdi
  bd:	e8 00 00 00 00       	callq  c2 <_ZN5QHashI7QStringS0_E4takeERKS0_+0xc2>
        if(i<0) return -1;
  c2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  c6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  ca:	48 89 10             	mov    %rdx,(%rax)
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  d1:	48 8b 00             	mov    (%rax),%rax
  d4:	8b 50 14             	mov    0x14(%rax),%edx
  d7:	83 ea 01             	sub    $0x1,%edx
  da:	89 50 14             	mov    %edx,0x14(%rax)

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  e1:	48 8b 00             	mov    (%rax),%rax
  e4:	48 89 c7             	mov    %rax,%rdi
  e7:	e8 00 00 00 00       	callq  ec <_ZN5QHashI7QStringS0_E4takeERKS0_+0xec>
  ec:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  f0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  f4:	48 89 d6             	mov    %rdx,%rsi
  f7:	48 89 c7             	mov    %rax,%rdi
  fa:	e8 00 00 00 00       	callq  ff <_ZN5QHashI7QStringS0_E4takeERKS0_+0xff>
  ff:	90                   	nop
 100:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 104:	48 89 c7             	mov    %rax,%rdi
 107:	e8 00 00 00 00       	callq  10c <_ZN5QHashI7QStringS0_E4takeERKS0_+0x10c>
 10c:	eb 28                	jmp    136 <_ZN5QHashI7QStringS0_E4takeERKS0_+0x136>
 10e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 112:	48 89 c7             	mov    %rax,%rdi
 115:	e8 00 00 00 00       	callq  11a <_ZN5QHashI7QStringS0_E4takeERKS0_+0x11a>
        this->constants.append(QR.cap(1));
 11a:	eb 1a                	jmp    136 <_ZN5QHashI7QStringS0_E4takeERKS0_+0x136>
 11c:	48 89 c3             	mov    %rax,%rbx
 11f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 123:	48 89 c7             	mov    %rax,%rdi
 126:	e8 00 00 00 00       	callq  12b <_ZN5QHashI7QStringS0_E4takeERKS0_+0x12b>
 12b:	48 89 d8             	mov    %rbx,%rax
 12e:	48 89 c7             	mov    %rax,%rdi
 131:	e8 00 00 00 00       	callq  136 <_ZN5QHashI7QStringS0_E4takeERKS0_+0x136>
 136:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 13a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
 13e:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
 145:	00 00 
 147:	74 05                	je     14e <_ZN5QHashI7QStringS0_E4takeERKS0_+0x14e>
 149:	e8 00 00 00 00       	callq  14e <_ZN5QHashI7QStringS0_E4takeERKS0_+0x14e>
 14e:	48 83 c4 48          	add    $0x48,%rsp
 152:	5b                   	pop    %rbx
 153:	5d                   	pop    %rbp
 154:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI8variableED2Ev:

0000000000000000 <_ZN5QListI8variableED1Ev>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  11:	48 8b 00             	mov    (%rax),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN5QListI8variableED1Ev+0x1c>
  1c:	83 f0 01             	xor    $0x1,%eax
  1f:	84 c0                	test   %al,%al
  21:	74 16                	je     39 <_ZN5QListI8variableED1Ev+0x39>
  23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  27:	48 8b 10             	mov    (%rax),%rdx
    QString script = *str;
  2a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2e:	48 89 d6             	mov    %rdx,%rsi
  31:	48 89 c7             	mov    %rax,%rdi
  34:	e8 00 00 00 00       	callq  39 <_ZN5QListI8variableED1Ev+0x39>
  39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3d:	48 89 c7             	mov    %rax,%rdi
  40:	e8 00 00 00 00       	callq  45 <_ZN5QListI8variableED1Ev+0x45>
    QString StepArgs;
  45:	eb 1a                	jmp    61 <_ZN5QListI8variableED1Ev+0x61>
  47:	48 89 c3             	mov    %rax,%rbx
  4a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4e:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	e8 00 00 00 00       	callq  56 <_ZN5QListI8variableED1Ev+0x56>
  56:	48 89 d8             	mov    %rbx,%rax
  59:	48 89 c7             	mov    %rax,%rdi
  5c:	e8 00 00 00 00       	callq  61 <_ZN5QListI8variableED1Ev+0x61>
  61:	48 83 c4 18          	add    $0x18,%rsp
  65:	5b                   	pop    %rbx
  66:	5d                   	pop    %rbp
  67:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI6moduleE6appendERKS0_:

0000000000000000 <_ZN5QListI6moduleE6appendERKS0_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   d:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  24:	48 8b 00             	mov    (%rax),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QListI6moduleE6appendERKS0_+0x2f>
  2f:	84 c0                	test   %al,%al
  31:	74 36                	je     69 <_ZN5QListI6moduleE6appendERKS0_+0x69>
  33:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  37:	ba 01 00 00 00       	mov    $0x1,%edx
  3c:	be ff ff ff 7f       	mov    $0x7fffffff,%esi
  41:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  44:	e8 00 00 00 00       	callq  49 <_ZN5QListI6moduleE6appendERKS0_+0x49>
  49:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  4d:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  55:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  59:	48 89 ce             	mov    %rcx,%rsi
  5c:	48 89 c7             	mov    %rax,%rdi
  5f:	e8 00 00 00 00       	callq  64 <_ZN5QListI6moduleE6appendERKS0_+0x64>
  64:	e9 89 00 00 00       	jmpq   f2 <_ZN5QListI6moduleE6appendERKS0_+0xf2>
  69:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  6d:	48 89 c7             	mov    %rax,%rdi
  70:	e8 00 00 00 00       	callq  75 <_ZN5QListI6moduleE6appendERKS0_+0x75>
  75:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  79:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  7d:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  81:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  85:	48 89 ce             	mov    %rcx,%rsi
  88:	48 89 c7             	mov    %rax,%rdi
    QR.setMinimal(false);
  8b:	e8 00 00 00 00       	callq  90 <_ZN5QListI6moduleE6appendERKS0_+0x90>
  90:	eb 60                	jmp    f2 <_ZN5QListI6moduleE6appendERKS0_+0xf2>
  92:	48 89 c7             	mov    %rax,%rdi
  95:	e8 00 00 00 00       	callq  9a <_ZN5QListI6moduleE6appendERKS0_+0x9a>
  9a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9e:	48 8b 00             	mov    (%rax),%rax
  a1:	8b 50 0c             	mov    0xc(%rax),%edx
  a4:	83 ea 01             	sub    $0x1,%edx
  a7:	89 50 0c             	mov    %edx,0xc(%rax)
  aa:	e8 00 00 00 00       	callq  af <_ZN5QListI6moduleE6appendERKS0_+0xaf>
  af:	48 89 c3             	mov    %rax,%rbx
  b2:	e8 00 00 00 00       	callq  b7 <_ZN5QListI6moduleE6appendERKS0_+0xb7>
  b7:	48 89 d8             	mov    %rbx,%rax
  ba:	48 89 c7             	mov    %rax,%rdi
  bd:	e8 00 00 00 00       	callq  c2 <_ZN5QListI6moduleE6appendERKS0_+0xc2>
        if(i<0) return -1;
  c2:	48 89 c7             	mov    %rax,%rdi
  c5:	e8 00 00 00 00       	callq  ca <_ZN5QListI6moduleE6appendERKS0_+0xca>
  ca:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  ce:	48 8b 00             	mov    (%rax),%rax
  d1:	8b 50 0c             	mov    0xc(%rax),%edx
  d4:	83 ea 01             	sub    $0x1,%edx
  d7:	89 50 0c             	mov    %edx,0xc(%rax)
  da:	e8 00 00 00 00       	callq  df <_ZN5QListI6moduleE6appendERKS0_+0xdf>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  df:	48 89 c3             	mov    %rax,%rbx
  e2:	e8 00 00 00 00       	callq  e7 <_ZN5QListI6moduleE6appendERKS0_+0xe7>
  e7:	48 89 d8             	mov    %rbx,%rax
  ea:	48 89 c7             	mov    %rax,%rdi
  ed:	e8 00 00 00 00       	callq  f2 <_ZN5QListI6moduleE6appendERKS0_+0xf2>
  f2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  f6:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  fd:	00 00 
  ff:	74 05                	je     106 <_ZN5QListI6moduleE6appendERKS0_+0x106>
 101:	e8 00 00 00 00       	callq  106 <_ZN5QListI6moduleE6appendERKS0_+0x106>
 106:	48 83 c4 38          	add    $0x38,%rsp
 10a:	5b                   	pop    %rbx
 10b:	5d                   	pop    %rbp
 10c:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QBasicAtomicOpsILi4EE3refIiEEbRT_:

0000000000000000 <_ZN15QBasicAtomicOpsILi4EE3refIiEEbRT_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  10:	f0 83 00 01          	lock addl $0x1,(%rax)
  14:	0f 95 c2             	setne  %dl
  17:	88 55 ff             	mov    %dl,-0x1(%rbp)
  1a:	80 7d ff 00          	cmpb   $0x0,-0x1(%rbp)
  1e:	0f 95 c0             	setne  %al
  21:	5d                   	pop    %rbp
  22:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QBasicAtomicOpsILi4EE5derefIiEEbRT_:

0000000000000000 <_ZN15QBasicAtomicOpsILi4EE5derefIiEEbRT_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  10:	f0 83 28 01          	lock subl $0x1,(%rax)
  14:	0f 95 c2             	setne  %dl
  17:	88 55 ff             	mov    %dl,-0x1(%rbp)
  1a:	80 7d ff 00          	cmpb   $0x0,-0x1(%rbp)
  1e:	0f 95 c0             	setne  %al
  21:	5d                   	pop    %rbp
  22:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE7deallocEPN9QListData4DataE:

0000000000000000 <_ZN5QListI7QStringE7deallocEPN9QListData4DataE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 8d 50 10          	lea    0x10(%rax),%rdx
  18:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1c:	8b 40 0c             	mov    0xc(%rax),%eax
  1f:	48 98                	cltq   
  21:	48 c1 e0 03          	shl    $0x3,%rax
  25:	48 01 c2             	add    %rax,%rdx
  28:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QString script = *str;
  2c:	48 8d 48 10          	lea    0x10(%rax),%rcx
  30:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  34:	8b 40 08             	mov    0x8(%rax),%eax
  37:	48 98                	cltq   
  39:	48 c1 e0 03          	shl    $0x3,%rax
  3d:	48 01 c1             	add    %rax,%rcx
  40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  44:	48 89 ce             	mov    %rcx,%rsi
  47:	48 89 c7             	mov    %rax,%rdi
  4a:	e8 00 00 00 00       	callq  4f <_ZN5QListI7QStringE7deallocEPN9QListData4DataE+0x4f>
  4f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 89 c7             	mov    %rax,%rdi
  56:	e8 00 00 00 00       	callq  5b <_ZN5QListI7QStringE7deallocEPN9QListData4DataE+0x5b>
  5b:	90                   	nop
  5c:	c9                   	leaveq 
  5d:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE18detach_helper_growEii:

0000000000000000 <_ZN5QListI7QStringE18detach_helper_growEii>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 54                	push   %r12
   6:	53                   	push   %rbx
   7:	48 83 ec 20          	sub    $0x20,%rsp
   b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   f:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  12:	89 55 d0             	mov    %edx,-0x30(%rbp)
  15:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZN5QListI7QStringE18detach_helper_growEii+0x21>
  21:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  25:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString script = *str;
  29:	8b 55 d0             	mov    -0x30(%rbp),%edx
  2c:	48 8d 4d d4          	lea    -0x2c(%rbp),%rcx
  30:	48 89 ce             	mov    %rcx,%rsi
  33:	48 89 c7             	mov    %rax,%rdi
  36:	e8 00 00 00 00       	callq  3b <_ZN5QListI7QStringE18detach_helper_growEii+0x3b>
  3b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  3f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString StepArgs;
  43:	48 89 c7             	mov    %rax,%rdi
  46:	e8 00 00 00 00       	callq  4b <_ZN5QListI7QStringE18detach_helper_growEii+0x4b>
  4b:	48 89 c2             	mov    %rax,%rdx
  4e:	8b 45 d4             	mov    -0x2c(%rbp),%eax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 98                	cltq   
  53:	48 c1 e0 03          	shl    $0x3,%rax
  57:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  5b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  5f:	48 89 c7             	mov    %rax,%rdi
  62:	e8 00 00 00 00       	callq  67 <_ZN5QListI7QStringE18detach_helper_growEii+0x67>
  67:	48 89 c6             	mov    %rax,%rsi
  6a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  6e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  72:	48 89 d1             	mov    %rdx,%rcx
  75:	48 89 da             	mov    %rbx,%rdx
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	callq  80 <_ZN5QListI7QStringE18detach_helper_growEii+0x80>
  80:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  83:	48 98                	cltq   
  85:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8c:	00 
    QR.setMinimal(false);
  8d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  91:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  95:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  99:	48 89 c7             	mov    %rax,%rdi

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	e8 00 00 00 00       	callq  a1 <_ZN5QListI7QStringE18detach_helper_growEii+0xa1>
  a1:	49 89 c4             	mov    %rax,%r12
  a4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a8:	48 89 c7             	mov    %rax,%rdi
  ab:	e8 00 00 00 00       	callq  b0 <_ZN5QListI7QStringE18detach_helper_growEii+0xb0>
  b0:	48 89 c1             	mov    %rax,%rcx
  b3:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  b6:	48 63 d0             	movslq %eax,%rdx
  b9:	8b 45 d0             	mov    -0x30(%rbp),%eax
  bc:	48 98                	cltq   
        if(i<0) return -1;
  be:	48 01 d0             	add    %rdx,%rax
  c1:	48 c1 e0 03          	shl    $0x3,%rax
  c5:	48 8d 34 01          	lea    (%rcx,%rax,1),%rsi
  c9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 89 d9             	mov    %rbx,%rcx
  d0:	4c 89 e2             	mov    %r12,%rdx
  d3:	48 89 c7             	mov    %rax,%rdi
  d6:	e8 00 00 00 00       	callq  db <_ZN5QListI7QStringE18detach_helper_growEii+0xdb>
  db:	48 8b 45 e8          	mov    -0x18(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  df:	48 89 c7             	mov    %rax,%rdi
  e2:	e8 00 00 00 00       	callq  e7 <_ZN5QListI7QStringE18detach_helper_growEii+0xe7>
  e7:	83 f0 01             	xor    $0x1,%eax
  ea:	84 c0                	test   %al,%al
  ec:	74 13                	je     101 <_ZN5QListI7QStringE18detach_helper_growEii+0x101>
  ee:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  f2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  f6:	48 89 d6             	mov    %rdx,%rsi
  f9:	48 89 c7             	mov    %rax,%rdi
  fc:	e8 00 00 00 00       	callq  101 <_ZN5QListI7QStringE18detach_helper_growEii+0x101>
 101:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 105:	48 89 c7             	mov    %rax,%rdi
 108:	e8 00 00 00 00       	callq  10d <_ZN5QListI7QStringE18detach_helper_growEii+0x10d>
 10d:	48 89 c2             	mov    %rax,%rdx
 110:	8b 45 d4             	mov    -0x2c(%rbp),%eax
 113:	48 98                	cltq   
 115:	48 c1 e0 03          	shl    $0x3,%rax
        this->constants.append(QR.cap(1));
 119:	48 01 d0             	add    %rdx,%rax
 11c:	e9 ab 00 00 00       	jmpq   1cc <_ZN5QListI7QStringE18detach_helper_growEii+0x1cc>
 121:	48 89 c7             	mov    %rax,%rdi
 124:	e8 00 00 00 00       	callq  129 <_ZN5QListI7QStringE18detach_helper_growEii+0x129>
 129:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 12d:	48 89 c7             	mov    %rax,%rdi
 130:	e8 00 00 00 00       	callq  135 <_ZN5QListI7QStringE18detach_helper_growEii+0x135>
 135:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 139:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 13d:	48 89 10             	mov    %rdx,(%rax)
 140:	e8 00 00 00 00       	callq  145 <_ZN5QListI7QStringE18detach_helper_growEii+0x145>
 145:	48 89 c3             	mov    %rax,%rbx
 148:	e8 00 00 00 00       	callq  14d <_ZN5QListI7QStringE18detach_helper_growEii+0x14d>
 14d:	48 89 d8             	mov    %rbx,%rax
 150:	48 89 c7             	mov    %rax,%rdi
 153:	e8 00 00 00 00       	callq  158 <_ZN5QListI7QStringE18detach_helper_growEii+0x158>
        this->defines.insert(QR.cap(1),QR.cap(2));
 158:	48 89 c7             	mov    %rax,%rdi
 15b:	e8 00 00 00 00       	callq  160 <_ZN5QListI7QStringE18detach_helper_growEii+0x160>
 160:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 164:	48 89 c7             	mov    %rax,%rdi
 167:	e8 00 00 00 00       	callq  16c <_ZN5QListI7QStringE18detach_helper_growEii+0x16c>
 16c:	48 89 c2             	mov    %rax,%rdx
 16f:	8b 45 d4             	mov    -0x2c(%rbp),%eax
 172:	48 98                	cltq   
 174:	48 c1 e0 03          	shl    $0x3,%rax
 178:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
 17c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 180:	48 89 c7             	mov    %rax,%rdi
 183:	e8 00 00 00 00       	callq  188 <_ZN5QListI7QStringE18detach_helper_growEii+0x188>
 188:	48 89 c1             	mov    %rax,%rcx
 18b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 18f:	48 89 da             	mov    %rbx,%rdx
 192:	48 89 ce             	mov    %rcx,%rsi
 195:	48 89 c7             	mov    %rax,%rdi
 198:	e8 00 00 00 00       	callq  19d <_ZN5QListI7QStringE18detach_helper_growEii+0x19d>
 19d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1a1:	48 89 c7             	mov    %rax,%rdi
 1a4:	e8 00 00 00 00       	callq  1a9 <_ZN5QListI7QStringE18detach_helper_growEii+0x1a9>
 1a9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1ad:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 1b1:	48 89 10             	mov    %rdx,(%rax)
 1b4:	e8 00 00 00 00       	callq  1b9 <_ZN5QListI7QStringE18detach_helper_growEii+0x1b9>
 1b9:	48 89 c3             	mov    %rax,%rbx
        script = script.right(script.length() - StepArgs.length());
 1bc:	e8 00 00 00 00       	callq  1c1 <_ZN5QListI7QStringE18detach_helper_growEii+0x1c1>
 1c1:	48 89 d8             	mov    %rbx,%rax
 1c4:	48 89 c7             	mov    %rax,%rdi
 1c7:	e8 00 00 00 00       	callq  1cc <_ZN5QListI7QStringE18detach_helper_growEii+0x1cc>
 1cc:	48 83 c4 20          	add    $0x20,%rsp
 1d0:	5b                   	pop    %rbx
 1d1:	41 5c                	pop    %r12
 1d3:	5d                   	pop    %rbp
 1d4:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_:

0000000000000000 <_ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 28          	sub    $0x28,%rsp
   d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  11:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  15:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  19:	4c 8b 65 d0          	mov    -0x30(%rbp),%r12
  1d:	4c 89 e6             	mov    %r12,%rsi
  20:	bf 08 00 00 00       	mov    $0x8,%edi
  25:	e8 00 00 00 00       	callq  2a <_ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_+0x2a>
    QString script = *str;
  2a:	48 89 c3             	mov    %rax,%rbx
  2d:	48 85 db             	test   %rbx,%rbx
  30:	74 2a                	je     5c <_ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_+0x5c>
  32:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  36:	48 89 c6             	mov    %rax,%rsi
  39:	48 89 df             	mov    %rbx,%rdi
  3c:	e8 00 00 00 00       	callq  41 <_ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_+0x41>
  41:	eb 19                	jmp    5c <_ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_+0x5c>
    QString StepArgs;
  43:	49 89 c5             	mov    %rax,%r13
  46:	4c 89 e6             	mov    %r12,%rsi
  49:	48 89 df             	mov    %rbx,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	4c 89 e8             	mov    %r13,%rax
  54:	48 89 c7             	mov    %rax,%rdi
  57:	e8 00 00 00 00       	callq  5c <_ZN5QListI7QStringE14node_constructEPNS1_4NodeERKS0_+0x5c>
  5c:	90                   	nop
  5d:	48 83 c4 28          	add    $0x28,%rsp
  61:	5b                   	pop    %rbx
  62:	41 5c                	pop    %r12
  64:	41 5d                	pop    %r13
  66:	5d                   	pop    %rbp
  67:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE13node_destructEPNS1_4NodeE:

0000000000000000 <_ZN5QListI7QStringE13node_destructEPNS1_4NodeE>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN5QListI7QStringE13node_destructEPNS1_4NodeE+0x1c>
  1c:	90                   	nop
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_:

0000000000000000 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 38          	sub    $0x38,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  15:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  19:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  1d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  21:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  25:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString script = *str;
  29:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  2d:	0f 84 8a 00 00 00    	je     bd <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0xbd>
  33:	4c 8b 65 d8          	mov    -0x28(%rbp),%r12
  37:	4c 89 e6             	mov    %r12,%rsi
  3a:	bf 08 00 00 00       	mov    $0x8,%edi
  3f:	e8 00 00 00 00       	callq  44 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0x44>
    QString StepArgs;
  44:	48 89 c3             	mov    %rax,%rbx
  47:	48 85 db             	test   %rbx,%rbx
  4a:	74 0f                	je     5b <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0x5b>
  4c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  50:	48 89 c6             	mov    %rax,%rsi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 89 df             	mov    %rbx,%rdi
  56:	e8 00 00 00 00       	callq  5b <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0x5b>
  5b:	48 83 45 d8 08       	addq   $0x8,-0x28(%rbp)
  60:	48 83 45 b0 08       	addq   $0x8,-0x50(%rbp)
  65:	eb be                	jmp    25 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0x25>
  67:	49 89 c5             	mov    %rax,%r13
  6a:	4c 89 e6             	mov    %r12,%rsi
  6d:	48 89 df             	mov    %rbx,%rdi
  70:	e8 00 00 00 00       	callq  75 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0x75>
  75:	4c 89 e8             	mov    %r13,%rax
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	callq  80 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0x80>
  80:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  84:	48 8d 50 f8          	lea    -0x8(%rax),%rdx
  88:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    QR.setMinimal(false);
  8c:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  90:	0f 95 c0             	setne  %al
  93:	84 c0                	test   %al,%al
  95:	74 0e                	je     a5 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0xa5>
  97:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	48 89 c7             	mov    %rax,%rdi
  9e:	e8 00 00 00 00       	callq  a3 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0xa3>
  a3:	eb db                	jmp    80 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0x80>
  a5:	e8 00 00 00 00       	callq  aa <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0xaa>
  aa:	48 89 c3             	mov    %rax,%rbx
  ad:	e8 00 00 00 00       	callq  b2 <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0xb2>
  b2:	48 89 d8             	mov    %rbx,%rax
  b5:	48 89 c7             	mov    %rax,%rdi
  b8:	e8 00 00 00 00       	callq  bd <_ZN5QListI7QStringE9node_copyEPNS1_4NodeES3_S3_+0xbd>
  bd:	90                   	nop
        if(i<0) return -1;
  be:	48 83 c4 38          	add    $0x38,%rsp
  c2:	5b                   	pop    %rbx
  c3:	41 5c                	pop    %r12
  c5:	41 5d                	pop    %r13
  c7:	5d                   	pop    %rbp
  c8:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE4swapERS1_:

0000000000000000 <_ZN5QListI7QStringE4swapERS1_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN5QListI7QStringE4swapERS1_+0x23>
  23:	90                   	nop
  24:	c9                   	leaveq 
  25:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QListI7QStringE7isEmptyEv:

0000000000000000 <_ZNK5QListI7QStringE7isEmptyEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZNK5QListI7QStringE7isEmptyEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN6QFlagsIN9QIODevice12OpenModeFlagEEC2E5QFlag:

0000000000000000 <_ZN6QFlagsIN9QIODevice12OpenModeFlagEEC1E5QFlag>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f0             	mov    %esi,-0x10(%rbp)
   f:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN6QFlagsIN9QIODevice12OpenModeFlagEEC1E5QFlag+0x1b>
  1b:	89 c2                	mov    %eax,%edx
  1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  21:	89 10                	mov    %edx,(%rax)
  23:	90                   	nop
  24:	c9                   	leaveq 
  25:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QVectorI19QXmlStreamAttributeE8freeDataEP15QTypedArrayDataIS0_E:

0000000000000000 <_ZN7QVectorI19QXmlStreamAttributeE8freeDataEP15QTypedArrayDataIS0_E>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  11:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  15:	be 00 00 00 00       	mov    $0x0,%esi
  1a:	48 89 c7             	mov    %rax,%rdi
  1d:	e8 00 00 00 00       	callq  22 <_ZN7QVectorI19QXmlStreamAttributeE8freeDataEP15QTypedArrayDataIS0_E+0x22>
  22:	48 89 c3             	mov    %rax,%rbx
  25:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    QString script = *str;
  29:	be 00 00 00 00       	mov    $0x0,%esi
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN7QVectorI19QXmlStreamAttributeE8freeDataEP15QTypedArrayDataIS0_E+0x36>
  36:	48 89 c1             	mov    %rax,%rcx
  39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3d:	48 89 da             	mov    %rbx,%rdx
  40:	48 89 ce             	mov    %rcx,%rsi
    QString StepArgs;
  43:	48 89 c7             	mov    %rax,%rdi
  46:	e8 00 00 00 00       	callq  4b <_ZN7QVectorI19QXmlStreamAttributeE8freeDataEP15QTypedArrayDataIS0_E+0x4b>
  4b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4f:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	e8 00 00 00 00       	callq  57 <_ZN7QVectorI19QXmlStreamAttributeE8freeDataEP15QTypedArrayDataIS0_E+0x57>
  57:	90                   	nop
  58:	48 83 c4 18          	add    $0x18,%rsp
  5c:	5b                   	pop    %rbx
  5d:	5d                   	pop    %rbp
  5e:	c3                   	retq   

Дизассемблирование раздела .text._Z15qMapLessThanKeyI7QStringEbRKT_S3_:

0000000000000000 <_Z15qMapLessThanKeyI7QStringEbRKT_S3_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_Z15qMapLessThanKeyI7QStringEbRKT_S3_+0x23>
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E6detachEv:

0000000000000000 <_ZN5QHashI7QStringS0_E6detachEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 83 c0 10          	add    $0x10,%rax
  17:	48 89 c7             	mov    %rax,%rdi
  1a:	e8 00 00 00 00       	callq  1f <_ZN5QHashI7QStringS0_E6detachEv+0x1f>
  1f:	84 c0                	test   %al,%al
  21:	74 0c                	je     2f <_ZN5QHashI7QStringS0_E6detachEv+0x2f>
  23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QHashI7QStringS0_E6detachEv+0x2f>
  2f:	90                   	nop
  30:	c9                   	leaveq 
  31:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj:

0000000000000000 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  14:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	48 8b 00             	mov    (%rax),%rax
  22:	8b 40 20             	mov    0x20(%rax),%eax
  25:	85 c0                	test   %eax,%eax
  27:	75 07                	jne    30 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x30>
    QString script = *str;
  29:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  2e:	74 2b                	je     5b <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x5b>
  30:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  34:	48 8b 00             	mov    (%rax),%rax
  37:	8b 50 24             	mov    0x24(%rax),%edx
  3a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  3e:	89 d6                	mov    %edx,%esi
  40:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x48>
  48:	89 45 f4             	mov    %eax,-0xc(%rbp)
  4b:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  50:	74 09                	je     5b <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x5b>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  56:	8b 55 f4             	mov    -0xc(%rbp),%edx
  59:	89 10                	mov    %edx,(%rax)
  5b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5f:	48 8b 00             	mov    (%rax),%rax
  62:	8b 40 20             	mov    0x20(%rax),%eax
  65:	85 c0                	test   %eax,%eax
  67:	0f 84 be 00 00 00    	je     12b <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x12b>
  6d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  71:	48 8b 00             	mov    (%rax),%rax
  74:	48 8b 48 08          	mov    0x8(%rax),%rcx
  78:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7c:	48 8b 00             	mov    (%rax),%rax
  7f:	8b 40 20             	mov    0x20(%rax),%eax
  82:	89 c6                	mov    %eax,%esi
  84:	8b 45 f4             	mov    -0xc(%rbp),%eax
  87:	ba 00 00 00 00       	mov    $0x0,%edx
    QR.setMinimal(false);
  8c:	f7 f6                	div    %esi
  8e:	89 d0                	mov    %edx,%eax
  90:	89 c0                	mov    %eax,%eax
  92:	48 c1 e0 03          	shl    $0x3,%rax
  96:	48 01 c8             	add    %rcx,%rax
  99:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

    while(1==1)
    {
        int i = QR.indexIn(script);
  9d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  a1:	48 8b 10             	mov    (%rax),%rdx
  a4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a8:	48 8b 00             	mov    (%rax),%rax
  ab:	48 39 c2             	cmp    %rax,%rdx
  ae:	74 27                	je     d7 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0xd7>
  b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  b4:	48 8b 00             	mov    (%rax),%rax
  b7:	48 8b 00             	mov    (%rax),%rax
  ba:	48 85 c0             	test   %rax,%rax
  bd:	75 18                	jne    d7 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0xd7>
        if(i<0) return -1;
  bf:	ba be 03 00 00       	mov    $0x3be,%edx
  c4:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # cb <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0xcb>
  cb:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # d2 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0xd2>
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  d2:	e8 00 00 00 00       	callq  d7 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0xd7>
  d7:	e8 00 00 00 00       	callq  dc <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0xdc>
  dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  e0:	48 8b 10             	mov    (%rax),%rdx
  e3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  e7:	48 8b 00             	mov    (%rax),%rax
  ea:	48 39 c2             	cmp    %rax,%rdx
  ed:	74 26                	je     115 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x115>
  ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  f3:	48 8b 00             	mov    (%rax),%rax
  f6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  fa:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  fd:	89 ce                	mov    %ecx,%esi
  ff:	48 89 c7             	mov    %rax,%rdi
 102:	e8 00 00 00 00       	callq  107 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x107>
 107:	83 f0 01             	xor    $0x1,%eax
 10a:	84 c0                	test   %al,%al
 10c:	74 07                	je     115 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x115>
 10e:	b8 01 00 00 00       	mov    $0x1,%eax
 113:	eb 05                	jmp    11a <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x11a>
 115:	b8 00 00 00 00       	mov    $0x0,%eax
        this->constants.append(QR.cap(1));
 11a:	84 c0                	test   %al,%al
 11c:	74 15                	je     133 <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0x133>
 11e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 122:	48 8b 00             	mov    (%rax),%rax
 125:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 129:	eb b1                	jmp    dc <_ZNK5QHashI7QStringS0_E8findNodeERKS0_Pj+0xdc>
 12b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 12f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 133:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 137:	c9                   	leaveq 
 138:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E:

0000000000000000 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 48          	sub    $0x48,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  14:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  18:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  1c:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
  20:	e8 00 00 00 00       	callq  25 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0x25>
  25:	89 c2                	mov    %eax,%edx
  27:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    QString script = *str;
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	89 d6                	mov    %edx,%esi
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0x38>
  38:	49 89 c4             	mov    %rax,%r12
  3b:	4c 89 e6             	mov    %r12,%rsi
  3e:	bf 20 00 00 00       	mov    $0x20,%edi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0x48>
  48:	48 89 c3             	mov    %rax,%rbx
  4b:	48 85 db             	test   %rbx,%rbx
  4e:	74 25                	je     75 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0x75>
  50:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  54:	48 8b 30             	mov    (%rax),%rsi
  57:	8b 4d c4             	mov    -0x3c(%rbp),%ecx
  5a:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  5e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  62:	49 89 f0             	mov    %rsi,%r8
  65:	48 89 c6             	mov    %rax,%rsi
  68:	48 89 df             	mov    %rbx,%rdi
  6b:	e8 00 00 00 00       	callq  70 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0x70>
  70:	48 89 d8             	mov    %rbx,%rax
  73:	eb 03                	jmp    78 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0x78>
  75:	48 89 d8             	mov    %rbx,%rax
  78:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  7c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  84:	48 89 10             	mov    %rdx,(%rax)
  87:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    QR.setMinimal(false);
  8b:	48 8b 00             	mov    (%rax),%rax
  8e:	8b 50 14             	mov    0x14(%rax),%edx
  91:	83 c2 01             	add    $0x1,%edx
  94:	89 50 14             	mov    %edx,0x14(%rax)
  97:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	eb 19                	jmp    b6 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0xb6>
  9d:	49 89 c5             	mov    %rax,%r13
  a0:	4c 89 e6             	mov    %r12,%rsi
  a3:	48 89 df             	mov    %rbx,%rdi
  a6:	e8 00 00 00 00       	callq  ab <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0xab>
  ab:	4c 89 e8             	mov    %r13,%rax
  ae:	48 89 c7             	mov    %rax,%rdi
  b1:	e8 00 00 00 00       	callq  b6 <_ZN5QHashI7QStringS0_E10createNodeEjRKS0_S3_PP9QHashNodeIS0_S0_E+0xb6>
  b6:	48 83 c4 48          	add    $0x48,%rsp
  ba:	5b                   	pop    %rbx
  bb:	41 5c                	pop    %r12
  bd:	41 5d                	pop    %r13
        if(i<0) return -1;
  bf:	5d                   	pop    %rbp
  c0:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E8iteratorC2EPv:

0000000000000000 <_ZN5QHashI7QStringS0_E8iteratorC1EPv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI10QByteArrayE7deallocEPN9QListData4DataE:

0000000000000000 <_ZN5QListI10QByteArrayE7deallocEPN9QListData4DataE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 8d 50 10          	lea    0x10(%rax),%rdx
  18:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1c:	8b 40 0c             	mov    0xc(%rax),%eax
  1f:	48 98                	cltq   
  21:	48 c1 e0 03          	shl    $0x3,%rax
  25:	48 01 c2             	add    %rax,%rdx
  28:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QString script = *str;
  2c:	48 8d 48 10          	lea    0x10(%rax),%rcx
  30:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  34:	8b 40 08             	mov    0x8(%rax),%eax
  37:	48 98                	cltq   
  39:	48 c1 e0 03          	shl    $0x3,%rax
  3d:	48 01 c1             	add    %rax,%rcx
  40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  44:	48 89 ce             	mov    %rcx,%rsi
  47:	48 89 c7             	mov    %rax,%rdi
  4a:	e8 00 00 00 00       	callq  4f <_ZN5QListI10QByteArrayE7deallocEPN9QListData4DataE+0x4f>
  4f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 89 c7             	mov    %rax,%rdi
  56:	e8 00 00 00 00       	callq  5b <_ZN5QListI10QByteArrayE7deallocEPN9QListData4DataE+0x5b>
  5b:	90                   	nop
  5c:	c9                   	leaveq 
  5d:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE6detachEv:

0000000000000000 <_ZN5QListI7QStringE6detachEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN5QListI7QStringE6detachEv+0x1b>
  1b:	84 c0                	test   %al,%al
  1d:	74 0c                	je     2b <_ZN5QListI7QStringE6detachEv+0x2b>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZN5QListI7QStringE6detachEv+0x2b>
    QString script = *str;
  2b:	90                   	nop
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE8iteratorC2EPNS1_4NodeE:

0000000000000000 <_ZN5QListI7QStringE8iteratorC1EPNS1_4NodeE>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE4Node1tEv:

0000000000000000 <_ZN5QListI7QStringE4Node1tEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	5d                   	pop    %rbp
   d:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringhE6detachEv:

0000000000000000 <_ZN4QMapI7QStringhE6detachEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN4QMapI7QStringhE6detachEv+0x1b>
  1b:	84 c0                	test   %al,%al
  1d:	74 0c                	je     2b <_ZN4QMapI7QStringhE6detachEv+0x2b>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZN4QMapI7QStringhE6detachEv+0x2b>
    QString script = *str;
  2b:	90                   	nop
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapDataI7QStringhE8findNodeERKS0_:

0000000000000000 <_ZNK8QMapDataI7QStringhE8findNodeERKS0_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZNK8QMapDataI7QStringhE8findNodeERKS0_+0x1c>
  1c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  20:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  25:	74 52                	je     79 <_ZNK8QMapDataI7QStringhE8findNodeERKS0_+0x79>
  27:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    QString script = *str;
  2b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  2f:	48 89 d6             	mov    %rdx,%rsi
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZNK8QMapDataI7QStringhE8findNodeERKS0_+0x3a>
  3a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3e:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    QString StepArgs;
  43:	74 25                	je     6a <_ZNK8QMapDataI7QStringhE8findNodeERKS0_+0x6a>
  45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  49:	48 8d 50 18          	lea    0x18(%rax),%rdx
  4d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 d6             	mov    %rdx,%rsi
  54:	48 89 c7             	mov    %rax,%rdi
  57:	e8 00 00 00 00       	callq  5c <_ZNK8QMapDataI7QStringhE8findNodeERKS0_+0x5c>
  5c:	83 f0 01             	xor    $0x1,%eax
  5f:	84 c0                	test   %al,%al
  61:	74 07                	je     6a <_ZNK8QMapDataI7QStringhE8findNodeERKS0_+0x6a>
  63:	b8 01 00 00 00       	mov    $0x1,%eax
  68:	eb 05                	jmp    6f <_ZNK8QMapDataI7QStringhE8findNodeERKS0_+0x6f>
  6a:	b8 00 00 00 00       	mov    $0x0,%eax
  6f:	84 c0                	test   %al,%al
  71:	74 06                	je     79 <_ZNK8QMapDataI7QStringhE8findNodeERKS0_+0x79>
  73:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  77:	eb 05                	jmp    7e <_ZNK8QMapDataI7QStringhE8findNodeERKS0_+0x7e>
  79:	b8 00 00 00 00       	mov    $0x0,%eax
  7e:	c9                   	leaveq 
  7f:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringhE10deleteNodeEP8QMapNodeIS0_hE:

0000000000000000 <_ZN8QMapDataI7QStringhE10deleteNodeEP8QMapNodeIS0_hE>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 83 c0 18          	add    $0x18,%rax
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	callq  20 <_ZN8QMapDataI7QStringhE10deleteNodeEP8QMapNodeIS0_hE+0x20>
  20:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  24:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  28:	48 89 d6             	mov    %rdx,%rsi
    QString script = *str;
  2b:	48 89 c7             	mov    %rax,%rdi
  2e:	e8 00 00 00 00       	callq  33 <_ZN8QMapDataI7QStringhE10deleteNodeEP8QMapNodeIS0_hE+0x33>
  33:	90                   	nop
  34:	c9                   	leaveq 
  35:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapIhhE6detachEv:

0000000000000000 <_ZN4QMapIhhE6detachEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN4QMapIhhE6detachEv+0x1b>
  1b:	84 c0                	test   %al,%al
  1d:	74 0c                	je     2b <_ZN4QMapIhhE6detachEv+0x2b>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZN4QMapIhhE6detachEv+0x2b>
    QString script = *str;
  2b:	90                   	nop
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapDataIhhE8findNodeERKh:

0000000000000000 <_ZNK8QMapDataIhhE8findNodeERKh>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZNK8QMapDataIhhE8findNodeERKh+0x1c>
  1c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  20:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  25:	74 52                	je     79 <_ZNK8QMapDataIhhE8findNodeERKh+0x79>
  27:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    QString script = *str;
  2b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  2f:	48 89 d6             	mov    %rdx,%rsi
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZNK8QMapDataIhhE8findNodeERKh+0x3a>
  3a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3e:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    QString StepArgs;
  43:	74 25                	je     6a <_ZNK8QMapDataIhhE8findNodeERKh+0x6a>
  45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  49:	48 8d 50 18          	lea    0x18(%rax),%rdx
  4d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 d6             	mov    %rdx,%rsi
  54:	48 89 c7             	mov    %rax,%rdi
  57:	e8 00 00 00 00       	callq  5c <_ZNK8QMapDataIhhE8findNodeERKh+0x5c>
  5c:	83 f0 01             	xor    $0x1,%eax
  5f:	84 c0                	test   %al,%al
  61:	74 07                	je     6a <_ZNK8QMapDataIhhE8findNodeERKh+0x6a>
  63:	b8 01 00 00 00       	mov    $0x1,%eax
  68:	eb 05                	jmp    6f <_ZNK8QMapDataIhhE8findNodeERKh+0x6f>
  6a:	b8 00 00 00 00       	mov    $0x0,%eax
  6f:	84 c0                	test   %al,%al
  71:	74 06                	je     79 <_ZNK8QMapDataIhhE8findNodeERKh+0x79>
  73:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  77:	eb 05                	jmp    7e <_ZNK8QMapDataIhhE8findNodeERKh+0x7e>
  79:	b8 00 00 00 00       	mov    $0x0,%eax
  7e:	c9                   	leaveq 
  7f:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataIhhE10deleteNodeEP8QMapNodeIhhE:

0000000000000000 <_ZN8QMapDataIhhE10deleteNodeEP8QMapNodeIhhE>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZN8QMapDataIhhE10deleteNodeEP8QMapNodeIhhE+0x23>
  23:	90                   	nop
  24:	c9                   	leaveq 
  25:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI10QByteArrayE18detach_helper_growEii:

0000000000000000 <_ZN5QListI10QByteArrayE18detach_helper_growEii>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 54                	push   %r12
   6:	53                   	push   %rbx
   7:	48 83 ec 20          	sub    $0x20,%rsp
   b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   f:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  12:	89 55 d0             	mov    %edx,-0x30(%rbp)
  15:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x21>
  21:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  25:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString script = *str;
  29:	8b 55 d0             	mov    -0x30(%rbp),%edx
  2c:	48 8d 4d d4          	lea    -0x2c(%rbp),%rcx
  30:	48 89 ce             	mov    %rcx,%rsi
  33:	48 89 c7             	mov    %rax,%rdi
  36:	e8 00 00 00 00       	callq  3b <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x3b>
  3b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  3f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString StepArgs;
  43:	48 89 c7             	mov    %rax,%rdi
  46:	e8 00 00 00 00       	callq  4b <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x4b>
  4b:	48 89 c2             	mov    %rax,%rdx
  4e:	8b 45 d4             	mov    -0x2c(%rbp),%eax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 98                	cltq   
  53:	48 c1 e0 03          	shl    $0x3,%rax
  57:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  5b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  5f:	48 89 c7             	mov    %rax,%rdi
  62:	e8 00 00 00 00       	callq  67 <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x67>
  67:	48 89 c6             	mov    %rax,%rsi
  6a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  6e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  72:	48 89 d1             	mov    %rdx,%rcx
  75:	48 89 da             	mov    %rbx,%rdx
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	callq  80 <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x80>
  80:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  83:	48 98                	cltq   
  85:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8c:	00 
    QR.setMinimal(false);
  8d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  91:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  95:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  99:	48 89 c7             	mov    %rax,%rdi

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	e8 00 00 00 00       	callq  a1 <_ZN5QListI10QByteArrayE18detach_helper_growEii+0xa1>
  a1:	49 89 c4             	mov    %rax,%r12
  a4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a8:	48 89 c7             	mov    %rax,%rdi
  ab:	e8 00 00 00 00       	callq  b0 <_ZN5QListI10QByteArrayE18detach_helper_growEii+0xb0>
  b0:	48 89 c1             	mov    %rax,%rcx
  b3:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  b6:	48 63 d0             	movslq %eax,%rdx
  b9:	8b 45 d0             	mov    -0x30(%rbp),%eax
  bc:	48 98                	cltq   
        if(i<0) return -1;
  be:	48 01 d0             	add    %rdx,%rax
  c1:	48 c1 e0 03          	shl    $0x3,%rax
  c5:	48 8d 34 01          	lea    (%rcx,%rax,1),%rsi
  c9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 89 d9             	mov    %rbx,%rcx
  d0:	4c 89 e2             	mov    %r12,%rdx
  d3:	48 89 c7             	mov    %rax,%rdi
  d6:	e8 00 00 00 00       	callq  db <_ZN5QListI10QByteArrayE18detach_helper_growEii+0xdb>
  db:	48 8b 45 e8          	mov    -0x18(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  df:	48 89 c7             	mov    %rax,%rdi
  e2:	e8 00 00 00 00       	callq  e7 <_ZN5QListI10QByteArrayE18detach_helper_growEii+0xe7>
  e7:	83 f0 01             	xor    $0x1,%eax
  ea:	84 c0                	test   %al,%al
  ec:	74 13                	je     101 <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x101>
  ee:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  f2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  f6:	48 89 d6             	mov    %rdx,%rsi
  f9:	48 89 c7             	mov    %rax,%rdi
  fc:	e8 00 00 00 00       	callq  101 <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x101>
 101:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 105:	48 89 c7             	mov    %rax,%rdi
 108:	e8 00 00 00 00       	callq  10d <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x10d>
 10d:	48 89 c2             	mov    %rax,%rdx
 110:	8b 45 d4             	mov    -0x2c(%rbp),%eax
 113:	48 98                	cltq   
 115:	48 c1 e0 03          	shl    $0x3,%rax
        this->constants.append(QR.cap(1));
 119:	48 01 d0             	add    %rdx,%rax
 11c:	e9 ab 00 00 00       	jmpq   1cc <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x1cc>
 121:	48 89 c7             	mov    %rax,%rdi
 124:	e8 00 00 00 00       	callq  129 <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x129>
 129:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 12d:	48 89 c7             	mov    %rax,%rdi
 130:	e8 00 00 00 00       	callq  135 <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x135>
 135:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 139:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 13d:	48 89 10             	mov    %rdx,(%rax)
 140:	e8 00 00 00 00       	callq  145 <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x145>
 145:	48 89 c3             	mov    %rax,%rbx
 148:	e8 00 00 00 00       	callq  14d <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x14d>
 14d:	48 89 d8             	mov    %rbx,%rax
 150:	48 89 c7             	mov    %rax,%rdi
 153:	e8 00 00 00 00       	callq  158 <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x158>
        this->defines.insert(QR.cap(1),QR.cap(2));
 158:	48 89 c7             	mov    %rax,%rdi
 15b:	e8 00 00 00 00       	callq  160 <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x160>
 160:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 164:	48 89 c7             	mov    %rax,%rdi
 167:	e8 00 00 00 00       	callq  16c <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x16c>
 16c:	48 89 c2             	mov    %rax,%rdx
 16f:	8b 45 d4             	mov    -0x2c(%rbp),%eax
 172:	48 98                	cltq   
 174:	48 c1 e0 03          	shl    $0x3,%rax
 178:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
 17c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 180:	48 89 c7             	mov    %rax,%rdi
 183:	e8 00 00 00 00       	callq  188 <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x188>
 188:	48 89 c1             	mov    %rax,%rcx
 18b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 18f:	48 89 da             	mov    %rbx,%rdx
 192:	48 89 ce             	mov    %rcx,%rsi
 195:	48 89 c7             	mov    %rax,%rdi
 198:	e8 00 00 00 00       	callq  19d <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x19d>
 19d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1a1:	48 89 c7             	mov    %rax,%rdi
 1a4:	e8 00 00 00 00       	callq  1a9 <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x1a9>
 1a9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1ad:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 1b1:	48 89 10             	mov    %rdx,(%rax)
 1b4:	e8 00 00 00 00       	callq  1b9 <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x1b9>
 1b9:	48 89 c3             	mov    %rax,%rbx
        script = script.right(script.length() - StepArgs.length());
 1bc:	e8 00 00 00 00       	callq  1c1 <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x1c1>
 1c1:	48 89 d8             	mov    %rbx,%rax
 1c4:	48 89 c7             	mov    %rax,%rdi
 1c7:	e8 00 00 00 00       	callq  1cc <_ZN5QListI10QByteArrayE18detach_helper_growEii+0x1cc>
 1cc:	48 83 c4 20          	add    $0x20,%rsp
 1d0:	5b                   	pop    %rbx
 1d1:	41 5c                	pop    %r12
 1d3:	5d                   	pop    %rbp
 1d4:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI10QByteArrayE14node_constructEPNS1_4NodeERKS0_:

0000000000000000 <_ZN5QListI10QByteArrayE14node_constructEPNS1_4NodeERKS0_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 28          	sub    $0x28,%rsp
   d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  11:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  15:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  19:	4c 8b 65 d0          	mov    -0x30(%rbp),%r12
  1d:	4c 89 e6             	mov    %r12,%rsi
  20:	bf 08 00 00 00       	mov    $0x8,%edi
  25:	e8 00 00 00 00       	callq  2a <_ZN5QListI10QByteArrayE14node_constructEPNS1_4NodeERKS0_+0x2a>
    QString script = *str;
  2a:	48 89 c3             	mov    %rax,%rbx
  2d:	48 85 db             	test   %rbx,%rbx
  30:	74 2a                	je     5c <_ZN5QListI10QByteArrayE14node_constructEPNS1_4NodeERKS0_+0x5c>
  32:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  36:	48 89 c6             	mov    %rax,%rsi
  39:	48 89 df             	mov    %rbx,%rdi
  3c:	e8 00 00 00 00       	callq  41 <_ZN5QListI10QByteArrayE14node_constructEPNS1_4NodeERKS0_+0x41>
  41:	eb 19                	jmp    5c <_ZN5QListI10QByteArrayE14node_constructEPNS1_4NodeERKS0_+0x5c>
    QString StepArgs;
  43:	49 89 c5             	mov    %rax,%r13
  46:	4c 89 e6             	mov    %r12,%rsi
  49:	48 89 df             	mov    %rbx,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN5QListI10QByteArrayE14node_constructEPNS1_4NodeERKS0_+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	4c 89 e8             	mov    %r13,%rax
  54:	48 89 c7             	mov    %rax,%rdi
  57:	e8 00 00 00 00       	callq  5c <_ZN5QListI10QByteArrayE14node_constructEPNS1_4NodeERKS0_+0x5c>
  5c:	90                   	nop
  5d:	48 83 c4 28          	add    $0x28,%rsp
  61:	5b                   	pop    %rbx
  62:	41 5c                	pop    %r12
  64:	41 5d                	pop    %r13
  66:	5d                   	pop    %rbp
  67:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI10QByteArrayE13node_destructEPNS1_4NodeE:

0000000000000000 <_ZN5QListI10QByteArrayE13node_destructEPNS1_4NodeE>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN5QListI10QByteArrayE13node_destructEPNS1_4NodeE+0x1c>
  1c:	90                   	nop
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringS0_E6detachEv:

0000000000000000 <_ZN4QMapI7QStringS0_E6detachEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN4QMapI7QStringS0_E6detachEv+0x1b>
  1b:	84 c0                	test   %al,%al
  1d:	74 0c                	je     2b <_ZN4QMapI7QStringS0_E6detachEv+0x2b>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZN4QMapI7QStringS0_E6detachEv+0x2b>
    QString script = *str;
  2b:	90                   	nop
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapDataI7QStringS0_E4rootEv:

0000000000000000 <_ZNK8QMapDataI7QStringS0_E4rootEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 10          	mov    0x10(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringS0_E3endEv:

0000000000000000 <_ZN8QMapDataI7QStringS0_E3endEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 83 c0 08          	add    $0x8,%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringS0_E8leftNodeEv:

0000000000000000 <_ZNK8QMapNodeI7QStringS0_E8leftNodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 08          	mov    0x8(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringS0_E9rightNodeEv:

0000000000000000 <_ZNK8QMapNodeI7QStringS0_E9rightNodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 10          	mov    0x10(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringS0_E8iteratorC2EP8QMapNodeIS0_S0_E:

0000000000000000 <_ZN4QMapI7QStringS0_E8iteratorC1EP8QMapNodeIS0_S0_E>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb:

0000000000000000 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 48          	sub    $0x48,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  15:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  19:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  1d:	44 89 c0             	mov    %r8d,%eax
  20:	88 45 ac             	mov    %al,-0x54(%rbp)
  23:	0f b6 4d ac          	movzbl -0x54(%rbp),%ecx
  27:	be 28 00 00 00       	mov    $0x28,%esi
    QString script = *str;
  2c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  30:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  34:	41 89 c8             	mov    %ecx,%r8d
  37:	48 89 d1             	mov    %rdx,%rcx
  3a:	ba 08 00 00 00       	mov    $0x8,%edx
  3f:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x47>
  47:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  4b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4f:	4c 8d 60 18          	lea    0x18(%rax),%r12
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	4c 89 e6             	mov    %r12,%rsi
  56:	bf 08 00 00 00       	mov    $0x8,%edi
  5b:	e8 00 00 00 00       	callq  60 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x60>
  60:	48 89 c3             	mov    %rax,%rbx
  63:	48 85 db             	test   %rbx,%rbx
  66:	74 0f                	je     77 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x77>
  68:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  6c:	48 89 c6             	mov    %rax,%rsi
  6f:	48 89 df             	mov    %rbx,%rdi
  72:	e8 00 00 00 00       	callq  77 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x77>
  77:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  7b:	4c 8d 60 20          	lea    0x20(%rax),%r12
  7f:	4c 89 e6             	mov    %r12,%rsi
  82:	bf 08 00 00 00       	mov    $0x8,%edi
  87:	e8 00 00 00 00       	callq  8c <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x8c>
    QR.setMinimal(false);
  8c:	48 89 c3             	mov    %rax,%rbx
  8f:	48 85 db             	test   %rbx,%rbx
  92:	74 0f                	je     a3 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xa3>
  94:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  98:	48 89 c6             	mov    %rax,%rsi

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	48 89 df             	mov    %rbx,%rdi
  9e:	e8 00 00 00 00       	callq  a3 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xa3>
  a3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a7:	eb 7f                	jmp    128 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x128>
  a9:	49 89 c5             	mov    %rax,%r13
  ac:	4c 89 e6             	mov    %r12,%rsi
  af:	48 89 df             	mov    %rbx,%rdi
  b2:	e8 00 00 00 00       	callq  b7 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xb7>
  b7:	4c 89 e8             	mov    %r13,%rax
  ba:	eb 39                	jmp    f5 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xf5>
  bc:	49 89 c5             	mov    %rax,%r13
        if(i<0) return -1;
  bf:	4c 89 e6             	mov    %r12,%rsi
  c2:	48 89 df             	mov    %rbx,%rdi
  c5:	e8 00 00 00 00       	callq  ca <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xca>
  ca:	4c 89 e8             	mov    %r13,%rax
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 89 c7             	mov    %rax,%rdi
  d0:	e8 00 00 00 00       	callq  d5 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xd5>
  d5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  d9:	48 83 c0 18          	add    $0x18,%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	48 89 c7             	mov    %rax,%rdi
  e0:	e8 00 00 00 00       	callq  e5 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xe5>
  e5:	e8 00 00 00 00       	callq  ea <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xea>
  ea:	48 89 c3             	mov    %rax,%rbx
  ed:	e8 00 00 00 00       	callq  f2 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xf2>
  f2:	48 89 d8             	mov    %rbx,%rax
  f5:	48 89 c7             	mov    %rax,%rdi
  f8:	e8 00 00 00 00       	callq  fd <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0xfd>
  fd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 101:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
 105:	48 89 d6             	mov    %rdx,%rsi
 108:	48 89 c7             	mov    %rax,%rdi
 10b:	e8 00 00 00 00       	callq  110 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x110>
 110:	e8 00 00 00 00       	callq  115 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x115>
 115:	48 89 c3             	mov    %rax,%rbx
        this->constants.append(QR.cap(1));
 118:	e8 00 00 00 00       	callq  11d <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x11d>
 11d:	48 89 d8             	mov    %rbx,%rax
 120:	48 89 c7             	mov    %rax,%rdi
 123:	e8 00 00 00 00       	callq  128 <_ZN8QMapDataI7QStringS0_E10createNodeERKS0_S3_P8QMapNodeIS0_S0_Eb+0x128>
 128:	48 83 c4 48          	add    $0x48,%rsp
 12c:	5b                   	pop    %rbx
 12d:	41 5c                	pop    %r12
 12f:	41 5d                	pop    %r13
 131:	5d                   	pop    %rbp
 132:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapDataI7QStringhE4rootEv:

0000000000000000 <_ZNK8QMapDataI7QStringhE4rootEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 10          	mov    0x10(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringhE3endEv:

0000000000000000 <_ZN8QMapDataI7QStringhE3endEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 83 c0 08          	add    $0x8,%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringhE8leftNodeEv:

0000000000000000 <_ZNK8QMapNodeI7QStringhE8leftNodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 08          	mov    0x8(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringhE9rightNodeEv:

0000000000000000 <_ZNK8QMapNodeI7QStringhE9rightNodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 10          	mov    0x10(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringhE8iteratorC2EP8QMapNodeIS0_hE:

0000000000000000 <_ZN4QMapI7QStringhE8iteratorC1EP8QMapNodeIS0_hE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb:

0000000000000000 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 48          	sub    $0x48,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  15:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  19:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  1d:	44 89 c0             	mov    %r8d,%eax
  20:	88 45 ac             	mov    %al,-0x54(%rbp)
  23:	0f b6 4d ac          	movzbl -0x54(%rbp),%ecx
  27:	be 28 00 00 00       	mov    $0x28,%esi
    QString script = *str;
  2c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  30:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  34:	41 89 c8             	mov    %ecx,%r8d
  37:	48 89 d1             	mov    %rdx,%rcx
  3a:	ba 08 00 00 00       	mov    $0x8,%edx
  3f:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0x47>
  47:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  4b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4f:	4c 8d 60 18          	lea    0x18(%rax),%r12
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	4c 89 e6             	mov    %r12,%rsi
  56:	bf 08 00 00 00       	mov    $0x8,%edi
  5b:	e8 00 00 00 00       	callq  60 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0x60>
  60:	48 89 c3             	mov    %rax,%rbx
  63:	48 85 db             	test   %rbx,%rbx
  66:	74 0f                	je     77 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0x77>
  68:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  6c:	48 89 c6             	mov    %rax,%rsi
  6f:	48 89 df             	mov    %rbx,%rdi
  72:	e8 00 00 00 00       	callq  77 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0x77>
  77:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  7b:	48 83 c0 20          	add    $0x20,%rax
  7f:	48 89 c6             	mov    %rax,%rsi
  82:	bf 01 00 00 00       	mov    $0x1,%edi
  87:	e8 00 00 00 00       	callq  8c <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0x8c>
    QR.setMinimal(false);
  8c:	48 85 c0             	test   %rax,%rax
  8f:	74 09                	je     9a <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0x9a>
  91:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  95:	0f b6 12             	movzbl (%rdx),%edx
  98:	88 10                	mov    %dl,(%rax)
  9a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9e:	eb 44                	jmp    e4 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0xe4>
  a0:	49 89 c5             	mov    %rax,%r13
  a3:	4c 89 e6             	mov    %r12,%rsi
  a6:	48 89 df             	mov    %rbx,%rdi
  a9:	e8 00 00 00 00       	callq  ae <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0xae>
  ae:	4c 89 e8             	mov    %r13,%rax
  b1:	48 89 c7             	mov    %rax,%rdi
  b4:	e8 00 00 00 00       	callq  b9 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0xb9>
  b9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  bd:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
        if(i<0) return -1;
  c1:	48 89 d6             	mov    %rdx,%rsi
  c4:	48 89 c7             	mov    %rax,%rdi
  c7:	e8 00 00 00 00       	callq  cc <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0xcc>
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cc:	e8 00 00 00 00       	callq  d1 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0xd1>
  d1:	48 89 c3             	mov    %rax,%rbx
  d4:	e8 00 00 00 00       	callq  d9 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0xd9>
  d9:	48 89 d8             	mov    %rbx,%rax
  dc:	48 89 c7             	mov    %rax,%rdi

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  df:	e8 00 00 00 00       	callq  e4 <_ZN8QMapDataI7QStringhE10createNodeERKS0_RKhP8QMapNodeIS0_hEb+0xe4>
  e4:	48 83 c4 48          	add    $0x48,%rsp
  e8:	5b                   	pop    %rbx
  e9:	41 5c                	pop    %r12
  eb:	41 5d                	pop    %r13
  ed:	5d                   	pop    %rbp
  ee:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapDataIhhE4rootEv:

0000000000000000 <_ZNK8QMapDataIhhE4rootEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 10          	mov    0x10(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataIhhE3endEv:

0000000000000000 <_ZN8QMapDataIhhE3endEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 83 c0 08          	add    $0x8,%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._Z15qMapLessThanKeyIhEbRKT_S2_:

0000000000000000 <_Z15qMapLessThanKeyIhEbRKT_S2_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	0f b6 10             	movzbl (%rax),%edx
  13:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  17:	0f b6 00             	movzbl (%rax),%eax
  1a:	38 c2                	cmp    %al,%dl
  1c:	0f 92 c0             	setb   %al
  1f:	5d                   	pop    %rbp
  20:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeIhhE8leftNodeEv:

0000000000000000 <_ZNK8QMapNodeIhhE8leftNodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 08          	mov    0x8(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeIhhE9rightNodeEv:

0000000000000000 <_ZNK8QMapNodeIhhE9rightNodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 10          	mov    0x10(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapIhhE8iteratorC2EP8QMapNodeIhhE:

0000000000000000 <_ZN4QMapIhhE8iteratorC1EP8QMapNodeIhhE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataIhhE10createNodeERKhS2_P8QMapNodeIhhEb:

0000000000000000 <_ZN8QMapDataIhhE10createNodeERKhS2_P8QMapNodeIhhEb>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 40          	sub    $0x40,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  14:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  18:	44 89 c0             	mov    %r8d,%eax
  1b:	88 45 cc             	mov    %al,-0x34(%rbp)
  1e:	0f b6 4d cc          	movzbl -0x34(%rbp),%ecx
  22:	be 20 00 00 00       	mov    $0x20,%esi
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  2f:	41 89 c8             	mov    %ecx,%r8d
  32:	48 89 d1             	mov    %rdx,%rcx
  35:	ba 08 00 00 00       	mov    $0x8,%edx
  3a:	48 89 c7             	mov    %rax,%rdi
  3d:	e8 00 00 00 00       	callq  42 <_ZN8QMapDataIhhE10createNodeERKhS2_P8QMapNodeIhhEb+0x42>
    QString StepArgs;
  42:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  46:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4a:	48 83 c0 18          	add    $0x18,%rax
  4e:	48 89 c6             	mov    %rax,%rsi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	bf 01 00 00 00       	mov    $0x1,%edi
  56:	e8 00 00 00 00       	callq  5b <_ZN8QMapDataIhhE10createNodeERKhS2_P8QMapNodeIhhEb+0x5b>
  5b:	48 85 c0             	test   %rax,%rax
  5e:	74 09                	je     69 <_ZN8QMapDataIhhE10createNodeERKhS2_P8QMapNodeIhhEb+0x69>
  60:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  64:	0f b6 12             	movzbl (%rdx),%edx
  67:	88 10                	mov    %dl,(%rax)
  69:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  6d:	48 83 c0 19          	add    $0x19,%rax
  71:	48 89 c6             	mov    %rax,%rsi
  74:	bf 01 00 00 00       	mov    $0x1,%edi
  79:	e8 00 00 00 00       	callq  7e <_ZN8QMapDataIhhE10createNodeERKhS2_P8QMapNodeIhhEb+0x7e>
  7e:	48 85 c0             	test   %rax,%rax
  81:	74 09                	je     8c <_ZN8QMapDataIhhE10createNodeERKhS2_P8QMapNodeIhhEb+0x8c>
  83:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  87:	0f b6 12             	movzbl (%rdx),%edx
    QR.setMinimal(false);
  8a:	88 10                	mov    %dl,(%rax)
  8c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  90:	c9                   	leaveq 
  91:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE14const_iteratorC2EPNS1_4NodeE:

0000000000000000 <_ZN5QListI7QStringE14const_iteratorC1EPNS1_4NodeE>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE5beginEPS0_:

0000000000000000 <_ZN15QTypedArrayDataI19QXmlStreamAttributeE5beginEPS0_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN15QTypedArrayDataI19QXmlStreamAttributeE5beginEPS0_+0x1c>
  1c:	c9                   	leaveq 
  1d:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE3endEPS0_:

0000000000000000 <_ZN15QTypedArrayDataI19QXmlStreamAttributeE3endEPS0_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN15QTypedArrayDataI19QXmlStreamAttributeE3endEPS0_+0x1c>
  1c:	48 89 c1             	mov    %rax,%rcx
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	8b 40 04             	mov    0x4(%rax),%eax
  26:	48 63 d0             	movslq %eax,%rdx
    QString script = *str;
  29:	48 89 d0             	mov    %rdx,%rax
  2c:	48 c1 e0 02          	shl    $0x2,%rax
  30:	48 01 d0             	add    %rdx,%rax
  33:	48 c1 e0 04          	shl    $0x4,%rax
  37:	48 01 c8             	add    %rcx,%rax
  3a:	c9                   	leaveq 
  3b:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapDataI7QStringiE8findNodeERKS0_:

0000000000000000 <_ZNK8QMapDataI7QStringiE8findNodeERKS0_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x1c>
  1c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  20:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  25:	74 52                	je     79 <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x79>
  27:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    QString script = *str;
  2b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  2f:	48 89 d6             	mov    %rdx,%rsi
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x3a>
  3a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3e:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
    QString StepArgs;
  43:	74 25                	je     6a <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x6a>
  45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  49:	48 8d 50 18          	lea    0x18(%rax),%rdx
  4d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 d6             	mov    %rdx,%rsi
  54:	48 89 c7             	mov    %rax,%rdi
  57:	e8 00 00 00 00       	callq  5c <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x5c>
  5c:	83 f0 01             	xor    $0x1,%eax
  5f:	84 c0                	test   %al,%al
  61:	74 07                	je     6a <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x6a>
  63:	b8 01 00 00 00       	mov    $0x1,%eax
  68:	eb 05                	jmp    6f <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x6f>
  6a:	b8 00 00 00 00       	mov    $0x0,%eax
  6f:	84 c0                	test   %al,%al
  71:	74 06                	je     79 <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x79>
  73:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  77:	eb 05                	jmp    7e <_ZNK8QMapDataI7QStringiE8findNodeERKS0_+0x7e>
  79:	b8 00 00 00 00       	mov    $0x0,%eax
  7e:	c9                   	leaveq 
  7f:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiE6detachEv:

0000000000000000 <_ZN4QMapI7QStringiE6detachEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN4QMapI7QStringiE6detachEv+0x1b>
  1b:	84 c0                	test   %al,%al
  1d:	74 0c                	je     2b <_ZN4QMapI7QStringiE6detachEv+0x2b>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZN4QMapI7QStringiE6detachEv+0x2b>
    QString script = *str;
  2b:	90                   	nop
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapDataI7QStringiE4rootEv:

0000000000000000 <_ZNK8QMapDataI7QStringiE4rootEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 10          	mov    0x10(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringiE3endEv:

0000000000000000 <_ZN8QMapDataI7QStringiE3endEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 83 c0 08          	add    $0x8,%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringiE8leftNodeEv:

0000000000000000 <_ZNK8QMapNodeI7QStringiE8leftNodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 08          	mov    0x8(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringiE9rightNodeEv:

0000000000000000 <_ZNK8QMapNodeI7QStringiE9rightNodeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 40 10          	mov    0x10(%rax),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiE8iteratorC2EP8QMapNodeIS0_iE:

0000000000000000 <_ZN4QMapI7QStringiE8iteratorC1EP8QMapNodeIS0_iE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb:

0000000000000000 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 48          	sub    $0x48,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  15:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  19:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  1d:	44 89 c0             	mov    %r8d,%eax
  20:	88 45 ac             	mov    %al,-0x54(%rbp)
  23:	0f b6 4d ac          	movzbl -0x54(%rbp),%ecx
  27:	be 28 00 00 00       	mov    $0x28,%esi
    QString script = *str;
  2c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  30:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  34:	41 89 c8             	mov    %ecx,%r8d
  37:	48 89 d1             	mov    %rdx,%rcx
  3a:	ba 08 00 00 00       	mov    $0x8,%edx
  3f:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0x47>
  47:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  4b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4f:	4c 8d 60 18          	lea    0x18(%rax),%r12
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	4c 89 e6             	mov    %r12,%rsi
  56:	bf 08 00 00 00       	mov    $0x8,%edi
  5b:	e8 00 00 00 00       	callq  60 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0x60>
  60:	48 89 c3             	mov    %rax,%rbx
  63:	48 85 db             	test   %rbx,%rbx
  66:	74 0f                	je     77 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0x77>
  68:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  6c:	48 89 c6             	mov    %rax,%rsi
  6f:	48 89 df             	mov    %rbx,%rdi
  72:	e8 00 00 00 00       	callq  77 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0x77>
  77:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  7b:	48 83 c0 20          	add    $0x20,%rax
  7f:	48 89 c6             	mov    %rax,%rsi
  82:	bf 04 00 00 00       	mov    $0x4,%edi
  87:	e8 00 00 00 00       	callq  8c <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0x8c>
    QR.setMinimal(false);
  8c:	48 85 c0             	test   %rax,%rax
  8f:	74 08                	je     99 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0x99>
  91:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  95:	8b 12                	mov    (%rdx),%edx
  97:	89 10                	mov    %edx,(%rax)
  99:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9d:	eb 44                	jmp    e3 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0xe3>
  9f:	49 89 c5             	mov    %rax,%r13
  a2:	4c 89 e6             	mov    %r12,%rsi
  a5:	48 89 df             	mov    %rbx,%rdi
  a8:	e8 00 00 00 00       	callq  ad <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0xad>
  ad:	4c 89 e8             	mov    %r13,%rax
  b0:	48 89 c7             	mov    %rax,%rdi
  b3:	e8 00 00 00 00       	callq  b8 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0xb8>
  b8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  bc:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
        if(i<0) return -1;
  c0:	48 89 d6             	mov    %rdx,%rsi
  c3:	48 89 c7             	mov    %rax,%rdi
  c6:	e8 00 00 00 00       	callq  cb <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0xcb>
  cb:	e8 00 00 00 00       	callq  d0 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0xd0>
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  d0:	48 89 c3             	mov    %rax,%rbx
  d3:	e8 00 00 00 00       	callq  d8 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0xd8>
  d8:	48 89 d8             	mov    %rbx,%rax
  db:	48 89 c7             	mov    %rax,%rdi

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  de:	e8 00 00 00 00       	callq  e3 <_ZN8QMapDataI7QStringiE10createNodeERKS0_RKiP8QMapNodeIS0_iEb+0xe3>
  e3:	48 83 c4 48          	add    $0x48,%rsp
  e7:	5b                   	pop    %rbx
  e8:	41 5c                	pop    %r12
  ea:	41 5d                	pop    %r13
  ec:	5d                   	pop    %rbp
  ed:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringiE5beginEv:

0000000000000000 <_ZN8QMapDataI7QStringiE5beginEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN8QMapDataI7QStringiE5beginEv+0x18>
  18:	48 85 c0             	test   %rax,%rax
  1b:	0f 95 c0             	setne  %al
  1e:	84 c0                	test   %al,%al
  20:	74 0a                	je     2c <_ZN8QMapDataI7QStringiE5beginEv+0x2c>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 8b 40 20          	mov    0x20(%rax),%rax
    QString script = *str;
  2a:	eb 0c                	jmp    38 <_ZN8QMapDataI7QStringiE5beginEv+0x38>
  2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN8QMapDataI7QStringiE5beginEv+0x38>
  38:	c9                   	leaveq 
  39:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringiE7destroyEv:

0000000000000000 <_ZN8QMapDataI7QStringiE7destroyEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN8QMapDataI7QStringiE7destroyEv+0x18>
  18:	48 85 c0             	test   %rax,%rax
  1b:	0f 95 c0             	setne  %al
  1e:	84 c0                	test   %al,%al
  20:	74 30                	je     52 <_ZN8QMapDataI7QStringiE7destroyEv+0x52>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZN8QMapDataI7QStringiE7destroyEv+0x2e>
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN8QMapDataI7QStringiE7destroyEv+0x36>
  36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3a:	48 8b 48 10          	mov    0x10(%rax),%rcx
  3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  42:	ba 08 00 00 00       	mov    $0x8,%edx
  47:	48 89 ce             	mov    %rcx,%rsi
  4a:	48 89 c7             	mov    %rax,%rdi
  4d:	e8 00 00 00 00       	callq  52 <_ZN8QMapDataI7QStringiE7destroyEv+0x52>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	callq  5e <_ZN8QMapDataI7QStringiE7destroyEv+0x5e>
  5e:	90                   	nop
  5f:	c9                   	leaveq 
  60:	c3                   	retq   

Дизассемблирование раздела .text._ZNK4QMapI7QStringiE5valueERKS0_RKi:

0000000000000000 <_ZNK4QMapI7QStringiE5valueERKS0_RKi>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  14:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  18:	48 8b 00             	mov    (%rax),%rax
  1b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  1f:	48 89 d6             	mov    %rdx,%rsi
  22:	48 89 c7             	mov    %rax,%rdi
  25:	e8 00 00 00 00       	callq  2a <_ZNK4QMapI7QStringiE5valueERKS0_RKi+0x2a>
    QString script = *str;
  2a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  2e:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  33:	74 09                	je     3e <_ZNK4QMapI7QStringiE5valueERKS0_RKi+0x3e>
  35:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  39:	8b 40 20             	mov    0x20(%rax),%eax
  3c:	eb 06                	jmp    44 <_ZNK4QMapI7QStringiE5valueERKS0_RKi+0x44>
  3e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString StepArgs;
  42:	8b 00                	mov    (%rax),%eax
  44:	c9                   	leaveq 
  45:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringiE8freeDataEP9QHashData:

0000000000000000 <_ZN5QHashI7QStringiE8freeDataEP9QHashData>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 1b <_ZN5QHashI7QStringiE8freeDataEP9QHashData+0x1b>
  1b:	48 89 d6             	mov    %rdx,%rsi
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZN5QHashI7QStringiE8freeDataEP9QHashData+0x26>
  26:	90                   	nop
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE6detachEv:

0000000000000000 <_ZN5QHashI7QString11QStringListE6detachEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 83 c0 10          	add    $0x10,%rax
  17:	48 89 c7             	mov    %rax,%rdi
  1a:	e8 00 00 00 00       	callq  1f <_ZN5QHashI7QString11QStringListE6detachEv+0x1f>
  1f:	84 c0                	test   %al,%al
  21:	74 0c                	je     2f <_ZN5QHashI7QString11QStringListE6detachEv+0x2f>
  23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QHashI7QString11QStringListE6detachEv+0x2f>
  2f:	90                   	nop
  30:	c9                   	leaveq 
  31:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj:

0000000000000000 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  14:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	48 8b 00             	mov    (%rax),%rax
  22:	8b 40 20             	mov    0x20(%rax),%eax
  25:	85 c0                	test   %eax,%eax
  27:	75 07                	jne    30 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x30>
    QString script = *str;
  29:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  2e:	74 2b                	je     5b <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x5b>
  30:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  34:	48 8b 00             	mov    (%rax),%rax
  37:	8b 50 24             	mov    0x24(%rax),%edx
  3a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  3e:	89 d6                	mov    %edx,%esi
  40:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x48>
  48:	89 45 f4             	mov    %eax,-0xc(%rbp)
  4b:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  50:	74 09                	je     5b <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x5b>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  56:	8b 55 f4             	mov    -0xc(%rbp),%edx
  59:	89 10                	mov    %edx,(%rax)
  5b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5f:	48 8b 00             	mov    (%rax),%rax
  62:	8b 40 20             	mov    0x20(%rax),%eax
  65:	85 c0                	test   %eax,%eax
  67:	0f 84 be 00 00 00    	je     12b <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x12b>
  6d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  71:	48 8b 00             	mov    (%rax),%rax
  74:	48 8b 48 08          	mov    0x8(%rax),%rcx
  78:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7c:	48 8b 00             	mov    (%rax),%rax
  7f:	8b 40 20             	mov    0x20(%rax),%eax
  82:	89 c6                	mov    %eax,%esi
  84:	8b 45 f4             	mov    -0xc(%rbp),%eax
  87:	ba 00 00 00 00       	mov    $0x0,%edx
    QR.setMinimal(false);
  8c:	f7 f6                	div    %esi
  8e:	89 d0                	mov    %edx,%eax
  90:	89 c0                	mov    %eax,%eax
  92:	48 c1 e0 03          	shl    $0x3,%rax
  96:	48 01 c8             	add    %rcx,%rax
  99:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

    while(1==1)
    {
        int i = QR.indexIn(script);
  9d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  a1:	48 8b 10             	mov    (%rax),%rdx
  a4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a8:	48 8b 00             	mov    (%rax),%rax
  ab:	48 39 c2             	cmp    %rax,%rdx
  ae:	74 27                	je     d7 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0xd7>
  b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  b4:	48 8b 00             	mov    (%rax),%rax
  b7:	48 8b 00             	mov    (%rax),%rax
  ba:	48 85 c0             	test   %rax,%rax
  bd:	75 18                	jne    d7 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0xd7>
        if(i<0) return -1;
  bf:	ba be 03 00 00       	mov    $0x3be,%edx
  c4:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # cb <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0xcb>
  cb:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # d2 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0xd2>
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  d2:	e8 00 00 00 00       	callq  d7 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0xd7>
  d7:	e8 00 00 00 00       	callq  dc <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0xdc>
  dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  e0:	48 8b 10             	mov    (%rax),%rdx
  e3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  e7:	48 8b 00             	mov    (%rax),%rax
  ea:	48 39 c2             	cmp    %rax,%rdx
  ed:	74 26                	je     115 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x115>
  ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  f3:	48 8b 00             	mov    (%rax),%rax
  f6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  fa:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  fd:	89 ce                	mov    %ecx,%esi
  ff:	48 89 c7             	mov    %rax,%rdi
 102:	e8 00 00 00 00       	callq  107 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x107>
 107:	83 f0 01             	xor    $0x1,%eax
 10a:	84 c0                	test   %al,%al
 10c:	74 07                	je     115 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x115>
 10e:	b8 01 00 00 00       	mov    $0x1,%eax
 113:	eb 05                	jmp    11a <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x11a>
 115:	b8 00 00 00 00       	mov    $0x0,%eax
        this->constants.append(QR.cap(1));
 11a:	84 c0                	test   %al,%al
 11c:	74 15                	je     133 <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0x133>
 11e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 122:	48 8b 00             	mov    (%rax),%rax
 125:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 129:	eb b1                	jmp    dc <_ZNK5QHashI7QString11QStringListE8findNodeERKS0_Pj+0xdc>
 12b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 12f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 133:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 137:	c9                   	leaveq 
 138:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E:

0000000000000000 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 48          	sub    $0x48,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  14:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  18:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  1c:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
  20:	e8 00 00 00 00       	callq  25 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0x25>
  25:	89 c2                	mov    %eax,%edx
  27:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    QString script = *str;
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	89 d6                	mov    %edx,%esi
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0x38>
  38:	49 89 c4             	mov    %rax,%r12
  3b:	4c 89 e6             	mov    %r12,%rsi
  3e:	bf 20 00 00 00       	mov    $0x20,%edi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0x48>
  48:	48 89 c3             	mov    %rax,%rbx
  4b:	48 85 db             	test   %rbx,%rbx
  4e:	74 25                	je     75 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0x75>
  50:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  54:	48 8b 30             	mov    (%rax),%rsi
  57:	8b 4d c4             	mov    -0x3c(%rbp),%ecx
  5a:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  5e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  62:	49 89 f0             	mov    %rsi,%r8
  65:	48 89 c6             	mov    %rax,%rsi
  68:	48 89 df             	mov    %rbx,%rdi
  6b:	e8 00 00 00 00       	callq  70 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0x70>
  70:	48 89 d8             	mov    %rbx,%rax
  73:	eb 03                	jmp    78 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0x78>
  75:	48 89 d8             	mov    %rbx,%rax
  78:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  7c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  84:	48 89 10             	mov    %rdx,(%rax)
  87:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    QR.setMinimal(false);
  8b:	48 8b 00             	mov    (%rax),%rax
  8e:	8b 50 14             	mov    0x14(%rax),%edx
  91:	83 c2 01             	add    $0x1,%edx
  94:	89 50 14             	mov    %edx,0x14(%rax)
  97:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	eb 19                	jmp    b6 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0xb6>
  9d:	49 89 c5             	mov    %rax,%r13
  a0:	4c 89 e6             	mov    %r12,%rsi
  a3:	48 89 df             	mov    %rbx,%rdi
  a6:	e8 00 00 00 00       	callq  ab <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0xab>
  ab:	4c 89 e8             	mov    %r13,%rax
  ae:	48 89 c7             	mov    %rax,%rdi
  b1:	e8 00 00 00 00       	callq  b6 <_ZN5QHashI7QString11QStringListE10createNodeEjRKS0_RKS1_PP9QHashNodeIS0_S1_E+0xb6>
  b6:	48 83 c4 48          	add    $0x48,%rsp
  ba:	5b                   	pop    %rbx
  bb:	41 5c                	pop    %r12
  bd:	41 5d                	pop    %r13
        if(i<0) return -1;
  bf:	5d                   	pop    %rbp
  c0:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE8iteratorC2EPv:

0000000000000000 <_ZN5QHashI7QString11QStringListE8iteratorC1EPv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE8concreteEPN9QHashData4NodeE:

0000000000000000 <_ZN5QHashI7QString11QStringListE8concreteEPN9QHashData4NodeE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	5d                   	pop    %rbp
   d:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI6moduleE6detachEv:

0000000000000000 <_ZN5QListI6moduleE6detachEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN5QListI6moduleE6detachEv+0x1b>
  1b:	84 c0                	test   %al,%al
  1d:	74 0c                	je     2b <_ZN5QListI6moduleE6detachEv+0x2b>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZN5QListI6moduleE6detachEv+0x2b>
    QString script = *str;
  2b:	90                   	nop
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI6moduleE4Node1tEv:

0000000000000000 <_ZN5QListI6moduleE4Node1tEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	5d                   	pop    %rbp
  10:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QStringS0_E7isEmptyEv:

0000000000000000 <_ZNK5QHashI7QStringS0_E7isEmptyEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 00             	mov    (%rax),%rax
   f:	8b 40 14             	mov    0x14(%rax),%eax
  12:	85 c0                	test   %eax,%eax
  14:	0f 94 c0             	sete   %al
  17:	5d                   	pop    %rbp
  18:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E10deleteNodeEP9QHashNodeIS0_S0_E:

0000000000000000 <_ZN5QHashI7QStringS0_E10deleteNodeEP9QHashNodeIS0_S0_E>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN5QHashI7QStringS0_E10deleteNodeEP9QHashNodeIS0_S0_E+0x1c>
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 8b 00             	mov    (%rax),%rax
  23:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  27:	48 89 d6             	mov    %rdx,%rsi
    QString script = *str;
  2a:	48 89 c7             	mov    %rax,%rdi
  2d:	e8 00 00 00 00       	callq  32 <_ZN5QHashI7QStringS0_E10deleteNodeEP9QHashNodeIS0_S0_E+0x32>
  32:	90                   	nop
  33:	c9                   	leaveq 
  34:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QListSpecialMethodsI8variableED2Ev:

0000000000000000 <_ZN19QListSpecialMethodsI8variableED1Ev>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	90                   	nop
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI8variableE7deallocEPN9QListData4DataE:

0000000000000000 <_ZN5QListI8variableE7deallocEPN9QListData4DataE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 8d 50 10          	lea    0x10(%rax),%rdx
  18:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1c:	8b 40 0c             	mov    0xc(%rax),%eax
  1f:	48 98                	cltq   
  21:	48 c1 e0 03          	shl    $0x3,%rax
  25:	48 01 c2             	add    %rax,%rdx
  28:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QString script = *str;
  2c:	48 8d 48 10          	lea    0x10(%rax),%rcx
  30:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  34:	8b 40 08             	mov    0x8(%rax),%eax
  37:	48 98                	cltq   
  39:	48 c1 e0 03          	shl    $0x3,%rax
  3d:	48 01 c1             	add    %rax,%rcx
  40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  44:	48 89 ce             	mov    %rcx,%rsi
  47:	48 89 c7             	mov    %rax,%rdi
  4a:	e8 00 00 00 00       	callq  4f <_ZN5QListI8variableE7deallocEPN9QListData4DataE+0x4f>
  4f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 89 c7             	mov    %rax,%rdi
  56:	e8 00 00 00 00       	callq  5b <_ZN5QListI8variableE7deallocEPN9QListData4DataE+0x5b>
  5b:	90                   	nop
  5c:	c9                   	leaveq 
  5d:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI6moduleE18detach_helper_growEii:

0000000000000000 <_ZN5QListI6moduleE18detach_helper_growEii>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 54                	push   %r12
   6:	53                   	push   %rbx
   7:	48 83 ec 20          	sub    $0x20,%rsp
   b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   f:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  12:	89 55 d0             	mov    %edx,-0x30(%rbp)
  15:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZN5QListI6moduleE18detach_helper_growEii+0x21>
  21:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  25:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString script = *str;
  29:	8b 55 d0             	mov    -0x30(%rbp),%edx
  2c:	48 8d 4d d4          	lea    -0x2c(%rbp),%rcx
  30:	48 89 ce             	mov    %rcx,%rsi
  33:	48 89 c7             	mov    %rax,%rdi
  36:	e8 00 00 00 00       	callq  3b <_ZN5QListI6moduleE18detach_helper_growEii+0x3b>
  3b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  3f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString StepArgs;
  43:	48 89 c7             	mov    %rax,%rdi
  46:	e8 00 00 00 00       	callq  4b <_ZN5QListI6moduleE18detach_helper_growEii+0x4b>
  4b:	48 89 c2             	mov    %rax,%rdx
  4e:	8b 45 d4             	mov    -0x2c(%rbp),%eax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 98                	cltq   
  53:	48 c1 e0 03          	shl    $0x3,%rax
  57:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  5b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  5f:	48 89 c7             	mov    %rax,%rdi
  62:	e8 00 00 00 00       	callq  67 <_ZN5QListI6moduleE18detach_helper_growEii+0x67>
  67:	48 89 c6             	mov    %rax,%rsi
  6a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  6e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  72:	48 89 d1             	mov    %rdx,%rcx
  75:	48 89 da             	mov    %rbx,%rdx
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	callq  80 <_ZN5QListI6moduleE18detach_helper_growEii+0x80>
  80:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  83:	48 98                	cltq   
  85:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8c:	00 
    QR.setMinimal(false);
  8d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  91:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  95:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  99:	48 89 c7             	mov    %rax,%rdi

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	e8 00 00 00 00       	callq  a1 <_ZN5QListI6moduleE18detach_helper_growEii+0xa1>
  a1:	49 89 c4             	mov    %rax,%r12
  a4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a8:	48 89 c7             	mov    %rax,%rdi
  ab:	e8 00 00 00 00       	callq  b0 <_ZN5QListI6moduleE18detach_helper_growEii+0xb0>
  b0:	48 89 c1             	mov    %rax,%rcx
  b3:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  b6:	48 63 d0             	movslq %eax,%rdx
  b9:	8b 45 d0             	mov    -0x30(%rbp),%eax
  bc:	48 98                	cltq   
        if(i<0) return -1;
  be:	48 01 d0             	add    %rdx,%rax
  c1:	48 c1 e0 03          	shl    $0x3,%rax
  c5:	48 8d 34 01          	lea    (%rcx,%rax,1),%rsi
  c9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	48 89 d9             	mov    %rbx,%rcx
  d0:	4c 89 e2             	mov    %r12,%rdx
  d3:	48 89 c7             	mov    %rax,%rdi
  d6:	e8 00 00 00 00       	callq  db <_ZN5QListI6moduleE18detach_helper_growEii+0xdb>
  db:	48 8b 45 e8          	mov    -0x18(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  df:	48 89 c7             	mov    %rax,%rdi
  e2:	e8 00 00 00 00       	callq  e7 <_ZN5QListI6moduleE18detach_helper_growEii+0xe7>
  e7:	83 f0 01             	xor    $0x1,%eax
  ea:	84 c0                	test   %al,%al
  ec:	74 13                	je     101 <_ZN5QListI6moduleE18detach_helper_growEii+0x101>
  ee:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  f2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  f6:	48 89 d6             	mov    %rdx,%rsi
  f9:	48 89 c7             	mov    %rax,%rdi
  fc:	e8 00 00 00 00       	callq  101 <_ZN5QListI6moduleE18detach_helper_growEii+0x101>
 101:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 105:	48 89 c7             	mov    %rax,%rdi
 108:	e8 00 00 00 00       	callq  10d <_ZN5QListI6moduleE18detach_helper_growEii+0x10d>
 10d:	48 89 c2             	mov    %rax,%rdx
 110:	8b 45 d4             	mov    -0x2c(%rbp),%eax
 113:	48 98                	cltq   
 115:	48 c1 e0 03          	shl    $0x3,%rax
        this->constants.append(QR.cap(1));
 119:	48 01 d0             	add    %rdx,%rax
 11c:	e9 ab 00 00 00       	jmpq   1cc <_ZN5QListI6moduleE18detach_helper_growEii+0x1cc>
 121:	48 89 c7             	mov    %rax,%rdi
 124:	e8 00 00 00 00       	callq  129 <_ZN5QListI6moduleE18detach_helper_growEii+0x129>
 129:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 12d:	48 89 c7             	mov    %rax,%rdi
 130:	e8 00 00 00 00       	callq  135 <_ZN5QListI6moduleE18detach_helper_growEii+0x135>
 135:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 139:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 13d:	48 89 10             	mov    %rdx,(%rax)
 140:	e8 00 00 00 00       	callq  145 <_ZN5QListI6moduleE18detach_helper_growEii+0x145>
 145:	48 89 c3             	mov    %rax,%rbx
 148:	e8 00 00 00 00       	callq  14d <_ZN5QListI6moduleE18detach_helper_growEii+0x14d>
 14d:	48 89 d8             	mov    %rbx,%rax
 150:	48 89 c7             	mov    %rax,%rdi
 153:	e8 00 00 00 00       	callq  158 <_ZN5QListI6moduleE18detach_helper_growEii+0x158>
        this->defines.insert(QR.cap(1),QR.cap(2));
 158:	48 89 c7             	mov    %rax,%rdi
 15b:	e8 00 00 00 00       	callq  160 <_ZN5QListI6moduleE18detach_helper_growEii+0x160>
 160:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 164:	48 89 c7             	mov    %rax,%rdi
 167:	e8 00 00 00 00       	callq  16c <_ZN5QListI6moduleE18detach_helper_growEii+0x16c>
 16c:	48 89 c2             	mov    %rax,%rdx
 16f:	8b 45 d4             	mov    -0x2c(%rbp),%eax
 172:	48 98                	cltq   
 174:	48 c1 e0 03          	shl    $0x3,%rax
 178:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
 17c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 180:	48 89 c7             	mov    %rax,%rdi
 183:	e8 00 00 00 00       	callq  188 <_ZN5QListI6moduleE18detach_helper_growEii+0x188>
 188:	48 89 c1             	mov    %rax,%rcx
 18b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 18f:	48 89 da             	mov    %rbx,%rdx
 192:	48 89 ce             	mov    %rcx,%rsi
 195:	48 89 c7             	mov    %rax,%rdi
 198:	e8 00 00 00 00       	callq  19d <_ZN5QListI6moduleE18detach_helper_growEii+0x19d>
 19d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1a1:	48 89 c7             	mov    %rax,%rdi
 1a4:	e8 00 00 00 00       	callq  1a9 <_ZN5QListI6moduleE18detach_helper_growEii+0x1a9>
 1a9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1ad:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 1b1:	48 89 10             	mov    %rdx,(%rax)
 1b4:	e8 00 00 00 00       	callq  1b9 <_ZN5QListI6moduleE18detach_helper_growEii+0x1b9>
 1b9:	48 89 c3             	mov    %rax,%rbx
        script = script.right(script.length() - StepArgs.length());
 1bc:	e8 00 00 00 00       	callq  1c1 <_ZN5QListI6moduleE18detach_helper_growEii+0x1c1>
 1c1:	48 89 d8             	mov    %rbx,%rax
 1c4:	48 89 c7             	mov    %rax,%rdi
 1c7:	e8 00 00 00 00       	callq  1cc <_ZN5QListI6moduleE18detach_helper_growEii+0x1cc>
 1cc:	48 83 c4 20          	add    $0x20,%rsp
 1d0:	5b                   	pop    %rbx
 1d1:	41 5c                	pop    %r12
 1d3:	5d                   	pop    %rbp
 1d4:	c3                   	retq   

Дизассемблирование раздела .text._ZN6moduleC2ERKS_:

0000000000000000 <_ZN6moduleC1ERKS_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  11:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  19:	48 89 d6             	mov    %rdx,%rsi
  1c:	48 89 c7             	mov    %rax,%rdi
  1f:	e8 00 00 00 00       	callq  24 <_ZN6moduleC1ERKS_+0x24>
  24:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  28:	48 8d 50 08          	lea    0x8(%rax),%rdx
    QString script = *str;
  2c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  30:	48 83 c0 08          	add    $0x8,%rax
  34:	48 89 d6             	mov    %rdx,%rsi
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	e8 00 00 00 00       	callq  3f <_ZN6moduleC1ERKS_+0x3f>
  3f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    QString StepArgs;
  43:	48 8d 50 10          	lea    0x10(%rax),%rdx
  47:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4b:	48 83 c0 10          	add    $0x10,%rax
  4f:	48 89 d6             	mov    %rdx,%rsi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 89 c7             	mov    %rax,%rdi
  55:	e8 00 00 00 00       	callq  5a <_ZN6moduleC1ERKS_+0x5a>
  5a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  5e:	48 8d 50 18          	lea    0x18(%rax),%rdx
  62:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  66:	48 83 c0 18          	add    $0x18,%rax
  6a:	48 89 d6             	mov    %rdx,%rsi
  6d:	48 89 c7             	mov    %rax,%rdi
  70:	e8 00 00 00 00       	callq  75 <_ZN6moduleC1ERKS_+0x75>
  75:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  79:	48 8d 50 20          	lea    0x20(%rax),%rdx
  7d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  81:	48 83 c0 20          	add    $0x20,%rax
  85:	48 89 d6             	mov    %rdx,%rsi
  88:	48 89 c7             	mov    %rax,%rdi
    QR.setMinimal(false);
  8b:	e8 00 00 00 00       	callq  90 <_ZN6moduleC1ERKS_+0x90>
  90:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  94:	48 8d 50 28          	lea    0x28(%rax),%rdx
  98:	48 8b 45 e8          	mov    -0x18(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 83 c0 28          	add    $0x28,%rax
  a0:	48 89 d6             	mov    %rdx,%rsi
  a3:	48 89 c7             	mov    %rax,%rdi
  a6:	e8 00 00 00 00       	callq  ab <_ZN6moduleC1ERKS_+0xab>
  ab:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  af:	0f b6 50 30          	movzbl 0x30(%rax),%edx
  b3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b7:	88 50 30             	mov    %dl,0x30(%rax)
  ba:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
        if(i<0) return -1;
  be:	0f b6 50 31          	movzbl 0x31(%rax),%edx
  c2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  c6:	88 50 31             	mov    %dl,0x31(%rax)
  c9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	0f b6 50 32          	movzbl 0x32(%rax),%edx
  d1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  d5:	88 50 32             	mov    %dl,0x32(%rax)
  d8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  dc:	0f b7 50 34          	movzwl 0x34(%rax),%edx

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  e0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  e4:	66 89 50 34          	mov    %dx,0x34(%rax)
  e8:	eb 6e                	jmp    158 <_ZN6moduleC1ERKS_+0x158>
  ea:	48 89 c3             	mov    %rax,%rbx
  ed:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  f1:	48 83 c0 20          	add    $0x20,%rax
  f5:	48 89 c7             	mov    %rax,%rdi
  f8:	e8 00 00 00 00       	callq  fd <_ZN6moduleC1ERKS_+0xfd>
  fd:	eb 03                	jmp    102 <_ZN6moduleC1ERKS_+0x102>
  ff:	48 89 c3             	mov    %rax,%rbx
 102:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 106:	48 83 c0 18          	add    $0x18,%rax
 10a:	48 89 c7             	mov    %rax,%rdi
 10d:	e8 00 00 00 00       	callq  112 <_ZN6moduleC1ERKS_+0x112>
 112:	eb 03                	jmp    117 <_ZN6moduleC1ERKS_+0x117>
 114:	48 89 c3             	mov    %rax,%rbx
        this->constants.append(QR.cap(1));
 117:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 11b:	48 83 c0 10          	add    $0x10,%rax
 11f:	48 89 c7             	mov    %rax,%rdi
 122:	e8 00 00 00 00       	callq  127 <_ZN6moduleC1ERKS_+0x127>
 127:	eb 03                	jmp    12c <_ZN6moduleC1ERKS_+0x12c>
 129:	48 89 c3             	mov    %rax,%rbx
 12c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 130:	48 83 c0 08          	add    $0x8,%rax
 134:	48 89 c7             	mov    %rax,%rdi
 137:	e8 00 00 00 00       	callq  13c <_ZN6moduleC1ERKS_+0x13c>
 13c:	eb 03                	jmp    141 <_ZN6moduleC1ERKS_+0x141>
 13e:	48 89 c3             	mov    %rax,%rbx
 141:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 145:	48 89 c7             	mov    %rax,%rdi
 148:	e8 00 00 00 00       	callq  14d <_ZN6moduleC1ERKS_+0x14d>
 14d:	48 89 d8             	mov    %rbx,%rax
 150:	48 89 c7             	mov    %rax,%rdi
 153:	e8 00 00 00 00       	callq  158 <_ZN6moduleC1ERKS_+0x158>
        this->defines.insert(QR.cap(1),QR.cap(2));
 158:	48 83 c4 18          	add    $0x18,%rsp
 15c:	5b                   	pop    %rbx
 15d:	5d                   	pop    %rbp
 15e:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI6moduleE14node_constructEPNS1_4NodeERKS0_:

0000000000000000 <_ZN5QListI6moduleE14node_constructEPNS1_4NodeERKS0_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 54                	push   %r12
   6:	53                   	push   %rbx
   7:	48 83 ec 20          	sub    $0x20,%rsp
   b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  13:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  17:	bf 38 00 00 00       	mov    $0x38,%edi
  1c:	e8 00 00 00 00       	callq  21 <_ZN5QListI6moduleE14node_constructEPNS1_4NodeERKS0_+0x21>
  21:	48 89 c3             	mov    %rax,%rbx
  24:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  28:	48 89 c6             	mov    %rax,%rsi
    QString script = *str;
  2b:	48 89 df             	mov    %rbx,%rdi
  2e:	e8 00 00 00 00       	callq  33 <_ZN5QListI6moduleE14node_constructEPNS1_4NodeERKS0_+0x33>
  33:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  37:	48 89 18             	mov    %rbx,(%rax)
  3a:	eb 16                	jmp    52 <_ZN5QListI6moduleE14node_constructEPNS1_4NodeERKS0_+0x52>
  3c:	49 89 c4             	mov    %rax,%r12
  3f:	48 89 df             	mov    %rbx,%rdi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZN5QListI6moduleE14node_constructEPNS1_4NodeERKS0_+0x47>
  47:	4c 89 e0             	mov    %r12,%rax
  4a:	48 89 c7             	mov    %rax,%rdi
  4d:	e8 00 00 00 00       	callq  52 <_ZN5QListI6moduleE14node_constructEPNS1_4NodeERKS0_+0x52>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 83 c4 20          	add    $0x20,%rsp
  56:	5b                   	pop    %rbx
  57:	41 5c                	pop    %r12
  59:	5d                   	pop    %rbp
  5a:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE13node_destructEPNS1_4NodeES3_:

0000000000000000 <_ZN5QListI7QStringE13node_destructEPNS1_4NodeES3_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  18:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  1c:	74 13                	je     31 <_ZN5QListI7QStringE13node_destructEPNS1_4NodeES3_+0x31>
  1e:	48 83 6d e8 08       	subq   $0x8,-0x18(%rbp)
  23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QListI7QStringE13node_destructEPNS1_4NodeES3_+0x2f>
  2f:	eb e3                	jmp    14 <_ZN5QListI7QStringE13node_destructEPNS1_4NodeES3_+0x14>
  31:	90                   	nop
  32:	c9                   	leaveq 
  33:	c3                   	retq   

Дизассемблирование раздела .text._Z5qSwapIPN9QListData4DataEEvRT_S4_:

0000000000000000 <_Z5qSwapIPN9QListData4DataEEvRT_S4_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 d6             	mov    %rdx,%rsi
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_Z5qSwapIPN9QListData4DataEEvRT_S4_+0x23>
  23:	90                   	nop
  24:	c9                   	leaveq 
  25:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QVectorI19QXmlStreamAttributeE8destructEPS0_S2_:

0000000000000000 <_ZN7QVectorI19QXmlStreamAttributeE8destructEPS0_S2_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  18:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  1c:	74 16                	je     34 <_ZN7QVectorI19QXmlStreamAttributeE8destructEPS0_S2_+0x34>
  1e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  22:	48 8d 50 50          	lea    0x50(%rax),%rdx
  26:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
    QString script = *str;
  2a:	48 89 c7             	mov    %rax,%rdi
  2d:	e8 00 00 00 00       	callq  32 <_ZN7QVectorI19QXmlStreamAttributeE8destructEPS0_S2_+0x32>
  32:	eb e0                	jmp    14 <_ZN7QVectorI19QXmlStreamAttributeE8destructEPS0_S2_+0x14>
  34:	90                   	nop
  35:	c9                   	leaveq 
  36:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE10deallocateEP10QArrayData:

0000000000000000 <_ZN15QTypedArrayDataI19QXmlStreamAttributeE10deallocateEP10QArrayData>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	ba 08 00 00 00       	mov    $0x8,%edx
  15:	be 50 00 00 00       	mov    $0x50,%esi
  1a:	48 89 c7             	mov    %rax,%rdi
  1d:	e8 00 00 00 00       	callq  22 <_ZN15QTypedArrayDataI19QXmlStreamAttributeE10deallocateEP10QArrayData+0x22>
  22:	90                   	nop
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E13detach_helperEv:

0000000000000000 <_ZN5QHashI7QStringS0_E13detach_helperEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN5QHashI7QStringS0_E13detach_helperEv+0x11>
  11:	89 c1                	mov    %eax,%ecx
  13:	ba 20 00 00 00       	mov    $0x20,%edx
  18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1c:	48 8b 00             	mov    (%rax),%rax
  1f:	41 89 c8             	mov    %ecx,%r8d
  22:	89 d1                	mov    %edx,%ecx
  24:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 2b <_ZN5QHashI7QStringS0_E13detach_helperEv+0x2b>
    QString script = *str;
  2b:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 32 <_ZN5QHashI7QStringS0_E13detach_helperEv+0x32>
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZN5QHashI7QStringS0_E13detach_helperEv+0x3a>
  3a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString StepArgs;
  42:	48 8b 00             	mov    (%rax),%rax
  45:	48 83 c0 10          	add    $0x10,%rax
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN5QHashI7QStringS0_E13detach_helperEv+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	83 f0 01             	xor    $0x1,%eax
  54:	84 c0                	test   %al,%al
  56:	74 16                	je     6e <_ZN5QHashI7QStringS0_E13detach_helperEv+0x6e>
  58:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5c:	48 8b 10             	mov    (%rax),%rdx
  5f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  63:	48 89 d6             	mov    %rdx,%rsi
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZN5QHashI7QStringS0_E13detach_helperEv+0x6e>
  6e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  72:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  76:	48 89 10             	mov    %rdx,(%rax)
  79:	90                   	nop
  7a:	c9                   	leaveq 
  7b:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QHashNodeI7QStringS0_E8same_keyEjRKS0_:

0000000000000000 <_ZNK9QHashNodeI7QStringS0_E8same_keyEjRKS0_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	8b 40 08             	mov    0x8(%rax),%eax
  1a:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  1d:	75 22                	jne    41 <_ZNK9QHashNodeI7QStringS0_E8same_keyEjRKS0_+0x41>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 8d 50 10          	lea    0x10(%rax),%rdx
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	48 89 d6             	mov    %rdx,%rsi
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZNK9QHashNodeI7QStringS0_E8same_keyEjRKS0_+0x36>
  36:	84 c0                	test   %al,%al
  38:	74 07                	je     41 <_ZNK9QHashNodeI7QStringS0_E8same_keyEjRKS0_+0x41>
  3a:	b8 01 00 00 00       	mov    $0x1,%eax
  3f:	eb 05                	jmp    46 <_ZNK9QHashNodeI7QStringS0_E8same_keyEjRKS0_+0x46>
  41:	b8 00 00 00 00       	mov    $0x0,%eax
    QString StepArgs;
  46:	c9                   	leaveq 
  47:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E11alignOfNodeEv:

0000000000000000 <_ZN5QHashI7QStringS0_E11alignOfNodeEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  15:	31 c0                	xor    %eax,%eax
  17:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%rbp)
  1e:	b8 08 00 00 00       	mov    $0x8,%eax
  23:	89 45 f0             	mov    %eax,-0x10(%rbp)
  26:	48 8d 55 f4          	lea    -0xc(%rbp),%rdx
    QString script = *str;
  2a:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  2e:	48 89 d6             	mov    %rdx,%rsi
  31:	48 89 c7             	mov    %rax,%rdi
  34:	e8 00 00 00 00       	callq  39 <_ZN5QHashI7QStringS0_E11alignOfNodeEv+0x39>
  39:	8b 00                	mov    (%rax),%eax
  3b:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  3f:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  46:	00 00 
    QString StepArgs;
  48:	74 05                	je     4f <_ZN5QHashI7QStringS0_E11alignOfNodeEv+0x4f>
  4a:	e8 00 00 00 00       	callq  4f <_ZN5QHashI7QStringS0_E11alignOfNodeEv+0x4f>
  4f:	c9                   	leaveq 
  50:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashNodeI7QStringS0_EC2ERKS0_S3_jPS1_:

0000000000000000 <_ZN9QHashNodeI7QStringS0_EC1ERKS0_S3_jPS1_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  11:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  15:	89 4d d4             	mov    %ecx,-0x2c(%rbp)
  18:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
  1c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  20:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  24:	48 89 10             	mov    %rdx,(%rax)
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  2e:	89 50 08             	mov    %edx,0x8(%rax)
  31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  35:	48 8d 50 10          	lea    0x10(%rax),%rdx
  39:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  3d:	48 89 c6             	mov    %rax,%rsi
  40:	48 89 d7             	mov    %rdx,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZN9QHashNodeI7QStringS0_EC1ERKS0_S3_jPS1_+0x48>
  48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4c:	48 8d 50 18          	lea    0x18(%rax),%rdx
  50:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  54:	48 89 c6             	mov    %rax,%rsi
  57:	48 89 d7             	mov    %rdx,%rdi
  5a:	e8 00 00 00 00       	callq  5f <_ZN9QHashNodeI7QStringS0_EC1ERKS0_S3_jPS1_+0x5f>
  5f:	eb 1e                	jmp    7f <_ZN9QHashNodeI7QStringS0_EC1ERKS0_S3_jPS1_+0x7f>
  61:	48 89 c3             	mov    %rax,%rbx
  64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  68:	48 83 c0 10          	add    $0x10,%rax
  6c:	48 89 c7             	mov    %rax,%rdi
  6f:	e8 00 00 00 00       	callq  74 <_ZN9QHashNodeI7QStringS0_EC1ERKS0_S3_jPS1_+0x74>
  74:	48 89 d8             	mov    %rbx,%rax
  77:	48 89 c7             	mov    %rax,%rdi
  7a:	e8 00 00 00 00       	callq  7f <_ZN9QHashNodeI7QStringS0_EC1ERKS0_S3_jPS1_+0x7f>
  7f:	48 83 c4 38          	add    $0x38,%rsp
  83:	5b                   	pop    %rbx
  84:	5d                   	pop    %rbp
  85:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI10QByteArrayE13node_destructEPNS1_4NodeES3_:

0000000000000000 <_ZN5QListI10QByteArrayE13node_destructEPNS1_4NodeES3_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  18:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  1c:	74 13                	je     31 <_ZN5QListI10QByteArrayE13node_destructEPNS1_4NodeES3_+0x31>
  1e:	48 83 6d e8 08       	subq   $0x8,-0x18(%rbp)
  23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QListI10QByteArrayE13node_destructEPNS1_4NodeES3_+0x2f>
  2f:	eb e3                	jmp    14 <_ZN5QListI10QByteArrayE13node_destructEPNS1_4NodeES3_+0x14>
  31:	90                   	nop
  32:	c9                   	leaveq 
  33:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE13detach_helperEv:

0000000000000000 <_ZN5QListI7QStringE13detach_helperEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	8b 50 04             	mov    0x4(%rax),%edx
  16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1a:	89 d6                	mov    %edx,%esi
  1c:	48 89 c7             	mov    %rax,%rdi
  1f:	e8 00 00 00 00       	callq  24 <_ZN5QListI7QStringE13detach_helperEv+0x24>
  24:	90                   	nop
  25:	c9                   	leaveq 
  26:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringhE13detach_helperEv:

0000000000000000 <_ZN4QMapI7QStringhE13detach_helperEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN4QMapI7QStringhE13detach_helperEv+0x11>
  11:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  19:	48 8b 00             	mov    (%rax),%rax
  1c:	48 8b 40 10          	mov    0x10(%rax),%rax
  20:	48 85 c0             	test   %rax,%rax
  23:	74 40                	je     65 <_ZN4QMapI7QStringhE13detach_helperEv+0x65>
  25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  29:	48 8b 00             	mov    (%rax),%rax
  2c:	48 8b 40 10          	mov    0x10(%rax),%rax
  30:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  34:	48 89 d6             	mov    %rdx,%rsi
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	e8 00 00 00 00       	callq  3f <_ZN4QMapI7QStringhE13detach_helperEv+0x3f>
  3f:	48 89 c2             	mov    %rax,%rdx
    QString StepArgs;
  42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  46:	48 89 50 10          	mov    %rdx,0x10(%rax)
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	48 8d 50 08          	lea    0x8(%rax),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 8b 40 10          	mov    0x10(%rax),%rax
  5a:	48 89 d6             	mov    %rdx,%rsi
  5d:	48 89 c7             	mov    %rax,%rdi
  60:	e8 00 00 00 00       	callq  65 <_ZN4QMapI7QStringhE13detach_helperEv+0x65>
  65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  69:	48 8b 00             	mov    (%rax),%rax
  6c:	48 89 c7             	mov    %rax,%rdi
  6f:	e8 00 00 00 00       	callq  74 <_ZN4QMapI7QStringhE13detach_helperEv+0x74>
  74:	83 f0 01             	xor    $0x1,%eax
  77:	84 c0                	test   %al,%al
  79:	74 0f                	je     8a <_ZN4QMapI7QStringhE13detach_helperEv+0x8a>
  7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7f:	48 8b 00             	mov    (%rax),%rax
  82:	48 89 c7             	mov    %rax,%rdi
  85:	e8 00 00 00 00       	callq  8a <_ZN4QMapI7QStringhE13detach_helperEv+0x8a>
    QR.setMinimal(false);
  8a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  92:	48 89 10             	mov    %rdx,(%rax)
  95:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  99:	48 8b 00             	mov    (%rax),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZN4QMapI7QStringhE13detach_helperEv+0xa4>
  a4:	90                   	nop
  a5:	c9                   	leaveq 
  a6:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapNodeI7QStringhE10lowerBoundERKS0_:

0000000000000000 <_ZN8QMapNodeI7QStringhE10lowerBoundERKS0_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  18:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  1f:	00 
  20:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  25:	74 4a                	je     71 <_ZN8QMapNodeI7QStringhE10lowerBoundERKS0_+0x71>
  27:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QString script = *str;
  2b:	48 8d 50 18          	lea    0x18(%rax),%rdx
  2f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  33:	48 89 c6             	mov    %rax,%rsi
  36:	48 89 d7             	mov    %rdx,%rdi
  39:	e8 00 00 00 00       	callq  3e <_ZN8QMapNodeI7QStringhE10lowerBoundERKS0_+0x3e>
  3e:	83 f0 01             	xor    $0x1,%eax
  41:	84 c0                	test   %al,%al
    QString StepArgs;
  43:	74 1a                	je     5f <_ZN8QMapNodeI7QStringhE10lowerBoundERKS0_+0x5f>
  45:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  49:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  4d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 c7             	mov    %rax,%rdi
  54:	e8 00 00 00 00       	callq  59 <_ZN8QMapNodeI7QStringhE10lowerBoundERKS0_+0x59>
  59:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  5d:	eb c1                	jmp    20 <_ZN8QMapNodeI7QStringhE10lowerBoundERKS0_+0x20>
  5f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  63:	48 89 c7             	mov    %rax,%rdi
  66:	e8 00 00 00 00       	callq  6b <_ZN8QMapNodeI7QStringhE10lowerBoundERKS0_+0x6b>
  6b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  6f:	eb af                	jmp    20 <_ZN8QMapNodeI7QStringhE10lowerBoundERKS0_+0x20>
  71:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  75:	c9                   	leaveq 
  76:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapIhhE13detach_helperEv:

0000000000000000 <_ZN4QMapIhhE13detach_helperEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN4QMapIhhE13detach_helperEv+0x11>
  11:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  19:	48 8b 00             	mov    (%rax),%rax
  1c:	48 8b 40 10          	mov    0x10(%rax),%rax
  20:	48 85 c0             	test   %rax,%rax
  23:	74 40                	je     65 <_ZN4QMapIhhE13detach_helperEv+0x65>
  25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  29:	48 8b 00             	mov    (%rax),%rax
  2c:	48 8b 40 10          	mov    0x10(%rax),%rax
  30:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  34:	48 89 d6             	mov    %rdx,%rsi
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	e8 00 00 00 00       	callq  3f <_ZN4QMapIhhE13detach_helperEv+0x3f>
  3f:	48 89 c2             	mov    %rax,%rdx
    QString StepArgs;
  42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  46:	48 89 50 10          	mov    %rdx,0x10(%rax)
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	48 8d 50 08          	lea    0x8(%rax),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 8b 40 10          	mov    0x10(%rax),%rax
  5a:	48 89 d6             	mov    %rdx,%rsi
  5d:	48 89 c7             	mov    %rax,%rdi
  60:	e8 00 00 00 00       	callq  65 <_ZN4QMapIhhE13detach_helperEv+0x65>
  65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  69:	48 8b 00             	mov    (%rax),%rax
  6c:	48 89 c7             	mov    %rax,%rdi
  6f:	e8 00 00 00 00       	callq  74 <_ZN4QMapIhhE13detach_helperEv+0x74>
  74:	83 f0 01             	xor    $0x1,%eax
  77:	84 c0                	test   %al,%al
  79:	74 0f                	je     8a <_ZN4QMapIhhE13detach_helperEv+0x8a>
  7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7f:	48 8b 00             	mov    (%rax),%rax
  82:	48 89 c7             	mov    %rax,%rdi
  85:	e8 00 00 00 00       	callq  8a <_ZN4QMapIhhE13detach_helperEv+0x8a>
    QR.setMinimal(false);
  8a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  92:	48 89 10             	mov    %rdx,(%rax)
  95:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  99:	48 8b 00             	mov    (%rax),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZN4QMapIhhE13detach_helperEv+0xa4>
  a4:	90                   	nop
  a5:	c9                   	leaveq 
  a6:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapNodeIhhE10lowerBoundERKh:

0000000000000000 <_ZN8QMapNodeIhhE10lowerBoundERKh>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  18:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  1f:	00 
  20:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  25:	74 4a                	je     71 <_ZN8QMapNodeIhhE10lowerBoundERKh+0x71>
  27:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QString script = *str;
  2b:	48 8d 50 18          	lea    0x18(%rax),%rdx
  2f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  33:	48 89 c6             	mov    %rax,%rsi
  36:	48 89 d7             	mov    %rdx,%rdi
  39:	e8 00 00 00 00       	callq  3e <_ZN8QMapNodeIhhE10lowerBoundERKh+0x3e>
  3e:	83 f0 01             	xor    $0x1,%eax
  41:	84 c0                	test   %al,%al
    QString StepArgs;
  43:	74 1a                	je     5f <_ZN8QMapNodeIhhE10lowerBoundERKh+0x5f>
  45:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  49:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  4d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 c7             	mov    %rax,%rdi
  54:	e8 00 00 00 00       	callq  59 <_ZN8QMapNodeIhhE10lowerBoundERKh+0x59>
  59:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  5d:	eb c1                	jmp    20 <_ZN8QMapNodeIhhE10lowerBoundERKh+0x20>
  5f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  63:	48 89 c7             	mov    %rax,%rdi
  66:	e8 00 00 00 00       	callq  6b <_ZN8QMapNodeIhhE10lowerBoundERKh+0x6b>
  6b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  6f:	eb af                	jmp    20 <_ZN8QMapNodeIhhE10lowerBoundERKh+0x20>
  71:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  75:	c9                   	leaveq 
  76:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI10QByteArrayE9node_copyEPNS1_4NodeES3_S3_:

0000000000000000 <_ZN5QListI10QByteArrayE9node_copyEPNS1_4NodeES3_S3_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 38          	sub    $0x38,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  15:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  19:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  1d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  21:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  25:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString script = *str;
  29:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  2d:	0f 84 8a 00 00 00    	je     bd <_ZN5QListI10QByteArrayE9node_copyEPNS1_4NodeES3_S3_+0xbd>
  33:	4c 8b 65 d8          	mov    -0x28(%rbp),%r12
  37:	4c 89 e6             	mov    %r12,%rsi
  3a:	bf 08 00 00 00       	mov    $0x8,%edi
  3f:	e8 00 00 00 00       	callq  44 <_ZN5QListI10QByteArrayE9node_copyEPNS1_4NodeES3_S3_+0x44>
    QString StepArgs;
  44:	48 89 c3             	mov    %rax,%rbx
  47:	48 85 db             	test   %rbx,%rbx
  4a:	74 0f                	je     5b <_ZN5QListI10QByteArrayE9node_copyEPNS1_4NodeES3_S3_+0x5b>
  4c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  50:	48 89 c6             	mov    %rax,%rsi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 89 df             	mov    %rbx,%rdi
  56:	e8 00 00 00 00       	callq  5b <_ZN5QListI10QByteArrayE9node_copyEPNS1_4NodeES3_S3_+0x5b>
  5b:	48 83 45 d8 08       	addq   $0x8,-0x28(%rbp)
  60:	48 83 45 b0 08       	addq   $0x8,-0x50(%rbp)
  65:	eb be                	jmp    25 <_ZN5QListI10QByteArrayE9node_copyEPNS1_4NodeES3_S3_+0x25>
  67:	49 89 c5             	mov    %rax,%r13
  6a:	4c 89 e6             	mov    %r12,%rsi
  6d:	48 89 df             	mov    %rbx,%rdi
  70:	e8 00 00 00 00       	callq  75 <_ZN5QListI10QByteArrayE9node_copyEPNS1_4NodeES3_S3_+0x75>
  75:	4c 89 e8             	mov    %r13,%rax
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	callq  80 <_ZN5QListI10QByteArrayE9node_copyEPNS1_4NodeES3_S3_+0x80>
  80:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  84:	48 8d 50 f8          	lea    -0x8(%rax),%rdx
  88:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    QR.setMinimal(false);
  8c:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  90:	0f 95 c0             	setne  %al
  93:	84 c0                	test   %al,%al
  95:	74 0e                	je     a5 <_ZN5QListI10QByteArrayE9node_copyEPNS1_4NodeES3_S3_+0xa5>
  97:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9b:	48 89 c7             	mov    %rax,%rdi
  9e:	e8 00 00 00 00       	callq  a3 <_ZN5QListI10QByteArrayE9node_copyEPNS1_4NodeES3_S3_+0xa3>
  a3:	eb db                	jmp    80 <_ZN5QListI10QByteArrayE9node_copyEPNS1_4NodeES3_S3_+0x80>
  a5:	e8 00 00 00 00       	callq  aa <_ZN5QListI10QByteArrayE9node_copyEPNS1_4NodeES3_S3_+0xaa>
  aa:	48 89 c3             	mov    %rax,%rbx
  ad:	e8 00 00 00 00       	callq  b2 <_ZN5QListI10QByteArrayE9node_copyEPNS1_4NodeES3_S3_+0xb2>
  b2:	48 89 d8             	mov    %rbx,%rax
  b5:	48 89 c7             	mov    %rax,%rdi
  b8:	e8 00 00 00 00       	callq  bd <_ZN5QListI10QByteArrayE9node_copyEPNS1_4NodeES3_S3_+0xbd>
  bd:	90                   	nop
        if(i<0) return -1;
  be:	48 83 c4 38          	add    $0x38,%rsp
  c2:	5b                   	pop    %rbx
  c3:	41 5c                	pop    %r12
  c5:	41 5d                	pop    %r13
  c7:	5d                   	pop    %rbp
  c8:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringS0_E13detach_helperEv:

0000000000000000 <_ZN4QMapI7QStringS0_E13detach_helperEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN4QMapI7QStringS0_E13detach_helperEv+0x11>
  11:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  19:	48 8b 00             	mov    (%rax),%rax
  1c:	48 8b 40 10          	mov    0x10(%rax),%rax
  20:	48 85 c0             	test   %rax,%rax
  23:	74 40                	je     65 <_ZN4QMapI7QStringS0_E13detach_helperEv+0x65>
  25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  29:	48 8b 00             	mov    (%rax),%rax
  2c:	48 8b 40 10          	mov    0x10(%rax),%rax
  30:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  34:	48 89 d6             	mov    %rdx,%rsi
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	e8 00 00 00 00       	callq  3f <_ZN4QMapI7QStringS0_E13detach_helperEv+0x3f>
  3f:	48 89 c2             	mov    %rax,%rdx
    QString StepArgs;
  42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  46:	48 89 50 10          	mov    %rdx,0x10(%rax)
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	48 8d 50 08          	lea    0x8(%rax),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 8b 40 10          	mov    0x10(%rax),%rax
  5a:	48 89 d6             	mov    %rdx,%rsi
  5d:	48 89 c7             	mov    %rax,%rdi
  60:	e8 00 00 00 00       	callq  65 <_ZN4QMapI7QStringS0_E13detach_helperEv+0x65>
  65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  69:	48 8b 00             	mov    (%rax),%rax
  6c:	48 89 c7             	mov    %rax,%rdi
  6f:	e8 00 00 00 00       	callq  74 <_ZN4QMapI7QStringS0_E13detach_helperEv+0x74>
  74:	83 f0 01             	xor    $0x1,%eax
  77:	84 c0                	test   %al,%al
  79:	74 0f                	je     8a <_ZN4QMapI7QStringS0_E13detach_helperEv+0x8a>
  7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7f:	48 8b 00             	mov    (%rax),%rax
  82:	48 89 c7             	mov    %rax,%rdi
  85:	e8 00 00 00 00       	callq  8a <_ZN4QMapI7QStringS0_E13detach_helperEv+0x8a>
    QR.setMinimal(false);
  8a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  92:	48 89 10             	mov    %rdx,(%rax)
  95:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  99:	48 8b 00             	mov    (%rax),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZN4QMapI7QStringS0_E13detach_helperEv+0xa4>
  a4:	90                   	nop
  a5:	c9                   	leaveq 
  a6:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataI19QXmlStreamAttributeE4dataEv:

0000000000000000 <_ZN15QTypedArrayDataI19QXmlStreamAttributeE4dataEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN15QTypedArrayDataI19QXmlStreamAttributeE4dataEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapNodeI7QStringiE10lowerBoundERKS0_:

0000000000000000 <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  18:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  1f:	00 
  20:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  25:	74 4a                	je     71 <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_+0x71>
  27:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QString script = *str;
  2b:	48 8d 50 18          	lea    0x18(%rax),%rdx
  2f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  33:	48 89 c6             	mov    %rax,%rsi
  36:	48 89 d7             	mov    %rdx,%rdi
  39:	e8 00 00 00 00       	callq  3e <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_+0x3e>
  3e:	83 f0 01             	xor    $0x1,%eax
  41:	84 c0                	test   %al,%al
    QString StepArgs;
  43:	74 1a                	je     5f <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_+0x5f>
  45:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  49:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  4d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 89 c7             	mov    %rax,%rdi
  54:	e8 00 00 00 00       	callq  59 <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_+0x59>
  59:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  5d:	eb c1                	jmp    20 <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_+0x20>
  5f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  63:	48 89 c7             	mov    %rax,%rdi
  66:	e8 00 00 00 00       	callq  6b <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_+0x6b>
  6b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  6f:	eb af                	jmp    20 <_ZN8QMapNodeI7QStringiE10lowerBoundERKS0_+0x20>
  71:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  75:	c9                   	leaveq 
  76:	c3                   	retq   

Дизассемблирование раздела .text._ZN4QMapI7QStringiE13detach_helperEv:

0000000000000000 <_ZN4QMapI7QStringiE13detach_helperEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN4QMapI7QStringiE13detach_helperEv+0x11>
  11:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  19:	48 8b 00             	mov    (%rax),%rax
  1c:	48 8b 40 10          	mov    0x10(%rax),%rax
  20:	48 85 c0             	test   %rax,%rax
  23:	74 40                	je     65 <_ZN4QMapI7QStringiE13detach_helperEv+0x65>
  25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  29:	48 8b 00             	mov    (%rax),%rax
  2c:	48 8b 40 10          	mov    0x10(%rax),%rax
  30:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  34:	48 89 d6             	mov    %rdx,%rsi
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	e8 00 00 00 00       	callq  3f <_ZN4QMapI7QStringiE13detach_helperEv+0x3f>
  3f:	48 89 c2             	mov    %rax,%rdx
    QString StepArgs;
  42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  46:	48 89 50 10          	mov    %rdx,0x10(%rax)
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	48 8d 50 08          	lea    0x8(%rax),%rdx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 8b 40 10          	mov    0x10(%rax),%rax
  5a:	48 89 d6             	mov    %rdx,%rsi
  5d:	48 89 c7             	mov    %rax,%rdi
  60:	e8 00 00 00 00       	callq  65 <_ZN4QMapI7QStringiE13detach_helperEv+0x65>
  65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  69:	48 8b 00             	mov    (%rax),%rax
  6c:	48 89 c7             	mov    %rax,%rdi
  6f:	e8 00 00 00 00       	callq  74 <_ZN4QMapI7QStringiE13detach_helperEv+0x74>
  74:	83 f0 01             	xor    $0x1,%eax
  77:	84 c0                	test   %al,%al
  79:	74 0f                	je     8a <_ZN4QMapI7QStringiE13detach_helperEv+0x8a>
  7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7f:	48 8b 00             	mov    (%rax),%rax
  82:	48 89 c7             	mov    %rax,%rdi
  85:	e8 00 00 00 00       	callq  8a <_ZN4QMapI7QStringiE13detach_helperEv+0x8a>
    QR.setMinimal(false);
  8a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  92:	48 89 10             	mov    %rdx,(%rax)
  95:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  99:	48 8b 00             	mov    (%rax),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZN4QMapI7QStringiE13detach_helperEv+0xa4>
  a4:	90                   	nop
  a5:	c9                   	leaveq 
  a6:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapNodeI7QStringiE14destroySubTreeEv:

0000000000000000 <_ZN8QMapNodeI7QStringiE14destroySubTreeEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 83 c0 18          	add    $0x18,%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN8QMapNodeI7QStringiE14destroySubTreeEv+0x1c>
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 8b 40 08          	mov    0x8(%rax),%rax
  24:	48 85 c0             	test   %rax,%rax
  27:	74 14                	je     3d <_ZN8QMapNodeI7QStringiE14destroySubTreeEv+0x3d>
    QString script = *str;
  29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2d:	48 89 c7             	mov    %rax,%rdi
  30:	e8 00 00 00 00       	callq  35 <_ZN8QMapNodeI7QStringiE14destroySubTreeEv+0x35>
  35:	48 89 c7             	mov    %rax,%rdi
  38:	e8 00 00 00 00       	callq  3d <_ZN8QMapNodeI7QStringiE14destroySubTreeEv+0x3d>
  3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41:	48 8b 40 10          	mov    0x10(%rax),%rax
    QString StepArgs;
  45:	48 85 c0             	test   %rax,%rax
  48:	74 14                	je     5e <_ZN8QMapNodeI7QStringiE14destroySubTreeEv+0x5e>
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	e8 00 00 00 00       	callq  56 <_ZN8QMapNodeI7QStringiE14destroySubTreeEv+0x56>
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	callq  5e <_ZN8QMapNodeI7QStringiE14destroySubTreeEv+0x5e>
  5e:	90                   	nop
  5f:	c9                   	leaveq 
  60:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashNodeI7QStringiED2Ev:

0000000000000000 <_ZN9QHashNodeI7QStringiED1Ev>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 83 c0 10          	add    $0x10,%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN9QHashNodeI7QStringiED1Ev+0x1c>
  1c:	90                   	nop
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringiE11deleteNode2EPN9QHashData4NodeE:

0000000000000000 <_ZN5QHashI7QStringiE11deleteNode2EPN9QHashData4NodeE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN5QHashI7QStringiE11deleteNode2EPN9QHashData4NodeE+0x18>
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	callq  20 <_ZN5QHashI7QStringiE11deleteNode2EPN9QHashData4NodeE+0x20>
  20:	90                   	nop
  21:	c9                   	leaveq 
  22:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE13detach_helperEv:

0000000000000000 <_ZN5QHashI7QString11QStringListE13detach_helperEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN5QHashI7QString11QStringListE13detach_helperEv+0x11>
  11:	89 c1                	mov    %eax,%ecx
  13:	ba 20 00 00 00       	mov    $0x20,%edx
  18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1c:	48 8b 00             	mov    (%rax),%rax
  1f:	41 89 c8             	mov    %ecx,%r8d
  22:	89 d1                	mov    %edx,%ecx
  24:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 2b <_ZN5QHashI7QString11QStringListE13detach_helperEv+0x2b>
    QString script = *str;
  2b:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 32 <_ZN5QHashI7QString11QStringListE13detach_helperEv+0x32>
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZN5QHashI7QString11QStringListE13detach_helperEv+0x3a>
  3a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString StepArgs;
  42:	48 8b 00             	mov    (%rax),%rax
  45:	48 83 c0 10          	add    $0x10,%rax
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN5QHashI7QString11QStringListE13detach_helperEv+0x51>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	83 f0 01             	xor    $0x1,%eax
  54:	84 c0                	test   %al,%al
  56:	74 16                	je     6e <_ZN5QHashI7QString11QStringListE13detach_helperEv+0x6e>
  58:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5c:	48 8b 10             	mov    (%rax),%rdx
  5f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  63:	48 89 d6             	mov    %rdx,%rsi
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZN5QHashI7QString11QStringListE13detach_helperEv+0x6e>
  6e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  72:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  76:	48 89 10             	mov    %rdx,(%rax)
  79:	90                   	nop
  7a:	c9                   	leaveq 
  7b:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QHashNodeI7QString11QStringListE8same_keyEjRKS0_:

0000000000000000 <_ZNK9QHashNodeI7QString11QStringListE8same_keyEjRKS0_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	8b 40 08             	mov    0x8(%rax),%eax
  1a:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  1d:	75 22                	jne    41 <_ZNK9QHashNodeI7QString11QStringListE8same_keyEjRKS0_+0x41>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 8d 50 10          	lea    0x10(%rax),%rdx
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	48 89 d6             	mov    %rdx,%rsi
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZNK9QHashNodeI7QString11QStringListE8same_keyEjRKS0_+0x36>
  36:	84 c0                	test   %al,%al
  38:	74 07                	je     41 <_ZNK9QHashNodeI7QString11QStringListE8same_keyEjRKS0_+0x41>
  3a:	b8 01 00 00 00       	mov    $0x1,%eax
  3f:	eb 05                	jmp    46 <_ZNK9QHashNodeI7QString11QStringListE8same_keyEjRKS0_+0x46>
  41:	b8 00 00 00 00       	mov    $0x0,%eax
    QString StepArgs;
  46:	c9                   	leaveq 
  47:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE11alignOfNodeEv:

0000000000000000 <_ZN5QHashI7QString11QStringListE11alignOfNodeEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  15:	31 c0                	xor    %eax,%eax
  17:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%rbp)
  1e:	b8 08 00 00 00       	mov    $0x8,%eax
  23:	89 45 f0             	mov    %eax,-0x10(%rbp)
  26:	48 8d 55 f4          	lea    -0xc(%rbp),%rdx
    QString script = *str;
  2a:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  2e:	48 89 d6             	mov    %rdx,%rsi
  31:	48 89 c7             	mov    %rax,%rdi
  34:	e8 00 00 00 00       	callq  39 <_ZN5QHashI7QString11QStringListE11alignOfNodeEv+0x39>
  39:	8b 00                	mov    (%rax),%eax
  3b:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  3f:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  46:	00 00 
    QString StepArgs;
  48:	74 05                	je     4f <_ZN5QHashI7QString11QStringListE11alignOfNodeEv+0x4f>
  4a:	e8 00 00 00 00       	callq  4f <_ZN5QHashI7QString11QStringListE11alignOfNodeEv+0x4f>
  4f:	c9                   	leaveq 
  50:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashNodeI7QString11QStringListEC2ERKS0_RKS1_jPS2_:

0000000000000000 <_ZN9QHashNodeI7QString11QStringListEC1ERKS0_RKS1_jPS2_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  11:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  15:	89 4d d4             	mov    %ecx,-0x2c(%rbp)
  18:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
  1c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  20:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  24:	48 89 10             	mov    %rdx,(%rax)
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QString script = *str;
  2b:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  2e:	89 50 08             	mov    %edx,0x8(%rax)
  31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  35:	48 8d 50 10          	lea    0x10(%rax),%rdx
  39:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  3d:	48 89 c6             	mov    %rax,%rsi
  40:	48 89 d7             	mov    %rdx,%rdi
    QString StepArgs;
  43:	e8 00 00 00 00       	callq  48 <_ZN9QHashNodeI7QString11QStringListEC1ERKS0_RKS1_jPS2_+0x48>
  48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4c:	48 8d 50 18          	lea    0x18(%rax),%rdx
  50:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  54:	48 89 c6             	mov    %rax,%rsi
  57:	48 89 d7             	mov    %rdx,%rdi
  5a:	e8 00 00 00 00       	callq  5f <_ZN9QHashNodeI7QString11QStringListEC1ERKS0_RKS1_jPS2_+0x5f>
  5f:	eb 1e                	jmp    7f <_ZN9QHashNodeI7QString11QStringListEC1ERKS0_RKS1_jPS2_+0x7f>
  61:	48 89 c3             	mov    %rax,%rbx
  64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  68:	48 83 c0 10          	add    $0x10,%rax
  6c:	48 89 c7             	mov    %rax,%rdi
  6f:	e8 00 00 00 00       	callq  74 <_ZN9QHashNodeI7QString11QStringListEC1ERKS0_RKS1_jPS2_+0x74>
  74:	48 89 d8             	mov    %rbx,%rax
  77:	48 89 c7             	mov    %rax,%rdi
  7a:	e8 00 00 00 00       	callq  7f <_ZN9QHashNodeI7QString11QStringListEC1ERKS0_RKS1_jPS2_+0x7f>
  7f:	48 83 c4 38          	add    $0x38,%rsp
  83:	5b                   	pop    %rbx
  84:	5d                   	pop    %rbp
  85:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI6moduleE13detach_helperEv:

0000000000000000 <_ZN5QListI6moduleE13detach_helperEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	8b 50 04             	mov    0x4(%rax),%edx
  16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1a:	89 d6                	mov    %edx,%esi
  1c:	48 89 c7             	mov    %rax,%rdi
  1f:	e8 00 00 00 00       	callq  24 <_ZN5QListI6moduleE13detach_helperEv+0x24>
  24:	90                   	nop
  25:	c9                   	leaveq 
  26:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashNodeI7QStringS0_ED2Ev:

0000000000000000 <_ZN9QHashNodeI7QStringS0_ED1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  11:	48 83 c0 18          	add    $0x18,%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZN9QHashNodeI7QStringS0_ED1Ev+0x1d>
  1d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  21:	48 83 c0 10          	add    $0x10,%rax
  25:	48 89 c7             	mov    %rax,%rdi
  28:	e8 00 00 00 00       	callq  2d <_ZN9QHashNodeI7QStringS0_ED1Ev+0x2d>
    QString script = *str;
  2d:	eb 1e                	jmp    4d <_ZN9QHashNodeI7QStringS0_ED1Ev+0x4d>
  2f:	48 89 c3             	mov    %rax,%rbx
  32:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  36:	48 83 c0 10          	add    $0x10,%rax
  3a:	48 89 c7             	mov    %rax,%rdi
  3d:	e8 00 00 00 00       	callq  42 <_ZN9QHashNodeI7QStringS0_ED1Ev+0x42>
    QString StepArgs;
  42:	48 89 d8             	mov    %rbx,%rax
  45:	48 89 c7             	mov    %rax,%rdi
  48:	e8 00 00 00 00       	callq  4d <_ZN9QHashNodeI7QStringS0_ED1Ev+0x4d>
  4d:	48 83 c4 18          	add    $0x18,%rsp
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	5b                   	pop    %rbx
  52:	5d                   	pop    %rbp
  53:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E11deleteNode2EPN9QHashData4NodeE:

0000000000000000 <_ZN5QHashI7QStringS0_E11deleteNode2EPN9QHashData4NodeE>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN5QHashI7QStringS0_E11deleteNode2EPN9QHashData4NodeE+0x18>
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	callq  20 <_ZN5QHashI7QStringS0_E11deleteNode2EPN9QHashData4NodeE+0x20>
  20:	90                   	nop
  21:	c9                   	leaveq 
  22:	c3                   	retq   

Дизассемблирование раздела .text._ZN8variableD2Ev:

0000000000000000 <_ZN8variableD1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 83 c0 18          	add    $0x18,%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN8variableD1Ev+0x1c>
  1c:	90                   	nop
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI8variableE13node_destructEPNS1_4NodeES3_:

0000000000000000 <_ZN5QListI8variableE13node_destructEPNS1_4NodeES3_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  11:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  15:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  19:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  1d:	74 23                	je     42 <_ZN5QListI8variableE13node_destructEPNS1_4NodeES3_+0x42>
  1f:	48 83 6d d8 08       	subq   $0x8,-0x28(%rbp)
  24:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  28:	48 8b 18             	mov    (%rax),%rbx
    QString script = *str;
  2b:	48 85 db             	test   %rbx,%rbx
  2e:	74 e5                	je     15 <_ZN5QListI8variableE13node_destructEPNS1_4NodeES3_+0x15>
  30:	48 89 df             	mov    %rbx,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN5QListI8variableE13node_destructEPNS1_4NodeES3_+0x38>
  38:	48 89 df             	mov    %rbx,%rdi
  3b:	e8 00 00 00 00       	callq  40 <_ZN5QListI8variableE13node_destructEPNS1_4NodeES3_+0x40>
  40:	eb d3                	jmp    15 <_ZN5QListI8variableE13node_destructEPNS1_4NodeES3_+0x15>
    QString StepArgs;
  42:	90                   	nop
  43:	48 83 c4 28          	add    $0x28,%rsp
  47:	5b                   	pop    %rbx
  48:	5d                   	pop    %rbp
  49:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI6moduleE9node_copyEPNS1_4NodeES3_S3_:

0000000000000000 <_ZN5QListI6moduleE9node_copyEPNS1_4NodeES3_S3_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 54                	push   %r12
   6:	53                   	push   %rbx
   7:	48 83 ec 30          	sub    $0x30,%rsp
   b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   f:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  13:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  17:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  1b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  1f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  27:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
    QString script = *str;
  2b:	0f 84 97 00 00 00    	je     c8 <_ZN5QListI6moduleE9node_copyEPNS1_4NodeES3_S3_+0xc8>
  31:	bf 38 00 00 00       	mov    $0x38,%edi
  36:	e8 00 00 00 00       	callq  3b <_ZN5QListI6moduleE9node_copyEPNS1_4NodeES3_S3_+0x3b>
  3b:	48 89 c3             	mov    %rax,%rbx
  3e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    QString StepArgs;
  42:	48 8b 00             	mov    (%rax),%rax
  45:	48 89 c6             	mov    %rax,%rsi
  48:	48 89 df             	mov    %rbx,%rdi
  4b:	e8 00 00 00 00       	callq  50 <_ZN5QListI6moduleE9node_copyEPNS1_4NodeES3_S3_+0x50>
  50:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  54:	48 89 18             	mov    %rbx,(%rax)
  57:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
  5c:	48 83 45 c0 08       	addq   $0x8,-0x40(%rbp)
  61:	eb c0                	jmp    23 <_ZN5QListI6moduleE9node_copyEPNS1_4NodeES3_S3_+0x23>
  63:	49 89 c4             	mov    %rax,%r12
  66:	48 89 df             	mov    %rbx,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZN5QListI6moduleE9node_copyEPNS1_4NodeES3_S3_+0x6e>
  6e:	4c 89 e0             	mov    %r12,%rax
  71:	eb 00                	jmp    73 <_ZN5QListI6moduleE9node_copyEPNS1_4NodeES3_S3_+0x73>
  73:	48 89 c7             	mov    %rax,%rdi
  76:	e8 00 00 00 00       	callq  7b <_ZN5QListI6moduleE9node_copyEPNS1_4NodeES3_S3_+0x7b>
  7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7f:	48 8d 50 f8          	lea    -0x8(%rax),%rdx
  83:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  87:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
    QR.setMinimal(false);
  8b:	0f 95 c0             	setne  %al
  8e:	84 c0                	test   %al,%al
  90:	74 1e                	je     b0 <_ZN5QListI6moduleE9node_copyEPNS1_4NodeES3_S3_+0xb0>
  92:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  96:	48 8b 18             	mov    (%rax),%rbx
  99:	48 85 db             	test   %rbx,%rbx

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	74 dd                	je     7b <_ZN5QListI6moduleE9node_copyEPNS1_4NodeES3_S3_+0x7b>
  9e:	48 89 df             	mov    %rbx,%rdi
  a1:	e8 00 00 00 00       	callq  a6 <_ZN5QListI6moduleE9node_copyEPNS1_4NodeES3_S3_+0xa6>
  a6:	48 89 df             	mov    %rbx,%rdi
  a9:	e8 00 00 00 00       	callq  ae <_ZN5QListI6moduleE9node_copyEPNS1_4NodeES3_S3_+0xae>
  ae:	eb cb                	jmp    7b <_ZN5QListI6moduleE9node_copyEPNS1_4NodeES3_S3_+0x7b>
  b0:	e8 00 00 00 00       	callq  b5 <_ZN5QListI6moduleE9node_copyEPNS1_4NodeES3_S3_+0xb5>
  b5:	48 89 c3             	mov    %rax,%rbx
  b8:	e8 00 00 00 00       	callq  bd <_ZN5QListI6moduleE9node_copyEPNS1_4NodeES3_S3_+0xbd>
  bd:	48 89 d8             	mov    %rbx,%rax
        if(i<0) return -1;
  c0:	48 89 c7             	mov    %rax,%rdi
  c3:	e8 00 00 00 00       	callq  c8 <_ZN5QListI6moduleE9node_copyEPNS1_4NodeES3_S3_+0xc8>
  c8:	90                   	nop
  c9:	48 83 c4 30          	add    $0x30,%rsp
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	5b                   	pop    %rbx
  ce:	41 5c                	pop    %r12
  d0:	5d                   	pop    %rbp
  d1:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI6moduleE13node_destructEPNS1_4NodeES3_:

0000000000000000 <_ZN5QListI6moduleE13node_destructEPNS1_4NodeES3_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  11:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  15:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  19:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  1d:	74 23                	je     42 <_ZN5QListI6moduleE13node_destructEPNS1_4NodeES3_+0x42>
  1f:	48 83 6d d8 08       	subq   $0x8,-0x28(%rbp)
  24:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  28:	48 8b 18             	mov    (%rax),%rbx
    QString script = *str;
  2b:	48 85 db             	test   %rbx,%rbx
  2e:	74 e5                	je     15 <_ZN5QListI6moduleE13node_destructEPNS1_4NodeES3_+0x15>
  30:	48 89 df             	mov    %rbx,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN5QListI6moduleE13node_destructEPNS1_4NodeES3_+0x38>
  38:	48 89 df             	mov    %rbx,%rdi
  3b:	e8 00 00 00 00       	callq  40 <_ZN5QListI6moduleE13node_destructEPNS1_4NodeES3_+0x40>
  40:	eb d3                	jmp    15 <_ZN5QListI6moduleE13node_destructEPNS1_4NodeES3_+0x15>
    QString StepArgs;
  42:	90                   	nop
  43:	48 83 c4 28          	add    $0x28,%rsp
  47:	5b                   	pop    %rbx
  48:	5d                   	pop    %rbp
  49:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI6moduleE7deallocEPN9QListData4DataE:

0000000000000000 <_ZN5QListI6moduleE7deallocEPN9QListData4DataE>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 8d 50 10          	lea    0x10(%rax),%rdx
  18:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1c:	8b 40 0c             	mov    0xc(%rax),%eax
  1f:	48 98                	cltq   
  21:	48 c1 e0 03          	shl    $0x3,%rax
  25:	48 01 c2             	add    %rax,%rdx
  28:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QString script = *str;
  2c:	48 8d 48 10          	lea    0x10(%rax),%rcx
  30:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  34:	8b 40 08             	mov    0x8(%rax),%eax
  37:	48 98                	cltq   
  39:	48 c1 e0 03          	shl    $0x3,%rax
  3d:	48 01 c1             	add    %rax,%rcx
  40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  44:	48 89 ce             	mov    %rcx,%rsi
  47:	48 89 c7             	mov    %rax,%rdi
  4a:	e8 00 00 00 00       	callq  4f <_ZN5QListI6moduleE7deallocEPN9QListData4DataE+0x4f>
  4f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 89 c7             	mov    %rax,%rdi
  56:	e8 00 00 00 00       	callq  5b <_ZN5QListI6moduleE7deallocEPN9QListData4DataE+0x5b>
  5b:	90                   	nop
  5c:	c9                   	leaveq 
  5d:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI8variableEC2ERKS1_:

0000000000000000 <_ZN5QListI8variableEC1ERKS1_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 54                	push   %r12
   6:	53                   	push   %rbx
   7:	48 83 ec 10          	sub    $0x10,%rsp
   b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  13:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  17:	48 8b 10             	mov    (%rax),%rdx
  1a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1e:	48 89 10             	mov    %rdx,(%rax)
  21:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  25:	48 8b 00             	mov    (%rax),%rax
  28:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  2b:	e8 00 00 00 00       	callq  30 <_ZN5QListI8variableEC1ERKS1_+0x30>
  30:	83 f0 01             	xor    $0x1,%eax
  33:	84 c0                	test   %al,%al
  35:	0f 84 99 00 00 00    	je     d4 <_ZN5QListI8variableEC1ERKS1_+0xd4>
  3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3f:	48 8b 00             	mov    (%rax),%rax
    QString StepArgs;
  42:	8b 50 04             	mov    0x4(%rax),%edx
  45:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  49:	89 d6                	mov    %edx,%esi
  4b:	48 89 c7             	mov    %rax,%rdi
  4e:	e8 00 00 00 00       	callq  53 <_ZN5QListI8variableEC1ERKS1_+0x53>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  57:	48 89 c7             	mov    %rax,%rdi
  5a:	e8 00 00 00 00       	callq  5f <_ZN5QListI8variableEC1ERKS1_+0x5f>
  5f:	49 89 c4             	mov    %rax,%r12
  62:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZN5QListI8variableEC1ERKS1_+0x6e>
  6e:	48 89 c3             	mov    %rax,%rbx
  71:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  75:	48 89 c7             	mov    %rax,%rdi
  78:	e8 00 00 00 00       	callq  7d <_ZN5QListI8variableEC1ERKS1_+0x7d>
  7d:	48 89 c6             	mov    %rax,%rsi
  80:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  84:	4c 89 e1             	mov    %r12,%rcx
  87:	48 89 da             	mov    %rbx,%rdx
    QR.setMinimal(false);
  8a:	48 89 c7             	mov    %rax,%rdi
  8d:	e8 00 00 00 00       	callq  92 <_ZN5QListI8variableEC1ERKS1_+0x92>
  92:	eb 40                	jmp    d4 <_ZN5QListI8variableEC1ERKS1_+0xd4>
  94:	48 89 c7             	mov    %rax,%rdi
  97:	e8 00 00 00 00       	callq  9c <_ZN5QListI8variableEC1ERKS1_+0x9c>

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a0:	48 8b 00             	mov    (%rax),%rax
  a3:	48 89 c7             	mov    %rax,%rdi
  a6:	e8 00 00 00 00       	callq  ab <_ZN5QListI8variableEC1ERKS1_+0xab>
  ab:	e8 00 00 00 00       	callq  b0 <_ZN5QListI8variableEC1ERKS1_+0xb0>
  b0:	48 89 c3             	mov    %rax,%rbx
  b3:	e8 00 00 00 00       	callq  b8 <_ZN5QListI8variableEC1ERKS1_+0xb8>
  b8:	eb 03                	jmp    bd <_ZN5QListI8variableEC1ERKS1_+0xbd>
  ba:	48 89 c3             	mov    %rax,%rbx
  bd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
        if(i<0) return -1;
  c1:	48 89 c7             	mov    %rax,%rdi
  c4:	e8 00 00 00 00       	callq  c9 <_ZN5QListI8variableEC1ERKS1_+0xc9>
  c9:	48 89 d8             	mov    %rbx,%rax
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cc:	48 89 c7             	mov    %rax,%rdi
  cf:	e8 00 00 00 00       	callq  d4 <_ZN5QListI8variableEC1ERKS1_+0xd4>
  d4:	90                   	nop
  d5:	48 83 c4 10          	add    $0x10,%rsp
  d9:	5b                   	pop    %rbx
  da:	41 5c                	pop    %r12
  dc:	5d                   	pop    %rbp

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	c3                   	retq   

Дизассемблирование раздела .text._ZSt4swapIPN9QListData4DataEEvRT_S4_:

0000000000000000 <_ZSt4swapIPN9QListData4DataEEvRT_S4_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   8:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  17:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  1b:	48 8b 10             	mov    (%rax),%rdx
  1e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  22:	48 89 10             	mov    %rdx,(%rax)
  25:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    QString script = *str;
  29:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  2d:	48 89 10             	mov    %rdx,(%rax)
  30:	90                   	nop
  31:	5d                   	pop    %rbp
  32:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv:

0000000000000000 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 28          	sub    $0x28,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  15:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv+0x21>
  21:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  25:	4c 8b 65 c0          	mov    -0x40(%rbp),%r12
    QString script = *str;
  29:	4c 89 e6             	mov    %r12,%rsi
  2c:	bf 20 00 00 00       	mov    $0x20,%edi
  31:	e8 00 00 00 00       	callq  36 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv+0x36>
  36:	48 89 c3             	mov    %rax,%rbx
  39:	48 85 db             	test   %rbx,%rbx
  3c:	74 42                	je     80 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv+0x80>
  3e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString StepArgs;
  42:	8b 40 08             	mov    0x8(%rax),%eax
  45:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  49:	48 83 c2 18          	add    $0x18,%rdx
  4d:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8d 71 10          	lea    0x10(%rcx),%rsi
  55:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  5b:	89 c1                	mov    %eax,%ecx
  5d:	48 89 df             	mov    %rbx,%rdi
  60:	e8 00 00 00 00       	callq  65 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv+0x65>
  65:	eb 19                	jmp    80 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv+0x80>
  67:	49 89 c5             	mov    %rax,%r13
  6a:	4c 89 e6             	mov    %r12,%rsi
  6d:	48 89 df             	mov    %rbx,%rdi
  70:	e8 00 00 00 00       	callq  75 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv+0x75>
  75:	4c 89 e8             	mov    %r13,%rax
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	callq  80 <_ZN5QHashI7QStringS0_E13duplicateNodeEPN9QHashData4NodeEPv+0x80>
  80:	90                   	nop
  81:	48 83 c4 28          	add    $0x28,%rsp
  85:	5b                   	pop    %rbx
  86:	41 5c                	pop    %r12
  88:	41 5d                	pop    %r13
    QR.setMinimal(false);
  8a:	5d                   	pop    %rbp
  8b:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E8freeDataEP9QHashData:

0000000000000000 <_ZN5QHashI7QStringS0_E8freeDataEP9QHashData>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 1b <_ZN5QHashI7QStringS0_E8freeDataEP9QHashData+0x1b>
  1b:	48 89 d6             	mov    %rdx,%rsi
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZN5QHashI7QStringS0_E8freeDataEP9QHashData+0x26>
  26:	90                   	nop
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI7QStringE13detach_helperEi:

0000000000000000 <_ZN5QListI7QStringE13detach_helperEi>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  10:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN5QListI7QStringE13detach_helperEi+0x1c>
  1c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  20:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  24:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  27:	89 d6                	mov    %edx,%esi
    QString script = *str;
  29:	48 89 c7             	mov    %rax,%rdi
  2c:	e8 00 00 00 00       	callq  31 <_ZN5QListI7QStringE13detach_helperEi+0x31>
  31:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  35:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  39:	48 89 c7             	mov    %rax,%rdi
  3c:	e8 00 00 00 00       	callq  41 <_ZN5QListI7QStringE13detach_helperEi+0x41>
  41:	48 89 c3             	mov    %rax,%rbx
    QString StepArgs;
  44:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  48:	48 89 c7             	mov    %rax,%rdi
  4b:	e8 00 00 00 00       	callq  50 <_ZN5QListI7QStringE13detach_helperEi+0x50>
  50:	48 89 c6             	mov    %rax,%rsi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  57:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  5b:	48 89 d1             	mov    %rdx,%rcx
  5e:	48 89 da             	mov    %rbx,%rdx
  61:	48 89 c7             	mov    %rax,%rdi
  64:	e8 00 00 00 00       	callq  69 <_ZN5QListI7QStringE13detach_helperEi+0x69>
  69:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  6d:	48 89 c7             	mov    %rax,%rdi
  70:	e8 00 00 00 00       	callq  75 <_ZN5QListI7QStringE13detach_helperEi+0x75>
  75:	83 f0 01             	xor    $0x1,%eax
  78:	84 c0                	test   %al,%al
  7a:	74 4c                	je     c8 <_ZN5QListI7QStringE13detach_helperEi+0xc8>
  7c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  84:	48 89 d6             	mov    %rdx,%rsi
  87:	48 89 c7             	mov    %rax,%rdi
    QR.setMinimal(false);
  8a:	e8 00 00 00 00       	callq  8f <_ZN5QListI7QStringE13detach_helperEi+0x8f>
  8f:	eb 37                	jmp    c8 <_ZN5QListI7QStringE13detach_helperEi+0xc8>
  91:	48 89 c7             	mov    %rax,%rdi
  94:	e8 00 00 00 00       	callq  99 <_ZN5QListI7QStringE13detach_helperEi+0x99>
  99:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9d:	48 89 c7             	mov    %rax,%rdi
  a0:	e8 00 00 00 00       	callq  a5 <_ZN5QListI7QStringE13detach_helperEi+0xa5>
  a5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  ad:	48 89 10             	mov    %rdx,(%rax)
  b0:	e8 00 00 00 00       	callq  b5 <_ZN5QListI7QStringE13detach_helperEi+0xb5>
  b5:	48 89 c3             	mov    %rax,%rbx
  b8:	e8 00 00 00 00       	callq  bd <_ZN5QListI7QStringE13detach_helperEi+0xbd>
  bd:	48 89 d8             	mov    %rbx,%rax
        if(i<0) return -1;
  c0:	48 89 c7             	mov    %rax,%rdi
  c3:	e8 00 00 00 00       	callq  c8 <_ZN5QListI7QStringE13detach_helperEi+0xc8>
  c8:	90                   	nop
  c9:	48 83 c4 28          	add    $0x28,%rsp
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	5b                   	pop    %rbx
  ce:	5d                   	pop    %rbp
  cf:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringhE6createEv:

0000000000000000 <_ZN8QMapDataI7QStringhE6createEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	e8 00 00 00 00       	callq  9 <_ZN8QMapDataI7QStringhE6createEv+0x9>
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE:

0000000000000000 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 8d 50 20          	lea    0x20(%rax),%rdx
  18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1c:	48 8d 70 18          	lea    0x18(%rax),%rsi
  20:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  24:	41 b8 00 00 00 00    	mov    $0x0,%r8d
    QString script = *str;
  2a:	b9 00 00 00 00       	mov    $0x0,%ecx
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0x37>
  37:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3f:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0x47>
  47:	89 c2                	mov    %eax,%edx
  49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4d:	89 d6                	mov    %edx,%esi
  4f:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	e8 00 00 00 00       	callq  57 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0x57>
  57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5b:	48 8b 40 08          	mov    0x8(%rax),%rax
  5f:	48 85 c0             	test   %rax,%rax
  62:	74 42                	je     a6 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0xa6>
  64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  68:	48 89 c7             	mov    %rax,%rdi
  6b:	e8 00 00 00 00       	callq  70 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0x70>
  70:	48 89 c2             	mov    %rax,%rdx
  73:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  77:	48 89 c6             	mov    %rax,%rsi
  7a:	48 89 d7             	mov    %rdx,%rdi
  7d:	e8 00 00 00 00       	callq  82 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0x82>
  82:	48 89 c2             	mov    %rax,%rdx
  85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  89:	48 89 50 08          	mov    %rdx,0x8(%rax)
    QR.setMinimal(false);
  8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  91:	48 8b 40 08          	mov    0x8(%rax),%rax
  95:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  99:	48 89 d6             	mov    %rdx,%rsi

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0xa4>
  a4:	eb 0c                	jmp    b2 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0xb2>
  a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  aa:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  b1:	00 
  b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b6:	48 8b 40 10          	mov    0x10(%rax),%rax
  ba:	48 85 c0             	test   %rax,%rax
  bd:	74 42                	je     101 <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0x101>
        if(i<0) return -1;
  bf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  c3:	48 89 c7             	mov    %rax,%rdi
  c6:	e8 00 00 00 00       	callq  cb <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0xcb>
  cb:	48 89 c2             	mov    %rax,%rdx
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  ce:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  d2:	48 89 c6             	mov    %rax,%rsi
  d5:	48 89 d7             	mov    %rdx,%rdi
  d8:	e8 00 00 00 00       	callq  dd <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0xdd>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	48 89 c2             	mov    %rax,%rdx
  e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  e4:	48 89 50 10          	mov    %rdx,0x10(%rax)
  e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  ec:	48 8b 40 10          	mov    0x10(%rax),%rax
  f0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  f4:	48 89 d6             	mov    %rdx,%rsi
  f7:	48 89 c7             	mov    %rax,%rdi
  fa:	e8 00 00 00 00       	callq  ff <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0xff>
  ff:	eb 0c                	jmp    10d <_ZNK8QMapNodeI7QStringhE4copyEP8QMapDataIS0_hE+0x10d>
 101:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 105:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
 10c:	00 
 10d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 111:	c9                   	leaveq 
 112:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringhE7destroyEv:

0000000000000000 <_ZN8QMapDataI7QStringhE7destroyEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN8QMapDataI7QStringhE7destroyEv+0x18>
  18:	48 85 c0             	test   %rax,%rax
  1b:	0f 95 c0             	setne  %al
  1e:	84 c0                	test   %al,%al
  20:	74 30                	je     52 <_ZN8QMapDataI7QStringhE7destroyEv+0x52>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZN8QMapDataI7QStringhE7destroyEv+0x2e>
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN8QMapDataI7QStringhE7destroyEv+0x36>
  36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3a:	48 8b 48 10          	mov    0x10(%rax),%rcx
  3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  42:	ba 08 00 00 00       	mov    $0x8,%edx
  47:	48 89 ce             	mov    %rcx,%rsi
  4a:	48 89 c7             	mov    %rax,%rdi
  4d:	e8 00 00 00 00       	callq  52 <_ZN8QMapDataI7QStringhE7destroyEv+0x52>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	callq  5e <_ZN8QMapDataI7QStringhE7destroyEv+0x5e>
  5e:	90                   	nop
  5f:	c9                   	leaveq 
  60:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataIhhE6createEv:

0000000000000000 <_ZN8QMapDataIhhE6createEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	e8 00 00 00 00       	callq  9 <_ZN8QMapDataIhhE6createEv+0x9>
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE:

0000000000000000 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 8d 50 19          	lea    0x19(%rax),%rdx
  18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1c:	48 8d 70 18          	lea    0x18(%rax),%rsi
  20:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  24:	41 b8 00 00 00 00    	mov    $0x0,%r8d
    QString script = *str;
  2a:	b9 00 00 00 00       	mov    $0x0,%ecx
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0x37>
  37:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3f:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0x47>
  47:	89 c2                	mov    %eax,%edx
  49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4d:	89 d6                	mov    %edx,%esi
  4f:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	e8 00 00 00 00       	callq  57 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0x57>
  57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5b:	48 8b 40 08          	mov    0x8(%rax),%rax
  5f:	48 85 c0             	test   %rax,%rax
  62:	74 42                	je     a6 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0xa6>
  64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  68:	48 89 c7             	mov    %rax,%rdi
  6b:	e8 00 00 00 00       	callq  70 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0x70>
  70:	48 89 c2             	mov    %rax,%rdx
  73:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  77:	48 89 c6             	mov    %rax,%rsi
  7a:	48 89 d7             	mov    %rdx,%rdi
  7d:	e8 00 00 00 00       	callq  82 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0x82>
  82:	48 89 c2             	mov    %rax,%rdx
  85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  89:	48 89 50 08          	mov    %rdx,0x8(%rax)
    QR.setMinimal(false);
  8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  91:	48 8b 40 08          	mov    0x8(%rax),%rax
  95:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  99:	48 89 d6             	mov    %rdx,%rsi

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0xa4>
  a4:	eb 0c                	jmp    b2 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0xb2>
  a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  aa:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  b1:	00 
  b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b6:	48 8b 40 10          	mov    0x10(%rax),%rax
  ba:	48 85 c0             	test   %rax,%rax
  bd:	74 42                	je     101 <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0x101>
        if(i<0) return -1;
  bf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  c3:	48 89 c7             	mov    %rax,%rdi
  c6:	e8 00 00 00 00       	callq  cb <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0xcb>
  cb:	48 89 c2             	mov    %rax,%rdx
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  ce:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  d2:	48 89 c6             	mov    %rax,%rsi
  d5:	48 89 d7             	mov    %rdx,%rdi
  d8:	e8 00 00 00 00       	callq  dd <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0xdd>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	48 89 c2             	mov    %rax,%rdx
  e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  e4:	48 89 50 10          	mov    %rdx,0x10(%rax)
  e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  ec:	48 8b 40 10          	mov    0x10(%rax),%rax
  f0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  f4:	48 89 d6             	mov    %rdx,%rsi
  f7:	48 89 c7             	mov    %rax,%rdi
  fa:	e8 00 00 00 00       	callq  ff <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0xff>
  ff:	eb 0c                	jmp    10d <_ZNK8QMapNodeIhhE4copyEP8QMapDataIhhE+0x10d>
 101:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 105:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
 10c:	00 
 10d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 111:	c9                   	leaveq 
 112:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataIhhE7destroyEv:

0000000000000000 <_ZN8QMapDataIhhE7destroyEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN8QMapDataIhhE7destroyEv+0x18>
  18:	48 85 c0             	test   %rax,%rax
  1b:	0f 95 c0             	setne  %al
  1e:	84 c0                	test   %al,%al
  20:	74 30                	je     52 <_ZN8QMapDataIhhE7destroyEv+0x52>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZN8QMapDataIhhE7destroyEv+0x2e>
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN8QMapDataIhhE7destroyEv+0x36>
  36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3a:	48 8b 48 10          	mov    0x10(%rax),%rcx
  3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  42:	ba 08 00 00 00       	mov    $0x8,%edx
  47:	48 89 ce             	mov    %rcx,%rsi
  4a:	48 89 c7             	mov    %rax,%rdi
  4d:	e8 00 00 00 00       	callq  52 <_ZN8QMapDataIhhE7destroyEv+0x52>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	callq  5e <_ZN8QMapDataIhhE7destroyEv+0x5e>
  5e:	90                   	nop
  5f:	c9                   	leaveq 
  60:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringS0_E6createEv:

0000000000000000 <_ZN8QMapDataI7QStringS0_E6createEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	e8 00 00 00 00       	callq  9 <_ZN8QMapDataI7QStringS0_E6createEv+0x9>
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E:

0000000000000000 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 8d 50 20          	lea    0x20(%rax),%rdx
  18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1c:	48 8d 70 18          	lea    0x18(%rax),%rsi
  20:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  24:	41 b8 00 00 00 00    	mov    $0x0,%r8d
    QString script = *str;
  2a:	b9 00 00 00 00       	mov    $0x0,%ecx
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0x37>
  37:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3f:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0x47>
  47:	89 c2                	mov    %eax,%edx
  49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4d:	89 d6                	mov    %edx,%esi
  4f:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	e8 00 00 00 00       	callq  57 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0x57>
  57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5b:	48 8b 40 08          	mov    0x8(%rax),%rax
  5f:	48 85 c0             	test   %rax,%rax
  62:	74 42                	je     a6 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0xa6>
  64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  68:	48 89 c7             	mov    %rax,%rdi
  6b:	e8 00 00 00 00       	callq  70 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0x70>
  70:	48 89 c2             	mov    %rax,%rdx
  73:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  77:	48 89 c6             	mov    %rax,%rsi
  7a:	48 89 d7             	mov    %rdx,%rdi
  7d:	e8 00 00 00 00       	callq  82 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0x82>
  82:	48 89 c2             	mov    %rax,%rdx
  85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  89:	48 89 50 08          	mov    %rdx,0x8(%rax)
    QR.setMinimal(false);
  8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  91:	48 8b 40 08          	mov    0x8(%rax),%rax
  95:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  99:	48 89 d6             	mov    %rdx,%rsi

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0xa4>
  a4:	eb 0c                	jmp    b2 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0xb2>
  a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  aa:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  b1:	00 
  b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b6:	48 8b 40 10          	mov    0x10(%rax),%rax
  ba:	48 85 c0             	test   %rax,%rax
  bd:	74 42                	je     101 <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0x101>
        if(i<0) return -1;
  bf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  c3:	48 89 c7             	mov    %rax,%rdi
  c6:	e8 00 00 00 00       	callq  cb <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0xcb>
  cb:	48 89 c2             	mov    %rax,%rdx
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  ce:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  d2:	48 89 c6             	mov    %rax,%rsi
  d5:	48 89 d7             	mov    %rdx,%rdi
  d8:	e8 00 00 00 00       	callq  dd <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0xdd>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	48 89 c2             	mov    %rax,%rdx
  e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  e4:	48 89 50 10          	mov    %rdx,0x10(%rax)
  e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  ec:	48 8b 40 10          	mov    0x10(%rax),%rax
  f0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  f4:	48 89 d6             	mov    %rdx,%rsi
  f7:	48 89 c7             	mov    %rax,%rdi
  fa:	e8 00 00 00 00       	callq  ff <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0xff>
  ff:	eb 0c                	jmp    10d <_ZNK8QMapNodeI7QStringS0_E4copyEP8QMapDataIS0_S0_E+0x10d>
 101:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 105:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
 10c:	00 
 10d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 111:	c9                   	leaveq 
 112:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringS0_E7destroyEv:

0000000000000000 <_ZN8QMapDataI7QStringS0_E7destroyEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN8QMapDataI7QStringS0_E7destroyEv+0x18>
  18:	48 85 c0             	test   %rax,%rax
  1b:	0f 95 c0             	setne  %al
  1e:	84 c0                	test   %al,%al
  20:	74 30                	je     52 <_ZN8QMapDataI7QStringS0_E7destroyEv+0x52>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 89 c7             	mov    %rax,%rdi
    QString script = *str;
  29:	e8 00 00 00 00       	callq  2e <_ZN8QMapDataI7QStringS0_E7destroyEv+0x2e>
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN8QMapDataI7QStringS0_E7destroyEv+0x36>
  36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3a:	48 8b 48 10          	mov    0x10(%rax),%rcx
  3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString StepArgs;
  42:	ba 08 00 00 00       	mov    $0x8,%edx
  47:	48 89 ce             	mov    %rcx,%rsi
  4a:	48 89 c7             	mov    %rax,%rdi
  4d:	e8 00 00 00 00       	callq  52 <_ZN8QMapDataI7QStringS0_E7destroyEv+0x52>
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	callq  5e <_ZN8QMapDataI7QStringS0_E7destroyEv+0x5e>
  5e:	90                   	nop
  5f:	c9                   	leaveq 
  60:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapDataI7QStringiE6createEv:

0000000000000000 <_ZN8QMapDataI7QStringiE6createEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	e8 00 00 00 00       	callq  9 <_ZN8QMapDataI7QStringiE6createEv+0x9>
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE:

0000000000000000 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 8d 50 20          	lea    0x20(%rax),%rdx
  18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1c:	48 8d 70 18          	lea    0x18(%rax),%rsi
  20:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  24:	41 b8 00 00 00 00    	mov    $0x0,%r8d
    QString script = *str;
  2a:	b9 00 00 00 00       	mov    $0x0,%ecx
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0x37>
  37:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3f:	48 89 c7             	mov    %rax,%rdi
    QString StepArgs;
  42:	e8 00 00 00 00       	callq  47 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0x47>
  47:	89 c2                	mov    %eax,%edx
  49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4d:	89 d6                	mov    %edx,%esi
  4f:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  52:	e8 00 00 00 00       	callq  57 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0x57>
  57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5b:	48 8b 40 08          	mov    0x8(%rax),%rax
  5f:	48 85 c0             	test   %rax,%rax
  62:	74 42                	je     a6 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0xa6>
  64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  68:	48 89 c7             	mov    %rax,%rdi
  6b:	e8 00 00 00 00       	callq  70 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0x70>
  70:	48 89 c2             	mov    %rax,%rdx
  73:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  77:	48 89 c6             	mov    %rax,%rsi
  7a:	48 89 d7             	mov    %rdx,%rdi
  7d:	e8 00 00 00 00       	callq  82 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0x82>
  82:	48 89 c2             	mov    %rax,%rdx
  85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  89:	48 89 50 08          	mov    %rdx,0x8(%rax)
    QR.setMinimal(false);
  8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  91:	48 8b 40 08          	mov    0x8(%rax),%rax
  95:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  99:	48 89 d6             	mov    %rdx,%rsi

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	callq  a4 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0xa4>
  a4:	eb 0c                	jmp    b2 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0xb2>
  a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  aa:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  b1:	00 
  b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b6:	48 8b 40 10          	mov    0x10(%rax),%rax
  ba:	48 85 c0             	test   %rax,%rax
  bd:	74 42                	je     101 <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0x101>
        if(i<0) return -1;
  bf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  c3:	48 89 c7             	mov    %rax,%rdi
  c6:	e8 00 00 00 00       	callq  cb <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0xcb>
  cb:	48 89 c2             	mov    %rax,%rdx
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  ce:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  d2:	48 89 c6             	mov    %rax,%rsi
  d5:	48 89 d7             	mov    %rdx,%rdi
  d8:	e8 00 00 00 00       	callq  dd <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0xdd>

    while(1==1)
    {
        int i = QR.indexIn(script);
        if(i<0) return -1;
        StepArgs = QR.cap(0);
  dd:	48 89 c2             	mov    %rax,%rdx
  e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  e4:	48 89 50 10          	mov    %rdx,0x10(%rax)
  e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  ec:	48 8b 40 10          	mov    0x10(%rax),%rax
  f0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  f4:	48 89 d6             	mov    %rdx,%rsi
  f7:	48 89 c7             	mov    %rax,%rdi
  fa:	e8 00 00 00 00       	callq  ff <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0xff>
  ff:	eb 0c                	jmp    10d <_ZNK8QMapNodeI7QStringiE4copyEP8QMapDataIS0_iE+0x10d>
 101:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 105:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
 10c:	00 
 10d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 111:	c9                   	leaveq 
 112:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringiE8concreteEPN9QHashData4NodeE:

0000000000000000 <_ZN5QHashI7QStringiE8concreteEPN9QHashData4NodeE>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	5d                   	pop    %rbp
   d:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv:

0000000000000000 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 28          	sub    $0x28,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  15:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv+0x21>
  21:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  25:	4c 8b 65 c0          	mov    -0x40(%rbp),%r12
    QString script = *str;
  29:	4c 89 e6             	mov    %r12,%rsi
  2c:	bf 20 00 00 00       	mov    $0x20,%edi
  31:	e8 00 00 00 00       	callq  36 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv+0x36>
  36:	48 89 c3             	mov    %rax,%rbx
  39:	48 85 db             	test   %rbx,%rbx
  3c:	74 42                	je     80 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv+0x80>
  3e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    QString StepArgs;
  42:	8b 40 08             	mov    0x8(%rax),%eax
  45:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  49:	48 83 c2 18          	add    $0x18,%rdx
  4d:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8d 71 10          	lea    0x10(%rcx),%rsi
  55:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  5b:	89 c1                	mov    %eax,%ecx
  5d:	48 89 df             	mov    %rbx,%rdi
  60:	e8 00 00 00 00       	callq  65 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv+0x65>
  65:	eb 19                	jmp    80 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv+0x80>
  67:	49 89 c5             	mov    %rax,%r13
  6a:	4c 89 e6             	mov    %r12,%rsi
  6d:	48 89 df             	mov    %rbx,%rdi
  70:	e8 00 00 00 00       	callq  75 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv+0x75>
  75:	4c 89 e8             	mov    %r13,%rax
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	callq  80 <_ZN5QHashI7QString11QStringListE13duplicateNodeEPN9QHashData4NodeEPv+0x80>
  80:	90                   	nop
  81:	48 83 c4 28          	add    $0x28,%rsp
  85:	5b                   	pop    %rbx
  86:	41 5c                	pop    %r12
  88:	41 5d                	pop    %r13
    QR.setMinimal(false);
  8a:	5d                   	pop    %rbp
  8b:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashNodeI7QString11QStringListED2Ev:

0000000000000000 <_ZN9QHashNodeI7QString11QStringListED1Ev>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  11:	48 83 c0 18          	add    $0x18,%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZN9QHashNodeI7QString11QStringListED1Ev+0x1d>
  1d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  21:	48 83 c0 10          	add    $0x10,%rax
  25:	48 89 c7             	mov    %rax,%rdi
  28:	e8 00 00 00 00       	callq  2d <_ZN9QHashNodeI7QString11QStringListED1Ev+0x2d>
    QString script = *str;
  2d:	eb 1e                	jmp    4d <_ZN9QHashNodeI7QString11QStringListED1Ev+0x4d>
  2f:	48 89 c3             	mov    %rax,%rbx
  32:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  36:	48 83 c0 10          	add    $0x10,%rax
  3a:	48 89 c7             	mov    %rax,%rdi
  3d:	e8 00 00 00 00       	callq  42 <_ZN9QHashNodeI7QString11QStringListED1Ev+0x42>
    QString StepArgs;
  42:	48 89 d8             	mov    %rbx,%rax
  45:	48 89 c7             	mov    %rax,%rdi
  48:	e8 00 00 00 00       	callq  4d <_ZN9QHashNodeI7QString11QStringListED1Ev+0x4d>
  4d:	48 83 c4 18          	add    $0x18,%rsp
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	5b                   	pop    %rbx
  52:	5d                   	pop    %rbp
  53:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE11deleteNode2EPN9QHashData4NodeE:

0000000000000000 <_ZN5QHashI7QString11QStringListE11deleteNode2EPN9QHashData4NodeE>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN5QHashI7QString11QStringListE11deleteNode2EPN9QHashData4NodeE+0x18>
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	callq  20 <_ZN5QHashI7QString11QStringListE11deleteNode2EPN9QHashData4NodeE+0x20>
  20:	90                   	nop
  21:	c9                   	leaveq 
  22:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QString11QStringListE8freeDataEP9QHashData:

0000000000000000 <_ZN5QHashI7QString11QStringListE8freeDataEP9QHashData>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 1b <_ZN5QHashI7QString11QStringListE8freeDataEP9QHashData+0x1b>
  1b:	48 89 d6             	mov    %rdx,%rsi
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZN5QHashI7QString11QStringListE8freeDataEP9QHashData+0x26>
  26:	90                   	nop
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI6moduleE13detach_helperEi:

0000000000000000 <_ZN5QListI6moduleE13detach_helperEi>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  10:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN5QListI6moduleE13detach_helperEi+0x1c>
  1c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  20:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  24:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  27:	89 d6                	mov    %edx,%esi
    QString script = *str;
  29:	48 89 c7             	mov    %rax,%rdi
  2c:	e8 00 00 00 00       	callq  31 <_ZN5QListI6moduleE13detach_helperEi+0x31>
  31:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  35:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  39:	48 89 c7             	mov    %rax,%rdi
  3c:	e8 00 00 00 00       	callq  41 <_ZN5QListI6moduleE13detach_helperEi+0x41>
  41:	48 89 c3             	mov    %rax,%rbx
    QString StepArgs;
  44:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  48:	48 89 c7             	mov    %rax,%rdi
  4b:	e8 00 00 00 00       	callq  50 <_ZN5QListI6moduleE13detach_helperEi+0x50>
  50:	48 89 c6             	mov    %rax,%rsi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  53:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  57:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  5b:	48 89 d1             	mov    %rdx,%rcx
  5e:	48 89 da             	mov    %rbx,%rdx
  61:	48 89 c7             	mov    %rax,%rdi
  64:	e8 00 00 00 00       	callq  69 <_ZN5QListI6moduleE13detach_helperEi+0x69>
  69:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  6d:	48 89 c7             	mov    %rax,%rdi
  70:	e8 00 00 00 00       	callq  75 <_ZN5QListI6moduleE13detach_helperEi+0x75>
  75:	83 f0 01             	xor    $0x1,%eax
  78:	84 c0                	test   %al,%al
  7a:	74 4c                	je     c8 <_ZN5QListI6moduleE13detach_helperEi+0xc8>
  7c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  84:	48 89 d6             	mov    %rdx,%rsi
  87:	48 89 c7             	mov    %rax,%rdi
    QR.setMinimal(false);
  8a:	e8 00 00 00 00       	callq  8f <_ZN5QListI6moduleE13detach_helperEi+0x8f>
  8f:	eb 37                	jmp    c8 <_ZN5QListI6moduleE13detach_helperEi+0xc8>
  91:	48 89 c7             	mov    %rax,%rdi
  94:	e8 00 00 00 00       	callq  99 <_ZN5QListI6moduleE13detach_helperEi+0x99>
  99:	48 8b 45 d8          	mov    -0x28(%rbp),%rax

    while(1==1)
    {
        int i = QR.indexIn(script);
  9d:	48 89 c7             	mov    %rax,%rdi
  a0:	e8 00 00 00 00       	callq  a5 <_ZN5QListI6moduleE13detach_helperEi+0xa5>
  a5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  ad:	48 89 10             	mov    %rdx,(%rax)
  b0:	e8 00 00 00 00       	callq  b5 <_ZN5QListI6moduleE13detach_helperEi+0xb5>
  b5:	48 89 c3             	mov    %rax,%rbx
  b8:	e8 00 00 00 00       	callq  bd <_ZN5QListI6moduleE13detach_helperEi+0xbd>
  bd:	48 89 d8             	mov    %rbx,%rax
        if(i<0) return -1;
  c0:	48 89 c7             	mov    %rax,%rdi
  c3:	e8 00 00 00 00       	callq  c8 <_ZN5QListI6moduleE13detach_helperEi+0xc8>
  c8:	90                   	nop
  c9:	48 83 c4 28          	add    $0x28,%rsp
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	5b                   	pop    %rbx
  ce:	5d                   	pop    %rbp
  cf:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringS0_E8concreteEPN9QHashData4NodeE:

0000000000000000 <_ZN5QHashI7QStringS0_E8concreteEPN9QHashData4NodeE>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	5d                   	pop    %rbp
   d:	c3                   	retq   

Дизассемблирование раздела .text._ZN8variableC2ERKS_:

0000000000000000 <_ZN8variableC1ERKS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	0f b6 10             	movzbl (%rax),%edx
  17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1b:	88 10                	mov    %dl,(%rax)
  1d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  21:	0f b6 50 01          	movzbl 0x1(%rax),%edx
  25:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QString script = *str;
  29:	88 50 01             	mov    %dl,0x1(%rax)
  2c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  30:	0f b7 50 02          	movzwl 0x2(%rax),%edx
  34:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  38:	66 89 50 02          	mov    %dx,0x2(%rax)
  3c:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  40:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    QString StepArgs;
  44:	48 8b 50 0c          	mov    0xc(%rax),%rdx
  48:	48 8b 40 04          	mov    0x4(%rax),%rax
  4c:	48 89 41 04          	mov    %rax,0x4(%rcx)
  50:	48 89 51 0c          	mov    %rdx,0xc(%rcx)
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  54:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  58:	48 8d 50 18          	lea    0x18(%rax),%rdx
  5c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  60:	48 83 c0 18          	add    $0x18,%rax
  64:	48 89 d6             	mov    %rdx,%rsi
  67:	48 89 c7             	mov    %rax,%rdi
  6a:	e8 00 00 00 00       	callq  6f <_ZN8variableC1ERKS_+0x6f>
  6f:	90                   	nop
  70:	c9                   	leaveq 
  71:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QListI8variableE9node_copyEPNS1_4NodeES3_S3_:

0000000000000000 <_ZN5QListI8variableE9node_copyEPNS1_4NodeES3_S3_>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 54                	push   %r12
   6:	53                   	push   %rbx
   7:	48 83 ec 30          	sub    $0x30,%rsp
   b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   f:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  13:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  17:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  1b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  1f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  27:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
    QString script = *str;
  2b:	0f 84 97 00 00 00    	je     c8 <_ZN5QListI8variableE9node_copyEPNS1_4NodeES3_S3_+0xc8>
  31:	bf 20 00 00 00       	mov    $0x20,%edi
  36:	e8 00 00 00 00       	callq  3b <_ZN5QListI8variableE9node_copyEPNS1_4NodeES3_S3_+0x3b>
  3b:	48 89 c3             	mov    %rax,%rbx
  3e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    QString StepArgs;
  42:	48 8b 00             	mov    (%rax),%rax
  45:	48 89 c6             	mov    %rax,%rsi
  48:	48 89 df             	mov    %rbx,%rdi
  4b:	e8 00 00 00 00       	callq  50 <_ZN5QListI8variableE9node_copyEPNS1_4NodeES3_S3_+0x50>
  50:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  54:	48 89 18             	mov    %rbx,(%rax)
  57:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
  5c:	48 83 45 c0 08       	addq   $0x8,-0x40(%rbp)
  61:	eb c0                	jmp    23 <_ZN5QListI8variableE9node_copyEPNS1_4NodeES3_S3_+0x23>
  63:	49 89 c4             	mov    %rax,%r12
  66:	48 89 df             	mov    %rbx,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZN5QListI8variableE9node_copyEPNS1_4NodeES3_S3_+0x6e>
  6e:	4c 89 e0             	mov    %r12,%rax
  71:	eb 00                	jmp    73 <_ZN5QListI8variableE9node_copyEPNS1_4NodeES3_S3_+0x73>
  73:	48 89 c7             	mov    %rax,%rdi
  76:	e8 00 00 00 00       	callq  7b <_ZN5QListI8variableE9node_copyEPNS1_4NodeES3_S3_+0x7b>
  7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7f:	48 8d 50 f8          	lea    -0x8(%rax),%rdx
  83:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  87:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
    QR.setMinimal(false);
  8b:	0f 95 c0             	setne  %al
  8e:	84 c0                	test   %al,%al
  90:	74 1e                	je     b0 <_ZN5QListI8variableE9node_copyEPNS1_4NodeES3_S3_+0xb0>
  92:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  96:	48 8b 18             	mov    (%rax),%rbx
  99:	48 85 db             	test   %rbx,%rbx

    while(1==1)
    {
        int i = QR.indexIn(script);
  9c:	74 dd                	je     7b <_ZN5QListI8variableE9node_copyEPNS1_4NodeES3_S3_+0x7b>
  9e:	48 89 df             	mov    %rbx,%rdi
  a1:	e8 00 00 00 00       	callq  a6 <_ZN5QListI8variableE9node_copyEPNS1_4NodeES3_S3_+0xa6>
  a6:	48 89 df             	mov    %rbx,%rdi
  a9:	e8 00 00 00 00       	callq  ae <_ZN5QListI8variableE9node_copyEPNS1_4NodeES3_S3_+0xae>
  ae:	eb cb                	jmp    7b <_ZN5QListI8variableE9node_copyEPNS1_4NodeES3_S3_+0x7b>
  b0:	e8 00 00 00 00       	callq  b5 <_ZN5QListI8variableE9node_copyEPNS1_4NodeES3_S3_+0xb5>
  b5:	48 89 c3             	mov    %rax,%rbx
  b8:	e8 00 00 00 00       	callq  bd <_ZN5QListI8variableE9node_copyEPNS1_4NodeES3_S3_+0xbd>
  bd:	48 89 d8             	mov    %rbx,%rax
        if(i<0) return -1;
  c0:	48 89 c7             	mov    %rax,%rdi
  c3:	e8 00 00 00 00       	callq  c8 <_ZN5QListI8variableE9node_copyEPNS1_4NodeES3_S3_+0xc8>
  c8:	90                   	nop
  c9:	48 83 c4 30          	add    $0x30,%rsp
#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
    QString script = *str;
    QString StepArgs;
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  cd:	5b                   	pop    %rbx
  ce:	41 5c                	pop    %r12
  d0:	5d                   	pop    %rbp
  d1:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapNodeI7QStringhE14destroySubTreeEv:

0000000000000000 <_ZN8QMapNodeI7QStringhE14destroySubTreeEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 83 c0 18          	add    $0x18,%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN8QMapNodeI7QStringhE14destroySubTreeEv+0x1c>
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 8b 40 08          	mov    0x8(%rax),%rax
  24:	48 85 c0             	test   %rax,%rax
  27:	74 14                	je     3d <_ZN8QMapNodeI7QStringhE14destroySubTreeEv+0x3d>
    QString script = *str;
  29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2d:	48 89 c7             	mov    %rax,%rdi
  30:	e8 00 00 00 00       	callq  35 <_ZN8QMapNodeI7QStringhE14destroySubTreeEv+0x35>
  35:	48 89 c7             	mov    %rax,%rdi
  38:	e8 00 00 00 00       	callq  3d <_ZN8QMapNodeI7QStringhE14destroySubTreeEv+0x3d>
  3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41:	48 8b 40 10          	mov    0x10(%rax),%rax
    QString StepArgs;
  45:	48 85 c0             	test   %rax,%rax
  48:	74 14                	je     5e <_ZN8QMapNodeI7QStringhE14destroySubTreeEv+0x5e>
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	48 89 c7             	mov    %rax,%rdi
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	e8 00 00 00 00       	callq  56 <_ZN8QMapNodeI7QStringhE14destroySubTreeEv+0x56>
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	callq  5e <_ZN8QMapNodeI7QStringhE14destroySubTreeEv+0x5e>
  5e:	90                   	nop
  5f:	c9                   	leaveq 
  60:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapNodeIhhE14destroySubTreeEv:

0000000000000000 <_ZN8QMapNodeIhhE14destroySubTreeEv>:
#include "module.h"
#include "qdebug.h"

#include <QtCore/qatomic_x86.h>

int Parser::checkDefines(QString *str){
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	90                   	nop
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZN8QMapNodeI7QStringS0_E14destroySubTreeEv:

0000000000000000 <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 83 c0 18          	add    $0x18,%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv+0x1c>
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 83 c0 20          	add    $0x20,%rax
  24:	48 89 c7             	mov    %rax,%rdi
  27:	e8 00 00 00 00       	callq  2c <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv+0x2c>
    QString script = *str;
  2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  30:	48 8b 40 08          	mov    0x8(%rax),%rax
  34:	48 85 c0             	test   %rax,%rax
  37:	74 14                	je     4d <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv+0x4d>
  39:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3d:	48 89 c7             	mov    %rax,%rdi
  40:	e8 00 00 00 00       	callq  45 <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv+0x45>
    QString StepArgs;
  45:	48 89 c7             	mov    %rax,%rdi
  48:	e8 00 00 00 00       	callq  4d <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv+0x4d>
  4d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    QRegExp QR("#[D|d]efine[\\s]+([\\w]+)[\\s]+([\\w|\\d]+)");
  51:	48 8b 40 10          	mov    0x10(%rax),%rax
  55:	48 85 c0             	test   %rax,%rax
  58:	74 14                	je     6e <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv+0x6e>
  5a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5e:	48 89 c7             	mov    %rax,%rdi
  61:	e8 00 00 00 00       	callq  66 <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv+0x66>
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZN8QMapNodeI7QStringS0_E14destroySubTreeEv+0x6e>
  6e:	90                   	nop
  6f:	c9                   	leaveq 
  70:	c3                   	retq   
