
sems.o:     формат файла elf64-x86-64

Разделы:
Инд Имя           Размер    VMA               LMA               Файл      Вырав
  0 .group        00000008  0000000000000000  0000000000000000  00000040  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  1 .group        00000008  0000000000000000  0000000000000000  00000048  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  2 .group        00000008  0000000000000000  0000000000000000  00000050  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  3 .group        00000008  0000000000000000  0000000000000000  00000058  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  4 .group        00000008  0000000000000000  0000000000000000  00000060  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  5 .group        00000008  0000000000000000  0000000000000000  00000068  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  6 .group        00000008  0000000000000000  0000000000000000  00000070  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  7 .group        00000008  0000000000000000  0000000000000000  00000078  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  8 .group        00000008  0000000000000000  0000000000000000  00000080  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  9 .group        0000000c  0000000000000000  0000000000000000  00000088  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 10 .group        00000008  0000000000000000  0000000000000000  00000094  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 11 .group        00000008  0000000000000000  0000000000000000  0000009c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 12 .group        00000008  0000000000000000  0000000000000000  000000a4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 13 .group        00000008  0000000000000000  0000000000000000  000000ac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 14 .group        00000008  0000000000000000  0000000000000000  000000b4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 15 .group        00000008  0000000000000000  0000000000000000  000000bc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 16 .group        00000008  0000000000000000  0000000000000000  000000c4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 17 .group        00000008  0000000000000000  0000000000000000  000000cc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 18 .group        00000008  0000000000000000  0000000000000000  000000d4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 19 .group        00000008  0000000000000000  0000000000000000  000000dc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 20 .group        00000008  0000000000000000  0000000000000000  000000e4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 21 .group        00000008  0000000000000000  0000000000000000  000000ec  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 22 .group        00000008  0000000000000000  0000000000000000  000000f4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 23 .group        00000008  0000000000000000  0000000000000000  000000fc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 24 .group        00000008  0000000000000000  0000000000000000  00000104  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 25 .group        00000008  0000000000000000  0000000000000000  0000010c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 26 .group        00000008  0000000000000000  0000000000000000  00000114  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 27 .group        00000008  0000000000000000  0000000000000000  0000011c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 28 .group        00000008  0000000000000000  0000000000000000  00000124  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 29 .group        00000008  0000000000000000  0000000000000000  0000012c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 30 .group        00000008  0000000000000000  0000000000000000  00000134  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 31 .group        00000008  0000000000000000  0000000000000000  0000013c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 32 .group        00000008  0000000000000000  0000000000000000  00000144  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 33 .group        00000008  0000000000000000  0000000000000000  0000014c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 34 .group        00000008  0000000000000000  0000000000000000  00000154  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 35 .group        00000008  0000000000000000  0000000000000000  0000015c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 36 .group        00000008  0000000000000000  0000000000000000  00000164  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 37 .group        00000008  0000000000000000  0000000000000000  0000016c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 38 .group        00000008  0000000000000000  0000000000000000  00000174  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 39 .group        00000008  0000000000000000  0000000000000000  0000017c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 40 .group        00000008  0000000000000000  0000000000000000  00000184  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 41 .group        00000008  0000000000000000  0000000000000000  0000018c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 42 .group        00000008  0000000000000000  0000000000000000  00000194  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 43 .group        00000008  0000000000000000  0000000000000000  0000019c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 44 .group        00000008  0000000000000000  0000000000000000  000001a4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 45 .group        00000008  0000000000000000  0000000000000000  000001ac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 46 .group        00000008  0000000000000000  0000000000000000  000001b4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 47 .group        00000008  0000000000000000  0000000000000000  000001bc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 48 .group        00000008  0000000000000000  0000000000000000  000001c4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 49 .group        00000008  0000000000000000  0000000000000000  000001cc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 50 .group        00000008  0000000000000000  0000000000000000  000001d4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 51 .group        00000008  0000000000000000  0000000000000000  000001dc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 52 .group        00000008  0000000000000000  0000000000000000  000001e4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 53 .group        00000008  0000000000000000  0000000000000000  000001ec  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 54 .group        00000008  0000000000000000  0000000000000000  000001f4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 55 .group        00000008  0000000000000000  0000000000000000  000001fc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 56 .group        00000008  0000000000000000  0000000000000000  00000204  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 57 .group        00000008  0000000000000000  0000000000000000  0000020c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 58 .group        00000008  0000000000000000  0000000000000000  00000214  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 59 .group        00000008  0000000000000000  0000000000000000  0000021c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 60 .group        00000008  0000000000000000  0000000000000000  00000224  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 61 .group        00000008  0000000000000000  0000000000000000  0000022c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 62 .group        00000008  0000000000000000  0000000000000000  00000234  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 63 .group        00000008  0000000000000000  0000000000000000  0000023c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 64 .group        00000008  0000000000000000  0000000000000000  00000244  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 65 .group        00000008  0000000000000000  0000000000000000  0000024c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 66 .group        00000008  0000000000000000  0000000000000000  00000254  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 67 .group        00000008  0000000000000000  0000000000000000  0000025c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 68 .group        00000008  0000000000000000  0000000000000000  00000264  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 69 .group        00000008  0000000000000000  0000000000000000  0000026c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 70 .group        00000008  0000000000000000  0000000000000000  00000274  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 71 .group        00000008  0000000000000000  0000000000000000  0000027c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 72 .group        00000008  0000000000000000  0000000000000000  00000284  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 73 .group        00000008  0000000000000000  0000000000000000  0000028c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 74 .group        00000008  0000000000000000  0000000000000000  00000294  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 75 .group        00000008  0000000000000000  0000000000000000  0000029c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 76 .group        00000008  0000000000000000  0000000000000000  000002a4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 77 .group        00000008  0000000000000000  0000000000000000  000002ac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 78 .group        00000008  0000000000000000  0000000000000000  000002b4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 79 .group        00000008  0000000000000000  0000000000000000  000002bc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 80 .group        00000008  0000000000000000  0000000000000000  000002c4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 81 .group        00000008  0000000000000000  0000000000000000  000002cc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 82 .group        00000008  0000000000000000  0000000000000000  000002d4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 83 .group        00000008  0000000000000000  0000000000000000  000002dc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 84 .group        00000008  0000000000000000  0000000000000000  000002e4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 85 .group        00000008  0000000000000000  0000000000000000  000002ec  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 86 .group        00000008  0000000000000000  0000000000000000  000002f4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 87 .group        00000008  0000000000000000  0000000000000000  000002fc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 88 .group        00000008  0000000000000000  0000000000000000  00000304  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 89 .group        00000008  0000000000000000  0000000000000000  0000030c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 90 .group        00000008  0000000000000000  0000000000000000  00000314  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 91 .group        00000008  0000000000000000  0000000000000000  0000031c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 92 .group        00000008  0000000000000000  0000000000000000  00000324  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 93 .group        00000008  0000000000000000  0000000000000000  0000032c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 94 .group        00000008  0000000000000000  0000000000000000  00000334  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 95 .group        00000008  0000000000000000  0000000000000000  0000033c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 96 .group        00000008  0000000000000000  0000000000000000  00000344  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 97 .group        00000008  0000000000000000  0000000000000000  0000034c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 98 .group        00000008  0000000000000000  0000000000000000  00000354  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
 99 .group        00000008  0000000000000000  0000000000000000  0000035c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
100 .group        00000008  0000000000000000  0000000000000000  00000364  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
101 .group        00000008  0000000000000000  0000000000000000  0000036c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
102 .group        00000008  0000000000000000  0000000000000000  00000374  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
103 .group        00000008  0000000000000000  0000000000000000  0000037c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
104 .group        00000008  0000000000000000  0000000000000000  00000384  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
105 .group        00000008  0000000000000000  0000000000000000  0000038c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
106 .group        00000008  0000000000000000  0000000000000000  00000394  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
107 .group        00000008  0000000000000000  0000000000000000  0000039c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
108 .group        00000008  0000000000000000  0000000000000000  000003a4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
109 .group        00000008  0000000000000000  0000000000000000  000003ac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
110 .group        00000008  0000000000000000  0000000000000000  000003b4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
111 .group        00000008  0000000000000000  0000000000000000  000003bc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
112 .group        00000008  0000000000000000  0000000000000000  000003c4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
113 .group        00000008  0000000000000000  0000000000000000  000003cc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
114 .group        00000008  0000000000000000  0000000000000000  000003d4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
115 .group        00000008  0000000000000000  0000000000000000  000003dc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
116 .group        00000008  0000000000000000  0000000000000000  000003e4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
117 .group        00000008  0000000000000000  0000000000000000  000003ec  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
118 .group        00000008  0000000000000000  0000000000000000  000003f4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
119 .group        00000008  0000000000000000  0000000000000000  000003fc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
120 .group        00000008  0000000000000000  0000000000000000  00000404  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
121 .group        00000008  0000000000000000  0000000000000000  0000040c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
122 .group        00000008  0000000000000000  0000000000000000  00000414  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
123 .group        00000008  0000000000000000  0000000000000000  0000041c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
124 .group        00000008  0000000000000000  0000000000000000  00000424  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
125 .group        00000008  0000000000000000  0000000000000000  0000042c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
126 .group        00000008  0000000000000000  0000000000000000  00000434  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
127 .group        00000008  0000000000000000  0000000000000000  0000043c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
128 .group        00000008  0000000000000000  0000000000000000  00000444  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
129 .group        00000008  0000000000000000  0000000000000000  0000044c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
130 .group        00000008  0000000000000000  0000000000000000  00000454  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
131 .group        00000008  0000000000000000  0000000000000000  0000045c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
132 .group        00000008  0000000000000000  0000000000000000  00000464  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
133 .group        00000008  0000000000000000  0000000000000000  0000046c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
134 .group        00000008  0000000000000000  0000000000000000  00000474  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
135 .group        00000008  0000000000000000  0000000000000000  0000047c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
136 .group        00000008  0000000000000000  0000000000000000  00000484  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
137 .group        00000008  0000000000000000  0000000000000000  0000048c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
138 .group        00000008  0000000000000000  0000000000000000  00000494  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
139 .group        00000008  0000000000000000  0000000000000000  0000049c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
140 .group        00000008  0000000000000000  0000000000000000  000004a4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
141 .group        00000008  0000000000000000  0000000000000000  000004ac  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
142 .group        00000008  0000000000000000  0000000000000000  000004b4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
143 .group        00000008  0000000000000000  0000000000000000  000004bc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
144 .group        00000008  0000000000000000  0000000000000000  000004c4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
145 .group        00000008  0000000000000000  0000000000000000  000004cc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
146 .group        00000008  0000000000000000  0000000000000000  000004d4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
147 .group        00000008  0000000000000000  0000000000000000  000004dc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
148 .group        00000008  0000000000000000  0000000000000000  000004e4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
149 .group        00000008  0000000000000000  0000000000000000  000004ec  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
150 .group        00000008  0000000000000000  0000000000000000  000004f4  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
151 .group        00000008  0000000000000000  0000000000000000  000004fc  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
152 .group        00000008  0000000000000000  0000000000000000  00000504  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
153 .group        00000008  0000000000000000  0000000000000000  0000050c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
154 .group        00000008  0000000000000000  0000000000000000  00000514  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
155 .group        00000008  0000000000000000  0000000000000000  0000051c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
156 .group        00000008  0000000000000000  0000000000000000  00000524  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
157 .group        00000008  0000000000000000  0000000000000000  0000052c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
158 .group        00000008  0000000000000000  0000000000000000  00000534  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
159 .group        00000008  0000000000000000  0000000000000000  0000053c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
160 .group        00000008  0000000000000000  0000000000000000  00000544  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
161 .text         00001cdb  0000000000000000  0000000000000000  0000054c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
162 .data         00000000  0000000000000000  0000000000000000  00002227  2**0
                  CONTENTS, ALLOC, LOAD, DATA
163 .bss          00000000  0000000000000000  0000000000000000  00002227  2**0
                  ALLOC
164 .text._ZnwmPv 00000012  0000000000000000  0000000000000000  00002227  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
165 .text._ZdlPvS_ 0000000f  0000000000000000  0000000000000000  00002239  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
166 .text._Z7qt_noopv 00000007  0000000000000000  0000000000000000  00002248  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
167 .text._ZN9QtPrivate8RefCount3refEv 00000041  0000000000000000  0000000000000000  00002250  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
168 .text._ZN9QtPrivate8RefCount5derefEv 00000043  0000000000000000  0000000000000000  00002292  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
169 .text._ZNK9QtPrivate8RefCount8isSharedEv 00000035  0000000000000000  0000000000000000  000022d6  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
170 .text._ZN10QArrayData10sharedNullEv 0000000d  0000000000000000  0000000000000000  0000230b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
171 .text._ZN7QString8fromUtf8EPKci 0000006c  0000000000000000  0000000000000000  00002318  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
172 .text._ZN7QStringC2EPKc 00000047  0000000000000000  0000000000000000  00002384  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
173 .text._ZN7QString6appendEPKc 00000094  0000000000000000  0000000000000000  000023cc  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
174 .gcc_except_table._ZN7QString6appendEPKc 00000015  0000000000000000  0000000000000000  00002460  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
175 .rodata       0000029c  0000000000000000  0000000000000000  00002478  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
176 .text._ZN7QStringC2ERKS_ 00000057  0000000000000000  0000000000000000  00002714  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
177 .text._ZN7QStringC2Ev 0000001e  0000000000000000  0000000000000000  0000276c  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
178 .text._ZN7QStringD2Ev 00000034  0000000000000000  0000000000000000  0000278a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
179 .text._ZN9QHashData8willGrowEv 00000046  0000000000000000  0000000000000000  000027be  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
180 .text._ZN9QHashData9firstNodeEv 0000005b  0000000000000000  0000000000000000  00002804  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
181 .gcc_except_table 000004ba  0000000000000000  0000000000000000  0000285f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
182 .text._ZNK19QBasicAtomicIntegerIiE4loadEv 00000019  0000000000000000  0000000000000000  00002d1a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
183 .text._ZN19QBasicAtomicIntegerIiE3refEv 0000001a  0000000000000000  0000000000000000  00002d34  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
184 .text._ZN19QBasicAtomicIntegerIiE5derefEv 0000001a  0000000000000000  0000000000000000  00002d4e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
185 .text._ZN15QTypedArrayDataItE10sharedNullEv 0000000b  0000000000000000  0000000000000000  00002d68  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
186 .text._ZN15QTypedArrayDataItE10deallocateEP10QArrayData 00000025  0000000000000000  0000000000000000  00002d73  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
187 .text._Z4qMaxIiERKT_S2_S2_ 00000028  0000000000000000  0000000000000000  00002d98  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
188 .text._ZN5QHashI7QStringiE6insertERKS0_RKi 00000101  0000000000000000  0000000000000000  00002dc0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
189 .text._ZN5QHashI7QStringiEC2Ev 00000019  0000000000000000  0000000000000000  00002ec2  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
190 .text._ZN5QHashI7QStringiED2Ev 0000003f  0000000000000000  0000000000000000  00002edc  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
191 .text._ZN5QHashI7QStringiE8iteratorC2Ev 00000016  0000000000000000  0000000000000000  00002f1c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
192 .text._ZN5QHashI7QStringiE5beginEv 00000062  0000000000000000  0000000000000000  00002f32  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
193 .text._ZN5QHashI7QStringiE3endEv 00000057  0000000000000000  0000000000000000  00002f94  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
194 .text._ZNK5QHashI7QStringiE8iteratorneERKS2_ 00000022  0000000000000000  0000000000000000  00002fec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
195 .text._ZN5QHashI7QStringiE8iteratorppEv 0000002b  0000000000000000  0000000000000000  0000300e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
196 .text._ZNK5QHashI7QStringiE8iterator3keyEv 00000021  0000000000000000  0000000000000000  0000303a  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
197 .text._ZN15QBasicAtomicOpsILi4EE3refIiEEbRT_ 00000023  0000000000000000  0000000000000000  0000305b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
198 .text._ZN15QBasicAtomicOpsILi4EE5derefIiEEbRT_ 00000023  0000000000000000  0000000000000000  0000307e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
199 .text._ZN5QHashI7QStringiE6detachEv 00000032  0000000000000000  0000000000000000  000030a2  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
200 .text._ZNK5QHashI7QStringiE8findNodeERKS0_Pj 00000139  0000000000000000  0000000000000000  000030d4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
201 .text._ZN5QHashI7QStringiE10createNodeEjRKS0_RKiPP9QHashNodeIS0_iE 000000c1  0000000000000000  0000000000000000  0000320e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
202 .text._ZN5QHashI7QStringiE8iteratorC2EPv 0000001a  0000000000000000  0000000000000000  000032d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
203 .text._ZN5QHashI7QStringiE8freeDataEP9QHashData 00000029  0000000000000000  0000000000000000  000032ea  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
204 .text._ZN5QHashI7QStringiE8concreteEPN9QHashData4NodeE 0000000e  0000000000000000  0000000000000000  00003313  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
205 .text._ZN5QHashI7QStringiE13detach_helperEv 0000007c  0000000000000000  0000000000000000  00003322  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
206 .text._ZNK9QHashNodeI7QStringiE8same_keyEjRKS0_ 00000048  0000000000000000  0000000000000000  0000339e  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
207 .text._ZN5QHashI7QStringiE11alignOfNodeEv 00000051  0000000000000000  0000000000000000  000033e6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
208 .text._ZN9QHashNodeI7QStringiEC2ERKS0_RKijPS1_ 00000057  0000000000000000  0000000000000000  00003438  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
209 .text._ZN9QHashNodeI7QStringiED2Ev 0000001f  0000000000000000  0000000000000000  00003490  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
210 .text._ZN5QHashI7QStringiE11deleteNode2EPN9QHashData4NodeE 00000023  0000000000000000  0000000000000000  000034b0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
211 .text._ZN5QHashI7QStringiE13duplicateNodeEPN9QHashData4NodeEPv 0000008c  0000000000000000  0000000000000000  000034d4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
212 .debug_info   0001279b  0000000000000000  0000000000000000  00003560  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
213 .debug_abbrev 00000a20  0000000000000000  0000000000000000  00015cfb  2**0
                  CONTENTS, READONLY, DEBUGGING
214 .debug_aranges 00000300  0000000000000000  0000000000000000  0001671b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
215 .debug_ranges 000002f0  0000000000000000  0000000000000000  00016a1b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
216 .debug_macro  000008ca  0000000000000000  0000000000000000  00016d0b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
217 .debug_macro  0000061c  0000000000000000  0000000000000000  000175d5  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
218 .debug_macro  00000022  0000000000000000  0000000000000000  00017bf1  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
219 .debug_macro  00000136  0000000000000000  0000000000000000  00017c13  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
220 .debug_macro  00000010  0000000000000000  0000000000000000  00017d49  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
221 .debug_macro  00000275  0000000000000000  0000000000000000  00017d59  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
222 .debug_macro  0000016f  0000000000000000  0000000000000000  00017fce  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
223 .debug_macro  00000016  0000000000000000  0000000000000000  0001813d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
224 .debug_macro  00000035  0000000000000000  0000000000000000  00018153  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
225 .debug_macro  00000058  0000000000000000  0000000000000000  00018188  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
226 .debug_macro  000005b4  0000000000000000  0000000000000000  000181e0  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
227 .debug_macro  0000016d  0000000000000000  0000000000000000  00018794  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
228 .debug_macro  00000016  0000000000000000  0000000000000000  00018901  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
229 .debug_macro  0000009a  0000000000000000  0000000000000000  00018917  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
230 .debug_macro  00000016  0000000000000000  0000000000000000  000189b1  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
231 .debug_macro  00000018  0000000000000000  0000000000000000  000189c7  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
232 .debug_macro  00000032  0000000000000000  0000000000000000  000189df  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
233 .debug_macro  000000c0  0000000000000000  0000000000000000  00018a11  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
234 .debug_macro  00000028  0000000000000000  0000000000000000  00018ad1  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
235 .debug_macro  00000012  0000000000000000  0000000000000000  00018af9  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
236 .debug_macro  000000cf  0000000000000000  0000000000000000  00018b0b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
237 .debug_macro  0000001c  0000000000000000  0000000000000000  00018bda  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
238 .debug_macro  00000018  0000000000000000  0000000000000000  00018bf6  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
239 .debug_macro  0000006e  0000000000000000  0000000000000000  00018c0e  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
240 .debug_macro  00000082  0000000000000000  0000000000000000  00018c7c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
241 .debug_macro  00000012  0000000000000000  0000000000000000  00018cfe  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
242 .debug_macro  00000012  0000000000000000  0000000000000000  00018d10  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
243 .debug_macro  00000016  0000000000000000  0000000000000000  00018d22  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
244 .debug_macro  00000035  0000000000000000  0000000000000000  00018d38  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
245 .debug_macro  00000052  0000000000000000  0000000000000000  00018d6d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
246 .debug_macro  0000004c  0000000000000000  0000000000000000  00018dbf  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
247 .debug_macro  0000001c  0000000000000000  0000000000000000  00018e0b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
248 .debug_macro  00000028  0000000000000000  0000000000000000  00018e27  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
249 .debug_macro  0000005e  0000000000000000  0000000000000000  00018e4f  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
250 .debug_macro  000000e2  0000000000000000  0000000000000000  00018ead  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
251 .debug_macro  00000010  0000000000000000  0000000000000000  00018f8f  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
252 .debug_macro  0000004c  0000000000000000  0000000000000000  00018f9f  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
253 .debug_macro  00000022  0000000000000000  0000000000000000  00018feb  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
254 .debug_macro  00000068  0000000000000000  0000000000000000  0001900d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
255 .debug_macro  0000007f  0000000000000000  0000000000000000  00019075  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
256 .debug_macro  0000003a  0000000000000000  0000000000000000  000190f4  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
257 .debug_macro  00000019  0000000000000000  0000000000000000  0001912e  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
258 .debug_macro  00000020  0000000000000000  0000000000000000  00019147  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
259 .debug_macro  00000022  0000000000000000  0000000000000000  00019167  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
260 .debug_macro  00000010  0000000000000000  0000000000000000  00019189  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
261 .debug_macro  00000016  0000000000000000  0000000000000000  00019199  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
262 .debug_macro  00000028  0000000000000000  0000000000000000  000191af  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
263 .debug_macro  00000010  0000000000000000  0000000000000000  000191d7  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
264 .debug_macro  00000046  0000000000000000  0000000000000000  000191e7  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
265 .debug_macro  0000001c  0000000000000000  0000000000000000  0001922d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
266 .debug_macro  00000020  0000000000000000  0000000000000000  00019249  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
267 .debug_macro  0000005a  0000000000000000  0000000000000000  00019269  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
268 .debug_macro  00000010  0000000000000000  0000000000000000  000192c3  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
269 .debug_macro  00000010  0000000000000000  0000000000000000  000192d3  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
270 .debug_macro  000000e4  0000000000000000  0000000000000000  000192e3  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
271 .debug_macro  0000025a  0000000000000000  0000000000000000  000193c7  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
272 .debug_macro  0000002d  0000000000000000  0000000000000000  00019621  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
273 .debug_macro  00000016  0000000000000000  0000000000000000  0001964e  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
274 .debug_macro  00000050  0000000000000000  0000000000000000  00019664  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
275 .debug_macro  00000019  0000000000000000  0000000000000000  000196b4  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
276 .debug_macro  00000011  0000000000000000  0000000000000000  000196cd  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
277 .debug_macro  0000014b  0000000000000000  0000000000000000  000196de  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
278 .debug_macro  0000001e  0000000000000000  0000000000000000  00019829  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
279 .debug_macro  0000001c  0000000000000000  0000000000000000  00019847  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
280 .debug_macro  00000023  0000000000000000  0000000000000000  00019863  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
281 .debug_macro  00000018  0000000000000000  0000000000000000  00019886  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
282 .debug_macro  00000016  0000000000000000  0000000000000000  0001989e  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
283 .debug_macro  00000018  0000000000000000  0000000000000000  000198b4  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
284 .debug_macro  00000019  0000000000000000  0000000000000000  000198cc  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
285 .debug_macro  00000016  0000000000000000  0000000000000000  000198e5  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
286 .debug_macro  0000001c  0000000000000000  0000000000000000  000198fb  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
287 .debug_macro  00000010  0000000000000000  0000000000000000  00019917  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
288 .debug_macro  00000016  0000000000000000  0000000000000000  00019927  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
289 .debug_macro  00000022  0000000000000000  0000000000000000  0001993d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
290 .debug_macro  00000043  0000000000000000  0000000000000000  0001995f  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
291 .debug_macro  0000003c  0000000000000000  0000000000000000  000199a2  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
292 .debug_macro  00000173  0000000000000000  0000000000000000  000199de  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
293 .debug_macro  00000012  0000000000000000  0000000000000000  00019b51  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
294 .debug_macro  00000010  0000000000000000  0000000000000000  00019b63  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
295 .debug_macro  00000058  0000000000000000  0000000000000000  00019b73  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
296 .debug_macro  000000b4  0000000000000000  0000000000000000  00019bcb  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
297 .debug_macro  00000016  0000000000000000  0000000000000000  00019c7f  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
298 .debug_macro  00000010  0000000000000000  0000000000000000  00019c95  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
299 .debug_macro  00000037  0000000000000000  0000000000000000  00019ca5  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
300 .debug_macro  00000058  0000000000000000  0000000000000000  00019cdc  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
301 .debug_macro  00000011  0000000000000000  0000000000000000  00019d34  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
302 .debug_macro  00000016  0000000000000000  0000000000000000  00019d45  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
303 .debug_macro  00000010  0000000000000000  0000000000000000  00019d5b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
304 .debug_macro  00000010  0000000000000000  0000000000000000  00019d6b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
305 .debug_macro  00000022  0000000000000000  0000000000000000  00019d7b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
306 .debug_macro  00000122  0000000000000000  0000000000000000  00019d9d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
307 .debug_macro  0000008e  0000000000000000  0000000000000000  00019ebf  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
308 .debug_macro  00000016  0000000000000000  0000000000000000  00019f4d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
309 .debug_macro  00000058  0000000000000000  0000000000000000  00019f63  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
310 .debug_macro  000000fa  0000000000000000  0000000000000000  00019fbb  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
311 .debug_macro  00000030  0000000000000000  0000000000000000  0001a0b5  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
312 .debug_macro  000000c1  0000000000000000  0000000000000000  0001a0e5  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
313 .debug_macro  0000004d  0000000000000000  0000000000000000  0001a1a6  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
314 .debug_macro  00000010  0000000000000000  0000000000000000  0001a1f3  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
315 .debug_macro  00000010  0000000000000000  0000000000000000  0001a203  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
316 .debug_macro  00000016  0000000000000000  0000000000000000  0001a213  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
317 .debug_macro  00000076  0000000000000000  0000000000000000  0001a229  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
318 .debug_macro  00000016  0000000000000000  0000000000000000  0001a29f  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
319 .debug_macro  00000025  0000000000000000  0000000000000000  0001a2b5  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
320 .debug_macro  000000de  0000000000000000  0000000000000000  0001a2da  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
321 .debug_macro  0000001c  0000000000000000  0000000000000000  0001a3b8  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
322 .debug_macro  00000058  0000000000000000  0000000000000000  0001a3d4  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
323 .debug_macro  00000088  0000000000000000  0000000000000000  0001a42c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
324 .debug_macro  00000076  0000000000000000  0000000000000000  0001a4b4  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
325 .debug_macro  00000010  0000000000000000  0000000000000000  0001a52a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
326 .debug_macro  00000041  0000000000000000  0000000000000000  0001a53a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
327 .debug_macro  000000ee  0000000000000000  0000000000000000  0001a57b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
328 .debug_macro  00000024  0000000000000000  0000000000000000  0001a669  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
329 .debug_macro  00000052  0000000000000000  0000000000000000  0001a68d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
330 .debug_macro  00000019  0000000000000000  0000000000000000  0001a6df  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
331 .debug_macro  00000026  0000000000000000  0000000000000000  0001a6f8  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
332 .debug_line   0000141b  0000000000000000  0000000000000000  0001a71e  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
333 .debug_str    00025ea9  0000000000000000  0000000000000000  0001bb39  2**0
                  CONTENTS, READONLY, DEBUGGING
334 .data.DW.ref.__gxx_personality_v0 00000008  0000000000000000  0000000000000000  000419e8  2**3
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
335 .comment      0000002e  0000000000000000  0000000000000000  000419f0  2**0
                  CONTENTS, READONLY
336 .note.GNU-stack 00000000  0000000000000000  0000000000000000  00041a1e  2**0
                  CONTENTS, READONLY
337 .eh_frame     00000760  0000000000000000  0000000000000000  00041a20  2**3
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA

Дизассемблирование раздела .text:

0000000000000000 <_ZN4Sems15semsInitDefaultEv>:
#include "sems.h"

void Sems::semsInitDefault()
{
       0:	55                   	push   %rbp
       1:	48 89 e5             	mov    %rsp,%rbp
       4:	53                   	push   %rbx
       5:	48 83 ec 38          	sub    $0x38,%rsp
       9:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
       d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
      14:	00 00 
      16:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      1a:	31 c0                	xor    %eax,%eax
    this->Sem.insert("rotl",        0x01);
      1c:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%rbp)
      23:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
      27:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2e <_ZN4Sems15semsInitDefaultEv+0x2e>
      2e:	48 89 c7             	mov    %rax,%rdi
      31:	e8 00 00 00 00       	callq  36 <_ZN4Sems15semsInitDefaultEv+0x36>
      36:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
      3a:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
      3e:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
      42:	48 89 ce             	mov    %rcx,%rsi
      45:	48 89 c7             	mov    %rax,%rdi
      48:	e8 00 00 00 00       	callq  4d <_ZN4Sems15semsInitDefaultEv+0x4d>
      4d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
      51:	48 89 c7             	mov    %rax,%rdi
      54:	e8 00 00 00 00       	callq  59 <_ZN4Sems15semsInitDefaultEv+0x59>
    this->Sem.insert("rotr",        0x02);
      59:	c7 45 dc 02 00 00 00 	movl   $0x2,-0x24(%rbp)
      60:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
      64:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6b <_ZN4Sems15semsInitDefaultEv+0x6b>
      6b:	48 89 c7             	mov    %rax,%rdi
      6e:	e8 00 00 00 00       	callq  73 <_ZN4Sems15semsInitDefaultEv+0x73>
      73:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
      77:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
      7b:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
      7f:	48 89 ce             	mov    %rcx,%rsi
      82:	48 89 c7             	mov    %rax,%rdi
      85:	e8 00 00 00 00       	callq  8a <_ZN4Sems15semsInitDefaultEv+0x8a>
      8a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
      8e:	48 89 c7             	mov    %rax,%rdi
      91:	e8 00 00 00 00       	callq  96 <_ZN4Sems15semsInitDefaultEv+0x96>
    this->Sem.insert("ashl",        0x03);
      96:	c7 45 dc 03 00 00 00 	movl   $0x3,-0x24(%rbp)
      9d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
      a1:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # a8 <_ZN4Sems15semsInitDefaultEv+0xa8>
      a8:	48 89 c7             	mov    %rax,%rdi
      ab:	e8 00 00 00 00       	callq  b0 <_ZN4Sems15semsInitDefaultEv+0xb0>
      b0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
      b4:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
      b8:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
      bc:	48 89 ce             	mov    %rcx,%rsi
      bf:	48 89 c7             	mov    %rax,%rdi
      c2:	e8 00 00 00 00       	callq  c7 <_ZN4Sems15semsInitDefaultEv+0xc7>
      c7:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
      cb:	48 89 c7             	mov    %rax,%rdi
      ce:	e8 00 00 00 00       	callq  d3 <_ZN4Sems15semsInitDefaultEv+0xd3>
    this->Sem.insert("ashr",        0x04);
      d3:	c7 45 dc 04 00 00 00 	movl   $0x4,-0x24(%rbp)
      da:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
      de:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # e5 <_ZN4Sems15semsInitDefaultEv+0xe5>
      e5:	48 89 c7             	mov    %rax,%rdi
      e8:	e8 00 00 00 00       	callq  ed <_ZN4Sems15semsInitDefaultEv+0xed>
      ed:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
      f1:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
      f5:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
      f9:	48 89 ce             	mov    %rcx,%rsi
      fc:	48 89 c7             	mov    %rax,%rdi
      ff:	e8 00 00 00 00       	callq  104 <_ZN4Sems15semsInitDefaultEv+0x104>
     104:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     108:	48 89 c7             	mov    %rax,%rdi
     10b:	e8 00 00 00 00       	callq  110 <_ZN4Sems15semsInitDefaultEv+0x110>
    this->Sem.insert("iif",         0x05);
     110:	c7 45 dc 05 00 00 00 	movl   $0x5,-0x24(%rbp)
     117:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     11b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 122 <_ZN4Sems15semsInitDefaultEv+0x122>
     122:	48 89 c7             	mov    %rax,%rdi
     125:	e8 00 00 00 00       	callq  12a <_ZN4Sems15semsInitDefaultEv+0x12a>
     12a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
     12e:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
     132:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
     136:	48 89 ce             	mov    %rcx,%rsi
     139:	48 89 c7             	mov    %rax,%rdi
     13c:	e8 00 00 00 00       	callq  141 <_ZN4Sems15semsInitDefaultEv+0x141>
     141:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     145:	48 89 c7             	mov    %rax,%rdi
     148:	e8 00 00 00 00       	callq  14d <_ZN4Sems15semsInitDefaultEv+0x14d>
    this->Sem.insert("read",        0x06);
     14d:	c7 45 dc 06 00 00 00 	movl   $0x6,-0x24(%rbp)
     154:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     158:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 15f <_ZN4Sems15semsInitDefaultEv+0x15f>
     15f:	48 89 c7             	mov    %rax,%rdi
     162:	e8 00 00 00 00       	callq  167 <_ZN4Sems15semsInitDefaultEv+0x167>
     167:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
     16b:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
     16f:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
     173:	48 89 ce             	mov    %rcx,%rsi
     176:	48 89 c7             	mov    %rax,%rdi
     179:	e8 00 00 00 00       	callq  17e <_ZN4Sems15semsInitDefaultEv+0x17e>
     17e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     182:	48 89 c7             	mov    %rax,%rdi
     185:	e8 00 00 00 00       	callq  18a <_ZN4Sems15semsInitDefaultEv+0x18a>
    this->Sem.insert("write",       0x07);
     18a:	c7 45 dc 07 00 00 00 	movl   $0x7,-0x24(%rbp)
     191:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     195:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 19c <_ZN4Sems15semsInitDefaultEv+0x19c>
     19c:	48 89 c7             	mov    %rax,%rdi
     19f:	e8 00 00 00 00       	callq  1a4 <_ZN4Sems15semsInitDefaultEv+0x1a4>
     1a4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
     1a8:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
     1ac:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
     1b0:	48 89 ce             	mov    %rcx,%rsi
     1b3:	48 89 c7             	mov    %rax,%rdi
     1b6:	e8 00 00 00 00       	callq  1bb <_ZN4Sems15semsInitDefaultEv+0x1bb>
     1bb:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     1bf:	48 89 c7             	mov    %rax,%rdi
     1c2:	e8 00 00 00 00       	callq  1c7 <_ZN4Sems15semsInitDefaultEv+0x1c7>
    this->Sem.insert("write_all",	0x08);
     1c7:	c7 45 dc 08 00 00 00 	movl   $0x8,-0x24(%rbp)
     1ce:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     1d2:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1d9 <_ZN4Sems15semsInitDefaultEv+0x1d9>
     1d9:	48 89 c7             	mov    %rax,%rdi
     1dc:	e8 00 00 00 00       	callq  1e1 <_ZN4Sems15semsInitDefaultEv+0x1e1>
     1e1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
     1e5:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
     1e9:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
     1ed:	48 89 ce             	mov    %rcx,%rsi
     1f0:	48 89 c7             	mov    %rax,%rdi
     1f3:	e8 00 00 00 00       	callq  1f8 <_ZN4Sems15semsInitDefaultEv+0x1f8>
     1f8:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     1fc:	48 89 c7             	mov    %rax,%rdi
     1ff:	e8 00 00 00 00       	callq  204 <_ZN4Sems15semsInitDefaultEv+0x204>
    this->Sem.insert("write_sel",	0x09);
     204:	c7 45 dc 09 00 00 00 	movl   $0x9,-0x24(%rbp)
     20b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     20f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 216 <_ZN4Sems15semsInitDefaultEv+0x216>
     216:	48 89 c7             	mov    %rax,%rdi
     219:	e8 00 00 00 00       	callq  21e <_ZN4Sems15semsInitDefaultEv+0x21e>
     21e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
     222:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
     226:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
     22a:	48 89 ce             	mov    %rcx,%rsi
     22d:	48 89 c7             	mov    %rax,%rdi
     230:	e8 00 00 00 00       	callq  235 <_ZN4Sems15semsInitDefaultEv+0x235>
     235:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     239:	48 89 c7             	mov    %rax,%rdi
     23c:	e8 00 00 00 00       	callq  241 <_ZN4Sems15semsInitDefaultEv+0x241>
    this->Sem.insert("on",          0x0A);
     241:	c7 45 dc 0a 00 00 00 	movl   $0xa,-0x24(%rbp)
     248:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     24c:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 253 <_ZN4Sems15semsInitDefaultEv+0x253>
     253:	48 89 c7             	mov    %rax,%rdi
     256:	e8 00 00 00 00       	callq  25b <_ZN4Sems15semsInitDefaultEv+0x25b>
     25b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
     25f:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
     263:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
     267:	48 89 ce             	mov    %rcx,%rsi
     26a:	48 89 c7             	mov    %rax,%rdi
     26d:	e8 00 00 00 00       	callq  272 <_ZN4Sems15semsInitDefaultEv+0x272>
     272:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     276:	48 89 c7             	mov    %rax,%rdi
     279:	e8 00 00 00 00       	callq  27e <_ZN4Sems15semsInitDefaultEv+0x27e>
    this->Sem.insert("off",         0x0B);
     27e:	c7 45 dc 0b 00 00 00 	movl   $0xb,-0x24(%rbp)
     285:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     289:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 290 <_ZN4Sems15semsInitDefaultEv+0x290>
     290:	48 89 c7             	mov    %rax,%rdi
     293:	e8 00 00 00 00       	callq  298 <_ZN4Sems15semsInitDefaultEv+0x298>
     298:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
     29c:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
     2a0:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
     2a4:	48 89 ce             	mov    %rcx,%rsi
     2a7:	48 89 c7             	mov    %rax,%rdi
     2aa:	e8 00 00 00 00       	callq  2af <_ZN4Sems15semsInitDefaultEv+0x2af>
     2af:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     2b3:	48 89 c7             	mov    %rax,%rdi
     2b6:	e8 00 00 00 00       	callq  2bb <_ZN4Sems15semsInitDefaultEv+0x2bb>
    this->Sem.insert("local_send_event",	0x0C);
     2bb:	c7 45 dc 0c 00 00 00 	movl   $0xc,-0x24(%rbp)
     2c2:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     2c6:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2cd <_ZN4Sems15semsInitDefaultEv+0x2cd>
     2cd:	48 89 c7             	mov    %rax,%rdi
     2d0:	e8 00 00 00 00       	callq  2d5 <_ZN4Sems15semsInitDefaultEv+0x2d5>
     2d5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
     2d9:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
     2dd:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
     2e1:	48 89 ce             	mov    %rcx,%rsi
     2e4:	48 89 c7             	mov    %rax,%rdi
     2e7:	e8 00 00 00 00       	callq  2ec <_ZN4Sems15semsInitDefaultEv+0x2ec>
     2ec:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     2f0:	48 89 c7             	mov    %rax,%rdi
     2f3:	e8 00 00 00 00       	callq  2f8 <_ZN4Sems15semsInitDefaultEv+0x2f8>
    this->Sem.insert("send_event",	0x0D);
     2f8:	c7 45 dc 0d 00 00 00 	movl   $0xd,-0x24(%rbp)
     2ff:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     303:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 30a <_ZN4Sems15semsInitDefaultEv+0x30a>
     30a:	48 89 c7             	mov    %rax,%rdi
     30d:	e8 00 00 00 00       	callq  312 <_ZN4Sems15semsInitDefaultEv+0x312>
     312:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
     316:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
     31a:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
     31e:	48 89 ce             	mov    %rcx,%rsi
     321:	48 89 c7             	mov    %rax,%rdi
     324:	e8 00 00 00 00       	callq  329 <_ZN4Sems15semsInitDefaultEv+0x329>
     329:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     32d:	48 89 c7             	mov    %rax,%rdi
     330:	e8 00 00 00 00       	callq  335 <_ZN4Sems15semsInitDefaultEv+0x335>
    this->Sem.insert("send_event_sel",	0x0E);
     335:	c7 45 dc 0e 00 00 00 	movl   $0xe,-0x24(%rbp)
     33c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     340:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 347 <_ZN4Sems15semsInitDefaultEv+0x347>
     347:	48 89 c7             	mov    %rax,%rdi
     34a:	e8 00 00 00 00       	callq  34f <_ZN4Sems15semsInitDefaultEv+0x34f>
     34f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
     353:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
     357:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
     35b:	48 89 ce             	mov    %rcx,%rsi
     35e:	48 89 c7             	mov    %rax,%rdi
     361:	e8 00 00 00 00       	callq  366 <_ZN4Sems15semsInitDefaultEv+0x366>
     366:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     36a:	48 89 c7             	mov    %rax,%rdi
     36d:	e8 00 00 00 00       	callq  372 <_ZN4Sems15semsInitDefaultEv+0x372>
    this->Sem.insert("send_event_sync",	0x0F);
     372:	c7 45 dc 0f 00 00 00 	movl   $0xf,-0x24(%rbp)
     379:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     37d:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 384 <_ZN4Sems15semsInitDefaultEv+0x384>
     384:	48 89 c7             	mov    %rax,%rdi
     387:	e8 00 00 00 00       	callq  38c <_ZN4Sems15semsInitDefaultEv+0x38c>
     38c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
     390:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
     394:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
     398:	48 89 ce             	mov    %rcx,%rsi
     39b:	48 89 c7             	mov    %rax,%rdi
     39e:	e8 00 00 00 00       	callq  3a3 <_ZN4Sems15semsInitDefaultEv+0x3a3>
     3a3:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     3a7:	48 89 c7             	mov    %rax,%rdi
     3aa:	e8 00 00 00 00       	callq  3af <_ZN4Sems15semsInitDefaultEv+0x3af>
    this->Sem.insert("send_event_sync_sel",	0x10);
     3af:	c7 45 dc 10 00 00 00 	movl   $0x10,-0x24(%rbp)
     3b6:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     3ba:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3c1 <_ZN4Sems15semsInitDefaultEv+0x3c1>
     3c1:	48 89 c7             	mov    %rax,%rdi
     3c4:	e8 00 00 00 00       	callq  3c9 <_ZN4Sems15semsInitDefaultEv+0x3c9>
     3c9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
     3cd:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
     3d1:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
     3d5:	48 89 ce             	mov    %rcx,%rsi
     3d8:	48 89 c7             	mov    %rax,%rdi
     3db:	e8 00 00 00 00       	callq  3e0 <_ZN4Sems15semsInitDefaultEv+0x3e0>
     3e0:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     3e4:	48 89 c7             	mov    %rax,%rdi
     3e7:	e8 00 00 00 00       	callq  3ec <_ZN4Sems15semsInitDefaultEv+0x3ec>
    this->Sem.insert("send_event_all",	0x11);
     3ec:	c7 45 dc 11 00 00 00 	movl   $0x11,-0x24(%rbp)
     3f3:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     3f7:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3fe <_ZN4Sems15semsInitDefaultEv+0x3fe>
     3fe:	48 89 c7             	mov    %rax,%rdi
     401:	e8 00 00 00 00       	callq  406 <_ZN4Sems15semsInitDefaultEv+0x406>
     406:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
     40a:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
     40e:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
     412:	48 89 ce             	mov    %rcx,%rsi
     415:	48 89 c7             	mov    %rax,%rdi
     418:	e8 00 00 00 00       	callq  41d <_ZN4Sems15semsInitDefaultEv+0x41d>
     41d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     421:	48 89 c7             	mov    %rax,%rdi
     424:	e8 00 00 00 00       	callq  429 <_ZN4Sems15semsInitDefaultEv+0x429>
    this->Sem.insert("end_proc",	0x12);
     429:	c7 45 dc 12 00 00 00 	movl   $0x12,-0x24(%rbp)
     430:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     434:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 43b <_ZN4Sems15semsInitDefaultEv+0x43b>
     43b:	48 89 c7             	mov    %rax,%rdi
     43e:	e8 00 00 00 00       	callq  443 <_ZN4Sems15semsInitDefaultEv+0x443>
     443:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
     447:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
     44b:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
     44f:	48 89 ce             	mov    %rcx,%rsi
     452:	48 89 c7             	mov    %rax,%rdi
     455:	e8 00 00 00 00       	callq  45a <_ZN4Sems15semsInitDefaultEv+0x45a>
     45a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     45e:	48 89 c7             	mov    %rax,%rdi
     461:	e8 00 00 00 00       	callq  466 <_ZN4Sems15semsInitDefaultEv+0x466>
    this->Sem.insert("delay",       0x13);
     466:	c7 45 dc 13 00 00 00 	movl   $0x13,-0x24(%rbp)
     46d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     471:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 478 <_ZN4Sems15semsInitDefaultEv+0x478>
     478:	48 89 c7             	mov    %rax,%rdi
     47b:	e8 00 00 00 00       	callq  480 <_ZN4Sems15semsInitDefaultEv+0x480>
     480:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
     484:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
     488:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
     48c:	48 89 ce             	mov    %rcx,%rsi
     48f:	48 89 c7             	mov    %rax,%rdi
     492:	e8 00 00 00 00       	callq  497 <_ZN4Sems15semsInitDefaultEv+0x497>
     497:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     49b:	48 89 c7             	mov    %rax,%rdi
     49e:	e8 00 00 00 00       	callq  4a3 <_ZN4Sems15semsInitDefaultEv+0x4a3>
    this->Sem.insert("make_dialog",	0x14);
     4a3:	c7 45 dc 14 00 00 00 	movl   $0x14,-0x24(%rbp)
     4aa:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     4ae:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4b5 <_ZN4Sems15semsInitDefaultEv+0x4b5>
     4b5:	48 89 c7             	mov    %rax,%rdi
     4b8:	e8 00 00 00 00       	callq  4bd <_ZN4Sems15semsInitDefaultEv+0x4bd>
     4bd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
     4c1:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
     4c5:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
     4c9:	48 89 ce             	mov    %rcx,%rsi
     4cc:	48 89 c7             	mov    %rax,%rdi
     4cf:	e8 00 00 00 00       	callq  4d4 <_ZN4Sems15semsInitDefaultEv+0x4d4>
     4d4:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     4d8:	48 89 c7             	mov    %rax,%rdi
     4db:	e8 00 00 00 00       	callq  4e0 <_ZN4Sems15semsInitDefaultEv+0x4e0>
    this->Sem.insert("print",       0x15);
     4e0:	c7 45 dc 15 00 00 00 	movl   $0x15,-0x24(%rbp)
     4e7:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     4eb:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4f2 <_ZN4Sems15semsInitDefaultEv+0x4f2>
     4f2:	48 89 c7             	mov    %rax,%rdi
     4f5:	e8 00 00 00 00       	callq  4fa <_ZN4Sems15semsInitDefaultEv+0x4fa>
     4fa:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
     4fe:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
     502:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
     506:	48 89 ce             	mov    %rcx,%rsi
     509:	48 89 c7             	mov    %rax,%rdi
     50c:	e8 00 00 00 00       	callq  511 <_ZN4Sems15semsInitDefaultEv+0x511>
     511:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     515:	48 89 c7             	mov    %rax,%rdi
     518:	e8 00 00 00 00       	callq  51d <_ZN4Sems15semsInitDefaultEv+0x51d>
    this->Sem.insert("telemetry",	0x16);
     51d:	c7 45 dc 16 00 00 00 	movl   $0x16,-0x24(%rbp)
     524:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     528:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 52f <_ZN4Sems15semsInitDefaultEv+0x52f>
     52f:	48 89 c7             	mov    %rax,%rdi
     532:	e8 00 00 00 00       	callq  537 <_ZN4Sems15semsInitDefaultEv+0x537>
     537:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
     53b:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
     53f:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
     543:	48 89 ce             	mov    %rcx,%rsi
     546:	48 89 c7             	mov    %rax,%rdi
     549:	e8 00 00 00 00       	callq  54e <_ZN4Sems15semsInitDefaultEv+0x54e>
     54e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     552:	48 89 c7             	mov    %rax,%rdi
     555:	e8 00 00 00 00       	callq  55a <_ZN4Sems15semsInitDefaultEv+0x55a>
    this->Sem.insert("telemetry_reset",	0x17);
     55a:	c7 45 dc 17 00 00 00 	movl   $0x17,-0x24(%rbp)
     561:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     565:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 56c <_ZN4Sems15semsInitDefaultEv+0x56c>
     56c:	48 89 c7             	mov    %rax,%rdi
     56f:	e8 00 00 00 00       	callq  574 <_ZN4Sems15semsInitDefaultEv+0x574>
     574:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
     578:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
     57c:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
     580:	48 89 ce             	mov    %rcx,%rsi
     583:	48 89 c7             	mov    %rax,%rdi
     586:	e8 00 00 00 00       	callq  58b <_ZN4Sems15semsInitDefaultEv+0x58b>
     58b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     58f:	48 89 c7             	mov    %rax,%rdi
     592:	e8 00 00 00 00       	callq  597 <_ZN4Sems15semsInitDefaultEv+0x597>
    this->Sem.insert("check_hw_connection", 	0x18);
     597:	c7 45 dc 18 00 00 00 	movl   $0x18,-0x24(%rbp)
     59e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     5a2:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5a9 <_ZN4Sems15semsInitDefaultEv+0x5a9>
     5a9:	48 89 c7             	mov    %rax,%rdi
     5ac:	e8 00 00 00 00       	callq  5b1 <_ZN4Sems15semsInitDefaultEv+0x5b1>
     5b1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
     5b5:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
     5b9:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
     5bd:	48 89 ce             	mov    %rcx,%rsi
     5c0:	48 89 c7             	mov    %rax,%rdi
     5c3:	e8 00 00 00 00       	callq  5c8 <_ZN4Sems15semsInitDefaultEv+0x5c8>
     5c8:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     5cc:	48 89 c7             	mov    %rax,%rdi
     5cf:	e8 00 00 00 00       	callq  5d4 <_ZN4Sems15semsInitDefaultEv+0x5d4>
    this->Sem.insert("break",       0x19);
     5d4:	c7 45 dc 19 00 00 00 	movl   $0x19,-0x24(%rbp)
     5db:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     5df:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5e6 <_ZN4Sems15semsInitDefaultEv+0x5e6>
     5e6:	48 89 c7             	mov    %rax,%rdi
     5e9:	e8 00 00 00 00       	callq  5ee <_ZN4Sems15semsInitDefaultEv+0x5ee>
     5ee:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
     5f2:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
     5f6:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
     5fa:	48 89 ce             	mov    %rcx,%rsi
     5fd:	48 89 c7             	mov    %rax,%rdi
     600:	e8 00 00 00 00       	callq  605 <_ZN4Sems15semsInitDefaultEv+0x605>
     605:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     609:	48 89 c7             	mov    %rax,%rdi
     60c:	e8 00 00 00 00       	callq  611 <_ZN4Sems15semsInitDefaultEv+0x611>
    this->Sem.insert("continue",	0x20);
     611:	c7 45 dc 20 00 00 00 	movl   $0x20,-0x24(%rbp)
     618:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     61c:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 623 <_ZN4Sems15semsInitDefaultEv+0x623>
     623:	48 89 c7             	mov    %rax,%rdi
     626:	e8 00 00 00 00       	callq  62b <_ZN4Sems15semsInitDefaultEv+0x62b>
     62b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
     62f:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
     633:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
     637:	48 89 ce             	mov    %rcx,%rsi
     63a:	48 89 c7             	mov    %rax,%rdi
     63d:	e8 00 00 00 00       	callq  642 <_ZN4Sems15semsInitDefaultEv+0x642>
     642:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     646:	48 89 c7             	mov    %rax,%rdi
     649:	e8 00 00 00 00       	callq  64e <_ZN4Sems15semsInitDefaultEv+0x64e>
    this->Sem.insert("transmitt",	0x21);
     64e:	c7 45 dc 21 00 00 00 	movl   $0x21,-0x24(%rbp)
     655:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     659:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 660 <_ZN4Sems15semsInitDefaultEv+0x660>
     660:	48 89 c7             	mov    %rax,%rdi
     663:	e8 00 00 00 00       	callq  668 <_ZN4Sems15semsInitDefaultEv+0x668>
     668:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
     66c:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
     670:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
     674:	48 89 ce             	mov    %rcx,%rsi
     677:	48 89 c7             	mov    %rax,%rdi
     67a:	e8 00 00 00 00       	callq  67f <_ZN4Sems15semsInitDefaultEv+0x67f>
     67f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     683:	48 89 c7             	mov    %rax,%rdi
     686:	e8 00 00 00 00       	callq  68b <_ZN4Sems15semsInitDefaultEv+0x68b>
    this->Sem.insert("receive",     0x22);
     68b:	c7 45 dc 22 00 00 00 	movl   $0x22,-0x24(%rbp)
     692:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     696:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 69d <_ZN4Sems15semsInitDefaultEv+0x69d>
     69d:	48 89 c7             	mov    %rax,%rdi
     6a0:	e8 00 00 00 00       	callq  6a5 <_ZN4Sems15semsInitDefaultEv+0x6a5>
     6a5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
     6a9:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
     6ad:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
     6b1:	48 89 ce             	mov    %rcx,%rsi
     6b4:	48 89 c7             	mov    %rax,%rdi
     6b7:	e8 00 00 00 00       	callq  6bc <_ZN4Sems15semsInitDefaultEv+0x6bc>
     6bc:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     6c0:	48 89 c7             	mov    %rax,%rdi
     6c3:	e8 00 00 00 00       	callq  6c8 <_ZN4Sems15semsInitDefaultEv+0x6c8>
    this->Sem.insert("debug_prnt",	0x23);
     6c8:	c7 45 dc 23 00 00 00 	movl   $0x23,-0x24(%rbp)
     6cf:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     6d3:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6da <_ZN4Sems15semsInitDefaultEv+0x6da>
     6da:	48 89 c7             	mov    %rax,%rdi
     6dd:	e8 00 00 00 00       	callq  6e2 <_ZN4Sems15semsInitDefaultEv+0x6e2>
     6e2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
     6e6:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
     6ea:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
     6ee:	48 89 ce             	mov    %rcx,%rsi
     6f1:	48 89 c7             	mov    %rax,%rdi
     6f4:	e8 00 00 00 00       	callq  6f9 <_ZN4Sems15semsInitDefaultEv+0x6f9>
     6f9:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     6fd:	48 89 c7             	mov    %rax,%rdi
     700:	e8 00 00 00 00       	callq  705 <_ZN4Sems15semsInitDefaultEv+0x705>
}
     705:	90                   	nop
     706:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
     70a:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
     711:	00 00 
     713:	0f 84 fc 02 00 00    	je     a15 <_ZN4Sems15semsInitDefaultEv+0xa15>
     719:	e9 f2 02 00 00       	jmpq   a10 <_ZN4Sems15semsInitDefaultEv+0xa10>
     71e:	48 89 c3             	mov    %rax,%rbx
#include "sems.h"

void Sems::semsInitDefault()
{
    this->Sem.insert("rotl",        0x01);
     721:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     725:	48 89 c7             	mov    %rax,%rdi
     728:	e8 00 00 00 00       	callq  72d <_ZN4Sems15semsInitDefaultEv+0x72d>
     72d:	48 89 d8             	mov    %rbx,%rax
     730:	48 89 c7             	mov    %rax,%rdi
     733:	e8 00 00 00 00       	callq  738 <_ZN4Sems15semsInitDefaultEv+0x738>
     738:	48 89 c3             	mov    %rax,%rbx
    this->Sem.insert("rotr",        0x02);
     73b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     73f:	48 89 c7             	mov    %rax,%rdi
     742:	e8 00 00 00 00       	callq  747 <_ZN4Sems15semsInitDefaultEv+0x747>
     747:	48 89 d8             	mov    %rbx,%rax
     74a:	48 89 c7             	mov    %rax,%rdi
     74d:	e8 00 00 00 00       	callq  752 <_ZN4Sems15semsInitDefaultEv+0x752>
     752:	48 89 c3             	mov    %rax,%rbx
    this->Sem.insert("ashl",        0x03);
     755:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     759:	48 89 c7             	mov    %rax,%rdi
     75c:	e8 00 00 00 00       	callq  761 <_ZN4Sems15semsInitDefaultEv+0x761>
     761:	48 89 d8             	mov    %rbx,%rax
     764:	48 89 c7             	mov    %rax,%rdi
     767:	e8 00 00 00 00       	callq  76c <_ZN4Sems15semsInitDefaultEv+0x76c>
     76c:	48 89 c3             	mov    %rax,%rbx
    this->Sem.insert("ashr",        0x04);
     76f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     773:	48 89 c7             	mov    %rax,%rdi
     776:	e8 00 00 00 00       	callq  77b <_ZN4Sems15semsInitDefaultEv+0x77b>
     77b:	48 89 d8             	mov    %rbx,%rax
     77e:	48 89 c7             	mov    %rax,%rdi
     781:	e8 00 00 00 00       	callq  786 <_ZN4Sems15semsInitDefaultEv+0x786>
     786:	48 89 c3             	mov    %rax,%rbx
    this->Sem.insert("iif",         0x05);
     789:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     78d:	48 89 c7             	mov    %rax,%rdi
     790:	e8 00 00 00 00       	callq  795 <_ZN4Sems15semsInitDefaultEv+0x795>
     795:	48 89 d8             	mov    %rbx,%rax
     798:	48 89 c7             	mov    %rax,%rdi
     79b:	e8 00 00 00 00       	callq  7a0 <_ZN4Sems15semsInitDefaultEv+0x7a0>
     7a0:	48 89 c3             	mov    %rax,%rbx
    this->Sem.insert("read",        0x06);
     7a3:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     7a7:	48 89 c7             	mov    %rax,%rdi
     7aa:	e8 00 00 00 00       	callq  7af <_ZN4Sems15semsInitDefaultEv+0x7af>
     7af:	48 89 d8             	mov    %rbx,%rax
     7b2:	48 89 c7             	mov    %rax,%rdi
     7b5:	e8 00 00 00 00       	callq  7ba <_ZN4Sems15semsInitDefaultEv+0x7ba>
     7ba:	48 89 c3             	mov    %rax,%rbx
    this->Sem.insert("write",       0x07);
     7bd:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     7c1:	48 89 c7             	mov    %rax,%rdi
     7c4:	e8 00 00 00 00       	callq  7c9 <_ZN4Sems15semsInitDefaultEv+0x7c9>
     7c9:	48 89 d8             	mov    %rbx,%rax
     7cc:	48 89 c7             	mov    %rax,%rdi
     7cf:	e8 00 00 00 00       	callq  7d4 <_ZN4Sems15semsInitDefaultEv+0x7d4>
     7d4:	48 89 c3             	mov    %rax,%rbx
    this->Sem.insert("write_all",	0x08);
     7d7:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     7db:	48 89 c7             	mov    %rax,%rdi
     7de:	e8 00 00 00 00       	callq  7e3 <_ZN4Sems15semsInitDefaultEv+0x7e3>
     7e3:	48 89 d8             	mov    %rbx,%rax
     7e6:	48 89 c7             	mov    %rax,%rdi
     7e9:	e8 00 00 00 00       	callq  7ee <_ZN4Sems15semsInitDefaultEv+0x7ee>
     7ee:	48 89 c3             	mov    %rax,%rbx
    this->Sem.insert("write_sel",	0x09);
     7f1:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     7f5:	48 89 c7             	mov    %rax,%rdi
     7f8:	e8 00 00 00 00       	callq  7fd <_ZN4Sems15semsInitDefaultEv+0x7fd>
     7fd:	48 89 d8             	mov    %rbx,%rax
     800:	48 89 c7             	mov    %rax,%rdi
     803:	e8 00 00 00 00       	callq  808 <_ZN4Sems15semsInitDefaultEv+0x808>
     808:	48 89 c3             	mov    %rax,%rbx
    this->Sem.insert("on",          0x0A);
     80b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     80f:	48 89 c7             	mov    %rax,%rdi
     812:	e8 00 00 00 00       	callq  817 <_ZN4Sems15semsInitDefaultEv+0x817>
     817:	48 89 d8             	mov    %rbx,%rax
     81a:	48 89 c7             	mov    %rax,%rdi
     81d:	e8 00 00 00 00       	callq  822 <_ZN4Sems15semsInitDefaultEv+0x822>
     822:	48 89 c3             	mov    %rax,%rbx
    this->Sem.insert("off",         0x0B);
     825:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     829:	48 89 c7             	mov    %rax,%rdi
     82c:	e8 00 00 00 00       	callq  831 <_ZN4Sems15semsInitDefaultEv+0x831>
     831:	48 89 d8             	mov    %rbx,%rax
     834:	48 89 c7             	mov    %rax,%rdi
     837:	e8 00 00 00 00       	callq  83c <_ZN4Sems15semsInitDefaultEv+0x83c>
     83c:	48 89 c3             	mov    %rax,%rbx
    this->Sem.insert("local_send_event",	0x0C);
     83f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     843:	48 89 c7             	mov    %rax,%rdi
     846:	e8 00 00 00 00       	callq  84b <_ZN4Sems15semsInitDefaultEv+0x84b>
     84b:	48 89 d8             	mov    %rbx,%rax
     84e:	48 89 c7             	mov    %rax,%rdi
     851:	e8 00 00 00 00       	callq  856 <_ZN4Sems15semsInitDefaultEv+0x856>
     856:	48 89 c3             	mov    %rax,%rbx
    this->Sem.insert("send_event",	0x0D);
     859:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     85d:	48 89 c7             	mov    %rax,%rdi
     860:	e8 00 00 00 00       	callq  865 <_ZN4Sems15semsInitDefaultEv+0x865>
     865:	48 89 d8             	mov    %rbx,%rax
     868:	48 89 c7             	mov    %rax,%rdi
     86b:	e8 00 00 00 00       	callq  870 <_ZN4Sems15semsInitDefaultEv+0x870>
     870:	48 89 c3             	mov    %rax,%rbx
    this->Sem.insert("send_event_sel",	0x0E);
     873:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     877:	48 89 c7             	mov    %rax,%rdi
     87a:	e8 00 00 00 00       	callq  87f <_ZN4Sems15semsInitDefaultEv+0x87f>
     87f:	48 89 d8             	mov    %rbx,%rax
     882:	48 89 c7             	mov    %rax,%rdi
     885:	e8 00 00 00 00       	callq  88a <_ZN4Sems15semsInitDefaultEv+0x88a>
     88a:	48 89 c3             	mov    %rax,%rbx
    this->Sem.insert("send_event_sync",	0x0F);
     88d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     891:	48 89 c7             	mov    %rax,%rdi
     894:	e8 00 00 00 00       	callq  899 <_ZN4Sems15semsInitDefaultEv+0x899>
     899:	48 89 d8             	mov    %rbx,%rax
     89c:	48 89 c7             	mov    %rax,%rdi
     89f:	e8 00 00 00 00       	callq  8a4 <_ZN4Sems15semsInitDefaultEv+0x8a4>
     8a4:	48 89 c3             	mov    %rax,%rbx
    this->Sem.insert("send_event_sync_sel",	0x10);
     8a7:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     8ab:	48 89 c7             	mov    %rax,%rdi
     8ae:	e8 00 00 00 00       	callq  8b3 <_ZN4Sems15semsInitDefaultEv+0x8b3>
     8b3:	48 89 d8             	mov    %rbx,%rax
     8b6:	48 89 c7             	mov    %rax,%rdi
     8b9:	e8 00 00 00 00       	callq  8be <_ZN4Sems15semsInitDefaultEv+0x8be>
     8be:	48 89 c3             	mov    %rax,%rbx
    this->Sem.insert("send_event_all",	0x11);
     8c1:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     8c5:	48 89 c7             	mov    %rax,%rdi
     8c8:	e8 00 00 00 00       	callq  8cd <_ZN4Sems15semsInitDefaultEv+0x8cd>
     8cd:	48 89 d8             	mov    %rbx,%rax
     8d0:	48 89 c7             	mov    %rax,%rdi
     8d3:	e8 00 00 00 00       	callq  8d8 <_ZN4Sems15semsInitDefaultEv+0x8d8>
     8d8:	48 89 c3             	mov    %rax,%rbx
    this->Sem.insert("end_proc",	0x12);
     8db:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     8df:	48 89 c7             	mov    %rax,%rdi
     8e2:	e8 00 00 00 00       	callq  8e7 <_ZN4Sems15semsInitDefaultEv+0x8e7>
     8e7:	48 89 d8             	mov    %rbx,%rax
     8ea:	48 89 c7             	mov    %rax,%rdi
     8ed:	e8 00 00 00 00       	callq  8f2 <_ZN4Sems15semsInitDefaultEv+0x8f2>
     8f2:	48 89 c3             	mov    %rax,%rbx
    this->Sem.insert("delay",       0x13);
     8f5:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     8f9:	48 89 c7             	mov    %rax,%rdi
     8fc:	e8 00 00 00 00       	callq  901 <_ZN4Sems15semsInitDefaultEv+0x901>
     901:	48 89 d8             	mov    %rbx,%rax
     904:	48 89 c7             	mov    %rax,%rdi
     907:	e8 00 00 00 00       	callq  90c <_ZN4Sems15semsInitDefaultEv+0x90c>
     90c:	48 89 c3             	mov    %rax,%rbx
    this->Sem.insert("make_dialog",	0x14);
     90f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     913:	48 89 c7             	mov    %rax,%rdi
     916:	e8 00 00 00 00       	callq  91b <_ZN4Sems15semsInitDefaultEv+0x91b>
     91b:	48 89 d8             	mov    %rbx,%rax
     91e:	48 89 c7             	mov    %rax,%rdi
     921:	e8 00 00 00 00       	callq  926 <_ZN4Sems15semsInitDefaultEv+0x926>
     926:	48 89 c3             	mov    %rax,%rbx
    this->Sem.insert("print",       0x15);
     929:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     92d:	48 89 c7             	mov    %rax,%rdi
     930:	e8 00 00 00 00       	callq  935 <_ZN4Sems15semsInitDefaultEv+0x935>
     935:	48 89 d8             	mov    %rbx,%rax
     938:	48 89 c7             	mov    %rax,%rdi
     93b:	e8 00 00 00 00       	callq  940 <_ZN4Sems15semsInitDefaultEv+0x940>
     940:	48 89 c3             	mov    %rax,%rbx
    this->Sem.insert("telemetry",	0x16);
     943:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     947:	48 89 c7             	mov    %rax,%rdi
     94a:	e8 00 00 00 00       	callq  94f <_ZN4Sems15semsInitDefaultEv+0x94f>
     94f:	48 89 d8             	mov    %rbx,%rax
     952:	48 89 c7             	mov    %rax,%rdi
     955:	e8 00 00 00 00       	callq  95a <_ZN4Sems15semsInitDefaultEv+0x95a>
     95a:	48 89 c3             	mov    %rax,%rbx
    this->Sem.insert("telemetry_reset",	0x17);
     95d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     961:	48 89 c7             	mov    %rax,%rdi
     964:	e8 00 00 00 00       	callq  969 <_ZN4Sems15semsInitDefaultEv+0x969>
     969:	48 89 d8             	mov    %rbx,%rax
     96c:	48 89 c7             	mov    %rax,%rdi
     96f:	e8 00 00 00 00       	callq  974 <_ZN4Sems15semsInitDefaultEv+0x974>
     974:	48 89 c3             	mov    %rax,%rbx
    this->Sem.insert("check_hw_connection", 	0x18);
     977:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     97b:	48 89 c7             	mov    %rax,%rdi
     97e:	e8 00 00 00 00       	callq  983 <_ZN4Sems15semsInitDefaultEv+0x983>
     983:	48 89 d8             	mov    %rbx,%rax
     986:	48 89 c7             	mov    %rax,%rdi
     989:	e8 00 00 00 00       	callq  98e <_ZN4Sems15semsInitDefaultEv+0x98e>
     98e:	48 89 c3             	mov    %rax,%rbx
    this->Sem.insert("break",       0x19);
     991:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     995:	48 89 c7             	mov    %rax,%rdi
     998:	e8 00 00 00 00       	callq  99d <_ZN4Sems15semsInitDefaultEv+0x99d>
     99d:	48 89 d8             	mov    %rbx,%rax
     9a0:	48 89 c7             	mov    %rax,%rdi
     9a3:	e8 00 00 00 00       	callq  9a8 <_ZN4Sems15semsInitDefaultEv+0x9a8>
     9a8:	48 89 c3             	mov    %rax,%rbx
    this->Sem.insert("continue",	0x20);
     9ab:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     9af:	48 89 c7             	mov    %rax,%rdi
     9b2:	e8 00 00 00 00       	callq  9b7 <_ZN4Sems15semsInitDefaultEv+0x9b7>
     9b7:	48 89 d8             	mov    %rbx,%rax
     9ba:	48 89 c7             	mov    %rax,%rdi
     9bd:	e8 00 00 00 00       	callq  9c2 <_ZN4Sems15semsInitDefaultEv+0x9c2>
     9c2:	48 89 c3             	mov    %rax,%rbx
    this->Sem.insert("transmitt",	0x21);
     9c5:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     9c9:	48 89 c7             	mov    %rax,%rdi
     9cc:	e8 00 00 00 00       	callq  9d1 <_ZN4Sems15semsInitDefaultEv+0x9d1>
     9d1:	48 89 d8             	mov    %rbx,%rax
     9d4:	48 89 c7             	mov    %rax,%rdi
     9d7:	e8 00 00 00 00       	callq  9dc <_ZN4Sems15semsInitDefaultEv+0x9dc>
     9dc:	48 89 c3             	mov    %rax,%rbx
    this->Sem.insert("receive",     0x22);
     9df:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     9e3:	48 89 c7             	mov    %rax,%rdi
     9e6:	e8 00 00 00 00       	callq  9eb <_ZN4Sems15semsInitDefaultEv+0x9eb>
     9eb:	48 89 d8             	mov    %rbx,%rax
     9ee:	48 89 c7             	mov    %rax,%rdi
     9f1:	e8 00 00 00 00       	callq  9f6 <_ZN4Sems15semsInitDefaultEv+0x9f6>
     9f6:	48 89 c3             	mov    %rax,%rbx
    this->Sem.insert("debug_prnt",	0x23);
     9f9:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     9fd:	48 89 c7             	mov    %rax,%rdi
     a00:	e8 00 00 00 00       	callq  a05 <_ZN4Sems15semsInitDefaultEv+0xa05>
     a05:	48 89 d8             	mov    %rbx,%rax
     a08:	48 89 c7             	mov    %rax,%rdi
     a0b:	e8 00 00 00 00       	callq  a10 <_ZN4Sems15semsInitDefaultEv+0xa10>
}
     a10:	e8 00 00 00 00       	callq  a15 <_ZN4Sems15semsInitDefaultEv+0xa15>
     a15:	48 83 c4 38          	add    $0x38,%rsp
     a19:	5b                   	pop    %rbx
     a1a:	5d                   	pop    %rbp
     a1b:	c3                   	retq   

0000000000000a1c <_ZN4Sems7initOpsEv>:

void Sems::initOps(){
     a1c:	55                   	push   %rbp
     a1d:	48 89 e5             	mov    %rsp,%rbp
     a20:	53                   	push   %rbx
     a21:	48 83 ec 38          	sub    $0x38,%rsp
     a25:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
     a29:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
     a30:	00 00 
     a32:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
     a36:	31 c0                	xor    %eax,%eax
    this->Opeartion.insert("&",     0x01);
     a38:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%rbp)
     a3f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     a43:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # a4a <_ZN4Sems7initOpsEv+0x2e>
     a4a:	48 89 c7             	mov    %rax,%rdi
     a4d:	e8 00 00 00 00       	callq  a52 <_ZN4Sems7initOpsEv+0x36>
     a52:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
     a56:	48 8d 48 08          	lea    0x8(%rax),%rcx
     a5a:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
     a5e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     a62:	48 89 c6             	mov    %rax,%rsi
     a65:	48 89 cf             	mov    %rcx,%rdi
     a68:	e8 00 00 00 00       	callq  a6d <_ZN4Sems7initOpsEv+0x51>
     a6d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     a71:	48 89 c7             	mov    %rax,%rdi
     a74:	e8 00 00 00 00       	callq  a79 <_ZN4Sems7initOpsEv+0x5d>
    this->Opeartion.insert("|",     0x02);
     a79:	c7 45 dc 02 00 00 00 	movl   $0x2,-0x24(%rbp)
     a80:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     a84:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # a8b <_ZN4Sems7initOpsEv+0x6f>
     a8b:	48 89 c7             	mov    %rax,%rdi
     a8e:	e8 00 00 00 00       	callq  a93 <_ZN4Sems7initOpsEv+0x77>
     a93:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
     a97:	48 8d 48 08          	lea    0x8(%rax),%rcx
     a9b:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
     a9f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     aa3:	48 89 c6             	mov    %rax,%rsi
     aa6:	48 89 cf             	mov    %rcx,%rdi
     aa9:	e8 00 00 00 00       	callq  aae <_ZN4Sems7initOpsEv+0x92>
     aae:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     ab2:	48 89 c7             	mov    %rax,%rdi
     ab5:	e8 00 00 00 00       	callq  aba <_ZN4Sems7initOpsEv+0x9e>
    this->Opeartion.insert("^",     0x03);
     aba:	c7 45 dc 03 00 00 00 	movl   $0x3,-0x24(%rbp)
     ac1:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     ac5:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # acc <_ZN4Sems7initOpsEv+0xb0>
     acc:	48 89 c7             	mov    %rax,%rdi
     acf:	e8 00 00 00 00       	callq  ad4 <_ZN4Sems7initOpsEv+0xb8>
     ad4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
     ad8:	48 8d 48 08          	lea    0x8(%rax),%rcx
     adc:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
     ae0:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     ae4:	48 89 c6             	mov    %rax,%rsi
     ae7:	48 89 cf             	mov    %rcx,%rdi
     aea:	e8 00 00 00 00       	callq  aef <_ZN4Sems7initOpsEv+0xd3>
     aef:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     af3:	48 89 c7             	mov    %rax,%rdi
     af6:	e8 00 00 00 00       	callq  afb <_ZN4Sems7initOpsEv+0xdf>
    this->Opeartion.insert("*",     0x11);
     afb:	c7 45 dc 11 00 00 00 	movl   $0x11,-0x24(%rbp)
     b02:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     b06:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # b0d <_ZN4Sems7initOpsEv+0xf1>
     b0d:	48 89 c7             	mov    %rax,%rdi
     b10:	e8 00 00 00 00       	callq  b15 <_ZN4Sems7initOpsEv+0xf9>
     b15:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
     b19:	48 8d 48 08          	lea    0x8(%rax),%rcx
     b1d:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
     b21:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     b25:	48 89 c6             	mov    %rax,%rsi
     b28:	48 89 cf             	mov    %rcx,%rdi
     b2b:	e8 00 00 00 00       	callq  b30 <_ZN4Sems7initOpsEv+0x114>
     b30:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     b34:	48 89 c7             	mov    %rax,%rdi
     b37:	e8 00 00 00 00       	callq  b3c <_ZN4Sems7initOpsEv+0x120>
    this->Opeartion.insert("/",     0x12);
     b3c:	c7 45 dc 12 00 00 00 	movl   $0x12,-0x24(%rbp)
     b43:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     b47:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # b4e <_ZN4Sems7initOpsEv+0x132>
     b4e:	48 89 c7             	mov    %rax,%rdi
     b51:	e8 00 00 00 00       	callq  b56 <_ZN4Sems7initOpsEv+0x13a>
     b56:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
     b5a:	48 8d 48 08          	lea    0x8(%rax),%rcx
     b5e:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
     b62:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     b66:	48 89 c6             	mov    %rax,%rsi
     b69:	48 89 cf             	mov    %rcx,%rdi
     b6c:	e8 00 00 00 00       	callq  b71 <_ZN4Sems7initOpsEv+0x155>
     b71:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     b75:	48 89 c7             	mov    %rax,%rdi
     b78:	e8 00 00 00 00       	callq  b7d <_ZN4Sems7initOpsEv+0x161>
    this->Opeartion.insert("\\",	0x13);
     b7d:	c7 45 dc 13 00 00 00 	movl   $0x13,-0x24(%rbp)
     b84:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     b88:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # b8f <_ZN4Sems7initOpsEv+0x173>
     b8f:	48 89 c7             	mov    %rax,%rdi
     b92:	e8 00 00 00 00       	callq  b97 <_ZN4Sems7initOpsEv+0x17b>
     b97:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
     b9b:	48 8d 48 08          	lea    0x8(%rax),%rcx
     b9f:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
     ba3:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     ba7:	48 89 c6             	mov    %rax,%rsi
     baa:	48 89 cf             	mov    %rcx,%rdi
     bad:	e8 00 00 00 00       	callq  bb2 <_ZN4Sems7initOpsEv+0x196>
     bb2:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     bb6:	48 89 c7             	mov    %rax,%rdi
     bb9:	e8 00 00 00 00       	callq  bbe <_ZN4Sems7initOpsEv+0x1a2>
    this->Opeartion.insert("+",     0x21);
     bbe:	c7 45 dc 21 00 00 00 	movl   $0x21,-0x24(%rbp)
     bc5:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     bc9:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # bd0 <_ZN4Sems7initOpsEv+0x1b4>
     bd0:	48 89 c7             	mov    %rax,%rdi
     bd3:	e8 00 00 00 00       	callq  bd8 <_ZN4Sems7initOpsEv+0x1bc>
     bd8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
     bdc:	48 8d 48 08          	lea    0x8(%rax),%rcx
     be0:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
     be4:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     be8:	48 89 c6             	mov    %rax,%rsi
     beb:	48 89 cf             	mov    %rcx,%rdi
     bee:	e8 00 00 00 00       	callq  bf3 <_ZN4Sems7initOpsEv+0x1d7>
     bf3:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     bf7:	48 89 c7             	mov    %rax,%rdi
     bfa:	e8 00 00 00 00       	callq  bff <_ZN4Sems7initOpsEv+0x1e3>
    this->Opeartion.insert("-",     0x22);
     bff:	c7 45 dc 22 00 00 00 	movl   $0x22,-0x24(%rbp)
     c06:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     c0a:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # c11 <_ZN4Sems7initOpsEv+0x1f5>
     c11:	48 89 c7             	mov    %rax,%rdi
     c14:	e8 00 00 00 00       	callq  c19 <_ZN4Sems7initOpsEv+0x1fd>
     c19:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
     c1d:	48 8d 48 08          	lea    0x8(%rax),%rcx
     c21:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
     c25:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     c29:	48 89 c6             	mov    %rax,%rsi
     c2c:	48 89 cf             	mov    %rcx,%rdi
     c2f:	e8 00 00 00 00       	callq  c34 <_ZN4Sems7initOpsEv+0x218>
     c34:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     c38:	48 89 c7             	mov    %rax,%rdi
     c3b:	e8 00 00 00 00       	callq  c40 <_ZN4Sems7initOpsEv+0x224>
    this->Opeartion.insert("=",     0x31);
     c40:	c7 45 dc 31 00 00 00 	movl   $0x31,-0x24(%rbp)
     c47:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     c4b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # c52 <_ZN4Sems7initOpsEv+0x236>
     c52:	48 89 c7             	mov    %rax,%rdi
     c55:	e8 00 00 00 00       	callq  c5a <_ZN4Sems7initOpsEv+0x23e>
     c5a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
     c5e:	48 8d 48 08          	lea    0x8(%rax),%rcx
     c62:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
     c66:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     c6a:	48 89 c6             	mov    %rax,%rsi
     c6d:	48 89 cf             	mov    %rcx,%rdi
     c70:	e8 00 00 00 00       	callq  c75 <_ZN4Sems7initOpsEv+0x259>
     c75:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     c79:	48 89 c7             	mov    %rax,%rdi
     c7c:	e8 00 00 00 00       	callq  c81 <_ZN4Sems7initOpsEv+0x265>
    this->Opeartion.insert("<>",	0x32);
     c81:	c7 45 dc 32 00 00 00 	movl   $0x32,-0x24(%rbp)
     c88:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     c8c:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # c93 <_ZN4Sems7initOpsEv+0x277>
     c93:	48 89 c7             	mov    %rax,%rdi
     c96:	e8 00 00 00 00       	callq  c9b <_ZN4Sems7initOpsEv+0x27f>
     c9b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
     c9f:	48 8d 48 08          	lea    0x8(%rax),%rcx
     ca3:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
     ca7:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     cab:	48 89 c6             	mov    %rax,%rsi
     cae:	48 89 cf             	mov    %rcx,%rdi
     cb1:	e8 00 00 00 00       	callq  cb6 <_ZN4Sems7initOpsEv+0x29a>
     cb6:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     cba:	48 89 c7             	mov    %rax,%rdi
     cbd:	e8 00 00 00 00       	callq  cc2 <_ZN4Sems7initOpsEv+0x2a6>
    this->Opeartion.insert("<",     0x33);
     cc2:	c7 45 dc 33 00 00 00 	movl   $0x33,-0x24(%rbp)
     cc9:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     ccd:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # cd4 <_ZN4Sems7initOpsEv+0x2b8>
     cd4:	48 89 c7             	mov    %rax,%rdi
     cd7:	e8 00 00 00 00       	callq  cdc <_ZN4Sems7initOpsEv+0x2c0>
     cdc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
     ce0:	48 8d 48 08          	lea    0x8(%rax),%rcx
     ce4:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
     ce8:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     cec:	48 89 c6             	mov    %rax,%rsi
     cef:	48 89 cf             	mov    %rcx,%rdi
     cf2:	e8 00 00 00 00       	callq  cf7 <_ZN4Sems7initOpsEv+0x2db>
     cf7:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     cfb:	48 89 c7             	mov    %rax,%rdi
     cfe:	e8 00 00 00 00       	callq  d03 <_ZN4Sems7initOpsEv+0x2e7>
    this->Opeartion.insert("<=",	0x34);
     d03:	c7 45 dc 34 00 00 00 	movl   $0x34,-0x24(%rbp)
     d0a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     d0e:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # d15 <_ZN4Sems7initOpsEv+0x2f9>
     d15:	48 89 c7             	mov    %rax,%rdi
     d18:	e8 00 00 00 00       	callq  d1d <_ZN4Sems7initOpsEv+0x301>
     d1d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
     d21:	48 8d 48 08          	lea    0x8(%rax),%rcx
     d25:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
     d29:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     d2d:	48 89 c6             	mov    %rax,%rsi
     d30:	48 89 cf             	mov    %rcx,%rdi
     d33:	e8 00 00 00 00       	callq  d38 <_ZN4Sems7initOpsEv+0x31c>
     d38:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     d3c:	48 89 c7             	mov    %rax,%rdi
     d3f:	e8 00 00 00 00       	callq  d44 <_ZN4Sems7initOpsEv+0x328>
    this->Opeartion.insert(">=",	0x35);
     d44:	c7 45 dc 35 00 00 00 	movl   $0x35,-0x24(%rbp)
     d4b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     d4f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # d56 <_ZN4Sems7initOpsEv+0x33a>
     d56:	48 89 c7             	mov    %rax,%rdi
     d59:	e8 00 00 00 00       	callq  d5e <_ZN4Sems7initOpsEv+0x342>
     d5e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
     d62:	48 8d 48 08          	lea    0x8(%rax),%rcx
     d66:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
     d6a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     d6e:	48 89 c6             	mov    %rax,%rsi
     d71:	48 89 cf             	mov    %rcx,%rdi
     d74:	e8 00 00 00 00       	callq  d79 <_ZN4Sems7initOpsEv+0x35d>
     d79:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     d7d:	48 89 c7             	mov    %rax,%rdi
     d80:	e8 00 00 00 00       	callq  d85 <_ZN4Sems7initOpsEv+0x369>
    this->Opeartion.insert(">",     0x36);
     d85:	c7 45 dc 36 00 00 00 	movl   $0x36,-0x24(%rbp)
     d8c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     d90:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # d97 <_ZN4Sems7initOpsEv+0x37b>
     d97:	48 89 c7             	mov    %rax,%rdi
     d9a:	e8 00 00 00 00       	callq  d9f <_ZN4Sems7initOpsEv+0x383>
     d9f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
     da3:	48 8d 48 08          	lea    0x8(%rax),%rcx
     da7:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
     dab:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     daf:	48 89 c6             	mov    %rax,%rsi
     db2:	48 89 cf             	mov    %rcx,%rdi
     db5:	e8 00 00 00 00       	callq  dba <_ZN4Sems7initOpsEv+0x39e>
     dba:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     dbe:	48 89 c7             	mov    %rax,%rdi
     dc1:	e8 00 00 00 00       	callq  dc6 <_ZN4Sems7initOpsEv+0x3aa>
    this->Opeartion.insert(":=",	0xE1);
     dc6:	c7 45 dc e1 00 00 00 	movl   $0xe1,-0x24(%rbp)
     dcd:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     dd1:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # dd8 <_ZN4Sems7initOpsEv+0x3bc>
     dd8:	48 89 c7             	mov    %rax,%rdi
     ddb:	e8 00 00 00 00       	callq  de0 <_ZN4Sems7initOpsEv+0x3c4>
     de0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
     de4:	48 8d 48 08          	lea    0x8(%rax),%rcx
     de8:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
     dec:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     df0:	48 89 c6             	mov    %rax,%rsi
     df3:	48 89 cf             	mov    %rcx,%rdi
     df6:	e8 00 00 00 00       	callq  dfb <_ZN4Sems7initOpsEv+0x3df>
     dfb:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     dff:	48 89 c7             	mov    %rax,%rdi
     e02:	e8 00 00 00 00       	callq  e07 <_ZN4Sems7initOpsEv+0x3eb>
    this->Opeartion.insert("pseudo",0xF1); // псевдо - операция
     e07:	c7 45 dc f1 00 00 00 	movl   $0xf1,-0x24(%rbp)
     e0e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     e12:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # e19 <_ZN4Sems7initOpsEv+0x3fd>
     e19:	48 89 c7             	mov    %rax,%rdi
     e1c:	e8 00 00 00 00       	callq  e21 <_ZN4Sems7initOpsEv+0x405>
     e21:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
     e25:	48 8d 48 08          	lea    0x8(%rax),%rcx
     e29:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
     e2d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     e31:	48 89 c6             	mov    %rax,%rsi
     e34:	48 89 cf             	mov    %rcx,%rdi
     e37:	e8 00 00 00 00       	callq  e3c <_ZN4Sems7initOpsEv+0x420>
     e3c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     e40:	48 89 c7             	mov    %rax,%rdi
     e43:	e8 00 00 00 00       	callq  e48 <_ZN4Sems7initOpsEv+0x42c>
}
     e48:	90                   	nop
     e49:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
     e4d:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
     e54:	00 00 
     e56:	0f 84 aa 01 00 00    	je     1006 <_ZN4Sems7initOpsEv+0x5ea>
     e5c:	e9 a0 01 00 00       	jmpq   1001 <_ZN4Sems7initOpsEv+0x5e5>
     e61:	48 89 c3             	mov    %rax,%rbx
    this->Sem.insert("receive",     0x22);
    this->Sem.insert("debug_prnt",	0x23);
}

void Sems::initOps(){
    this->Opeartion.insert("&",     0x01);
     e64:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     e68:	48 89 c7             	mov    %rax,%rdi
     e6b:	e8 00 00 00 00       	callq  e70 <_ZN4Sems7initOpsEv+0x454>
     e70:	48 89 d8             	mov    %rbx,%rax
     e73:	48 89 c7             	mov    %rax,%rdi
     e76:	e8 00 00 00 00       	callq  e7b <_ZN4Sems7initOpsEv+0x45f>
     e7b:	48 89 c3             	mov    %rax,%rbx
    this->Opeartion.insert("|",     0x02);
     e7e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     e82:	48 89 c7             	mov    %rax,%rdi
     e85:	e8 00 00 00 00       	callq  e8a <_ZN4Sems7initOpsEv+0x46e>
     e8a:	48 89 d8             	mov    %rbx,%rax
     e8d:	48 89 c7             	mov    %rax,%rdi
     e90:	e8 00 00 00 00       	callq  e95 <_ZN4Sems7initOpsEv+0x479>
     e95:	48 89 c3             	mov    %rax,%rbx
    this->Opeartion.insert("^",     0x03);
     e98:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     e9c:	48 89 c7             	mov    %rax,%rdi
     e9f:	e8 00 00 00 00       	callq  ea4 <_ZN4Sems7initOpsEv+0x488>
     ea4:	48 89 d8             	mov    %rbx,%rax
     ea7:	48 89 c7             	mov    %rax,%rdi
     eaa:	e8 00 00 00 00       	callq  eaf <_ZN4Sems7initOpsEv+0x493>
     eaf:	48 89 c3             	mov    %rax,%rbx
    this->Opeartion.insert("*",     0x11);
     eb2:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     eb6:	48 89 c7             	mov    %rax,%rdi
     eb9:	e8 00 00 00 00       	callq  ebe <_ZN4Sems7initOpsEv+0x4a2>
     ebe:	48 89 d8             	mov    %rbx,%rax
     ec1:	48 89 c7             	mov    %rax,%rdi
     ec4:	e8 00 00 00 00       	callq  ec9 <_ZN4Sems7initOpsEv+0x4ad>
     ec9:	48 89 c3             	mov    %rax,%rbx
    this->Opeartion.insert("/",     0x12);
     ecc:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     ed0:	48 89 c7             	mov    %rax,%rdi
     ed3:	e8 00 00 00 00       	callq  ed8 <_ZN4Sems7initOpsEv+0x4bc>
     ed8:	48 89 d8             	mov    %rbx,%rax
     edb:	48 89 c7             	mov    %rax,%rdi
     ede:	e8 00 00 00 00       	callq  ee3 <_ZN4Sems7initOpsEv+0x4c7>
     ee3:	48 89 c3             	mov    %rax,%rbx
    this->Opeartion.insert("\\",	0x13);
     ee6:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     eea:	48 89 c7             	mov    %rax,%rdi
     eed:	e8 00 00 00 00       	callq  ef2 <_ZN4Sems7initOpsEv+0x4d6>
     ef2:	48 89 d8             	mov    %rbx,%rax
     ef5:	48 89 c7             	mov    %rax,%rdi
     ef8:	e8 00 00 00 00       	callq  efd <_ZN4Sems7initOpsEv+0x4e1>
     efd:	48 89 c3             	mov    %rax,%rbx
    this->Opeartion.insert("+",     0x21);
     f00:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     f04:	48 89 c7             	mov    %rax,%rdi
     f07:	e8 00 00 00 00       	callq  f0c <_ZN4Sems7initOpsEv+0x4f0>
     f0c:	48 89 d8             	mov    %rbx,%rax
     f0f:	48 89 c7             	mov    %rax,%rdi
     f12:	e8 00 00 00 00       	callq  f17 <_ZN4Sems7initOpsEv+0x4fb>
     f17:	48 89 c3             	mov    %rax,%rbx
    this->Opeartion.insert("-",     0x22);
     f1a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     f1e:	48 89 c7             	mov    %rax,%rdi
     f21:	e8 00 00 00 00       	callq  f26 <_ZN4Sems7initOpsEv+0x50a>
     f26:	48 89 d8             	mov    %rbx,%rax
     f29:	48 89 c7             	mov    %rax,%rdi
     f2c:	e8 00 00 00 00       	callq  f31 <_ZN4Sems7initOpsEv+0x515>
     f31:	48 89 c3             	mov    %rax,%rbx
    this->Opeartion.insert("=",     0x31);
     f34:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     f38:	48 89 c7             	mov    %rax,%rdi
     f3b:	e8 00 00 00 00       	callq  f40 <_ZN4Sems7initOpsEv+0x524>
     f40:	48 89 d8             	mov    %rbx,%rax
     f43:	48 89 c7             	mov    %rax,%rdi
     f46:	e8 00 00 00 00       	callq  f4b <_ZN4Sems7initOpsEv+0x52f>
     f4b:	48 89 c3             	mov    %rax,%rbx
    this->Opeartion.insert("<>",	0x32);
     f4e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     f52:	48 89 c7             	mov    %rax,%rdi
     f55:	e8 00 00 00 00       	callq  f5a <_ZN4Sems7initOpsEv+0x53e>
     f5a:	48 89 d8             	mov    %rbx,%rax
     f5d:	48 89 c7             	mov    %rax,%rdi
     f60:	e8 00 00 00 00       	callq  f65 <_ZN4Sems7initOpsEv+0x549>
     f65:	48 89 c3             	mov    %rax,%rbx
    this->Opeartion.insert("<",     0x33);
     f68:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     f6c:	48 89 c7             	mov    %rax,%rdi
     f6f:	e8 00 00 00 00       	callq  f74 <_ZN4Sems7initOpsEv+0x558>
     f74:	48 89 d8             	mov    %rbx,%rax
     f77:	48 89 c7             	mov    %rax,%rdi
     f7a:	e8 00 00 00 00       	callq  f7f <_ZN4Sems7initOpsEv+0x563>
     f7f:	48 89 c3             	mov    %rax,%rbx
    this->Opeartion.insert("<=",	0x34);
     f82:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     f86:	48 89 c7             	mov    %rax,%rdi
     f89:	e8 00 00 00 00       	callq  f8e <_ZN4Sems7initOpsEv+0x572>
     f8e:	48 89 d8             	mov    %rbx,%rax
     f91:	48 89 c7             	mov    %rax,%rdi
     f94:	e8 00 00 00 00       	callq  f99 <_ZN4Sems7initOpsEv+0x57d>
     f99:	48 89 c3             	mov    %rax,%rbx
    this->Opeartion.insert(">=",	0x35);
     f9c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     fa0:	48 89 c7             	mov    %rax,%rdi
     fa3:	e8 00 00 00 00       	callq  fa8 <_ZN4Sems7initOpsEv+0x58c>
     fa8:	48 89 d8             	mov    %rbx,%rax
     fab:	48 89 c7             	mov    %rax,%rdi
     fae:	e8 00 00 00 00       	callq  fb3 <_ZN4Sems7initOpsEv+0x597>
     fb3:	48 89 c3             	mov    %rax,%rbx
    this->Opeartion.insert(">",     0x36);
     fb6:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     fba:	48 89 c7             	mov    %rax,%rdi
     fbd:	e8 00 00 00 00       	callq  fc2 <_ZN4Sems7initOpsEv+0x5a6>
     fc2:	48 89 d8             	mov    %rbx,%rax
     fc5:	48 89 c7             	mov    %rax,%rdi
     fc8:	e8 00 00 00 00       	callq  fcd <_ZN4Sems7initOpsEv+0x5b1>
     fcd:	48 89 c3             	mov    %rax,%rbx
    this->Opeartion.insert(":=",	0xE1);
     fd0:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     fd4:	48 89 c7             	mov    %rax,%rdi
     fd7:	e8 00 00 00 00       	callq  fdc <_ZN4Sems7initOpsEv+0x5c0>
     fdc:	48 89 d8             	mov    %rbx,%rax
     fdf:	48 89 c7             	mov    %rax,%rdi
     fe2:	e8 00 00 00 00       	callq  fe7 <_ZN4Sems7initOpsEv+0x5cb>
     fe7:	48 89 c3             	mov    %rax,%rbx
    this->Opeartion.insert("pseudo",0xF1); // псевдо - операция
     fea:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
     fee:	48 89 c7             	mov    %rax,%rdi
     ff1:	e8 00 00 00 00       	callq  ff6 <_ZN4Sems7initOpsEv+0x5da>
     ff6:	48 89 d8             	mov    %rbx,%rax
     ff9:	48 89 c7             	mov    %rax,%rdi
     ffc:	e8 00 00 00 00       	callq  1001 <_ZN4Sems7initOpsEv+0x5e5>
}
    1001:	e8 00 00 00 00       	callq  1006 <_ZN4Sems7initOpsEv+0x5ea>
    1006:	48 83 c4 38          	add    $0x38,%rsp
    100a:	5b                   	pop    %rbx
    100b:	5d                   	pop    %rbp
    100c:	c3                   	retq   
    100d:	90                   	nop

000000000000100e <_ZN4Sems10initErrorsEv>:

void Sems::initErrors(){
    100e:	55                   	push   %rbp
    100f:	48 89 e5             	mov    %rsp,%rbp
    1012:	53                   	push   %rbx
    1013:	48 83 ec 38          	sub    $0x38,%rsp
    1017:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    101b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    1022:	00 00 
    1024:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    1028:	31 c0                	xor    %eax,%eax
    this->errorCode.insert("unknown-command",   0x8001); //	Неизвестная команда
    102a:	c7 45 dc 01 80 00 00 	movl   $0x8001,-0x24(%rbp)
    1031:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1035:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 103c <_ZN4Sems10initErrorsEv+0x2e>
    103c:	48 89 c7             	mov    %rax,%rdi
    103f:	e8 00 00 00 00       	callq  1044 <_ZN4Sems10initErrorsEv+0x36>
    1044:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    1048:	48 8d 48 10          	lea    0x10(%rax),%rcx
    104c:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    1050:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1054:	48 89 c6             	mov    %rax,%rsi
    1057:	48 89 cf             	mov    %rcx,%rdi
    105a:	e8 00 00 00 00       	callq  105f <_ZN4Sems10initErrorsEv+0x51>
    105f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1063:	48 89 c7             	mov    %rax,%rdi
    1066:	e8 00 00 00 00       	callq  106b <_ZN4Sems10initErrorsEv+0x5d>
    this->errorCode.insert("command-format",    0x8002); //	Неверный формат команды
    106b:	c7 45 dc 02 80 00 00 	movl   $0x8002,-0x24(%rbp)
    1072:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1076:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 107d <_ZN4Sems10initErrorsEv+0x6f>
    107d:	48 89 c7             	mov    %rax,%rdi
    1080:	e8 00 00 00 00       	callq  1085 <_ZN4Sems10initErrorsEv+0x77>
    1085:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    1089:	48 8d 48 10          	lea    0x10(%rax),%rcx
    108d:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    1091:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1095:	48 89 c6             	mov    %rax,%rsi
    1098:	48 89 cf             	mov    %rcx,%rdi
    109b:	e8 00 00 00 00       	callq  10a0 <_ZN4Sems10initErrorsEv+0x92>
    10a0:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    10a4:	48 89 c7             	mov    %rax,%rdi
    10a7:	e8 00 00 00 00       	callq  10ac <_ZN4Sems10initErrorsEv+0x9e>
    this->errorCode.insert("non-existent",      0x8003); //	Обращение к несуществующему оборудованию
    10ac:	c7 45 dc 03 80 00 00 	movl   $0x8003,-0x24(%rbp)
    10b3:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    10b7:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 10be <_ZN4Sems10initErrorsEv+0xb0>
    10be:	48 89 c7             	mov    %rax,%rdi
    10c1:	e8 00 00 00 00       	callq  10c6 <_ZN4Sems10initErrorsEv+0xb8>
    10c6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    10ca:	48 8d 48 10          	lea    0x10(%rax),%rcx
    10ce:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    10d2:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    10d6:	48 89 c6             	mov    %rax,%rsi
    10d9:	48 89 cf             	mov    %rcx,%rdi
    10dc:	e8 00 00 00 00       	callq  10e1 <_ZN4Sems10initErrorsEv+0xd3>
    10e1:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    10e5:	48 89 c7             	mov    %rax,%rdi
    10e8:	e8 00 00 00 00       	callq  10ed <_ZN4Sems10initErrorsEv+0xdf>
    this->errorCode.insert("type-discrepancy",  0x8004); //	Несоответствие типов оборудования
    10ed:	c7 45 dc 04 80 00 00 	movl   $0x8004,-0x24(%rbp)
    10f4:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    10f8:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 10ff <_ZN4Sems10initErrorsEv+0xf1>
    10ff:	48 89 c7             	mov    %rax,%rdi
    1102:	e8 00 00 00 00       	callq  1107 <_ZN4Sems10initErrorsEv+0xf9>
    1107:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    110b:	48 8d 48 10          	lea    0x10(%rax),%rcx
    110f:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    1113:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1117:	48 89 c6             	mov    %rax,%rsi
    111a:	48 89 cf             	mov    %rcx,%rdi
    111d:	e8 00 00 00 00       	callq  1122 <_ZN4Sems10initErrorsEv+0x114>
    1122:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1126:	48 89 c7             	mov    %rax,%rdi
    1129:	e8 00 00 00 00       	callq  112e <_ZN4Sems10initErrorsEv+0x120>
    this->errorCode.insert("entering-data",     0x8005); //	Программирование - ошибка во входных данных
    112e:	c7 45 dc 05 80 00 00 	movl   $0x8005,-0x24(%rbp)
    1135:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1139:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1140 <_ZN4Sems10initErrorsEv+0x132>
    1140:	48 89 c7             	mov    %rax,%rdi
    1143:	e8 00 00 00 00       	callq  1148 <_ZN4Sems10initErrorsEv+0x13a>
    1148:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    114c:	48 8d 48 10          	lea    0x10(%rax),%rcx
    1150:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    1154:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1158:	48 89 c6             	mov    %rax,%rsi
    115b:	48 89 cf             	mov    %rcx,%rdi
    115e:	e8 00 00 00 00       	callq  1163 <_ZN4Sems10initErrorsEv+0x155>
    1163:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1167:	48 89 c7             	mov    %rax,%rdi
    116a:	e8 00 00 00 00       	callq  116f <_ZN4Sems10initErrorsEv+0x161>
    this->errorCode.insert("link-module",       0x8006); //	Программирование - ошибка при записи программы в модуль
    116f:	c7 45 dc 06 80 00 00 	movl   $0x8006,-0x24(%rbp)
    1176:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    117a:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1181 <_ZN4Sems10initErrorsEv+0x173>
    1181:	48 89 c7             	mov    %rax,%rdi
    1184:	e8 00 00 00 00       	callq  1189 <_ZN4Sems10initErrorsEv+0x17b>
    1189:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    118d:	48 8d 48 10          	lea    0x10(%rax),%rcx
    1191:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    1195:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1199:	48 89 c6             	mov    %rax,%rsi
    119c:	48 89 cf             	mov    %rcx,%rdi
    119f:	e8 00 00 00 00       	callq  11a4 <_ZN4Sems10initErrorsEv+0x196>
    11a4:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    11a8:	48 89 c7             	mov    %rax,%rdi
    11ab:	e8 00 00 00 00       	callq  11b0 <_ZN4Sems10initErrorsEv+0x1a2>
    this->errorCode.insert("counter-discrepancy", 0x8007); //	Сбой обмена по сети (несовпадение ожидаемого и пришедшего счетчиков в пакетах)
    11b0:	c7 45 dc 07 80 00 00 	movl   $0x8007,-0x24(%rbp)
    11b7:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    11bb:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 11c2 <_ZN4Sems10initErrorsEv+0x1b4>
    11c2:	48 89 c7             	mov    %rax,%rdi
    11c5:	e8 00 00 00 00       	callq  11ca <_ZN4Sems10initErrorsEv+0x1bc>
    11ca:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    11ce:	48 8d 48 10          	lea    0x10(%rax),%rcx
    11d2:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    11d6:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    11da:	48 89 c6             	mov    %rax,%rsi
    11dd:	48 89 cf             	mov    %rcx,%rdi
    11e0:	e8 00 00 00 00       	callq  11e5 <_ZN4Sems10initErrorsEv+0x1d7>
    11e5:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    11e9:	48 89 c7             	mov    %rax,%rdi
    11ec:	e8 00 00 00 00       	callq  11f1 <_ZN4Sems10initErrorsEv+0x1e3>
    this->errorCode.insert("var-type",          0x8008); //	Недопустимый тип переменной в данной операции
    11f1:	c7 45 dc 08 80 00 00 	movl   $0x8008,-0x24(%rbp)
    11f8:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    11fc:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1203 <_ZN4Sems10initErrorsEv+0x1f5>
    1203:	48 89 c7             	mov    %rax,%rdi
    1206:	e8 00 00 00 00       	callq  120b <_ZN4Sems10initErrorsEv+0x1fd>
    120b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    120f:	48 8d 48 10          	lea    0x10(%rax),%rcx
    1213:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    1217:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    121b:	48 89 c6             	mov    %rax,%rsi
    121e:	48 89 cf             	mov    %rcx,%rdi
    1221:	e8 00 00 00 00       	callq  1226 <_ZN4Sems10initErrorsEv+0x218>
    1226:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    122a:	48 89 c7             	mov    %rax,%rdi
    122d:	e8 00 00 00 00       	callq  1232 <_ZN4Sems10initErrorsEv+0x224>
    this->errorCode.insert("unexpected-end",    0x8009); //	Ошибка в данных для программирования - неожиданный конец
    1232:	c7 45 dc 09 80 00 00 	movl   $0x8009,-0x24(%rbp)
    1239:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    123d:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1244 <_ZN4Sems10initErrorsEv+0x236>
    1244:	48 89 c7             	mov    %rax,%rdi
    1247:	e8 00 00 00 00       	callq  124c <_ZN4Sems10initErrorsEv+0x23e>
    124c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    1250:	48 8d 48 10          	lea    0x10(%rax),%rcx
    1254:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    1258:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    125c:	48 89 c6             	mov    %rax,%rsi
    125f:	48 89 cf             	mov    %rcx,%rdi
    1262:	e8 00 00 00 00       	callq  1267 <_ZN4Sems10initErrorsEv+0x259>
    1267:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    126b:	48 89 c7             	mov    %rax,%rdi
    126e:	e8 00 00 00 00       	callq  1273 <_ZN4Sems10initErrorsEv+0x265>
}
    1273:	90                   	nop
    1274:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    1278:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    127f:	00 00 
    1281:	0f 84 f4 00 00 00    	je     137b <_ZN4Sems10initErrorsEv+0x36d>
    1287:	e9 ea 00 00 00       	jmpq   1376 <_ZN4Sems10initErrorsEv+0x368>
    128c:	48 89 c3             	mov    %rax,%rbx
    this->Opeartion.insert(":=",	0xE1);
    this->Opeartion.insert("pseudo",0xF1); // псевдо - операция
}

void Sems::initErrors(){
    this->errorCode.insert("unknown-command",   0x8001); //	Неизвестная команда
    128f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1293:	48 89 c7             	mov    %rax,%rdi
    1296:	e8 00 00 00 00       	callq  129b <_ZN4Sems10initErrorsEv+0x28d>
    129b:	48 89 d8             	mov    %rbx,%rax
    129e:	48 89 c7             	mov    %rax,%rdi
    12a1:	e8 00 00 00 00       	callq  12a6 <_ZN4Sems10initErrorsEv+0x298>
    12a6:	48 89 c3             	mov    %rax,%rbx
    this->errorCode.insert("command-format",    0x8002); //	Неверный формат команды
    12a9:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    12ad:	48 89 c7             	mov    %rax,%rdi
    12b0:	e8 00 00 00 00       	callq  12b5 <_ZN4Sems10initErrorsEv+0x2a7>
    12b5:	48 89 d8             	mov    %rbx,%rax
    12b8:	48 89 c7             	mov    %rax,%rdi
    12bb:	e8 00 00 00 00       	callq  12c0 <_ZN4Sems10initErrorsEv+0x2b2>
    12c0:	48 89 c3             	mov    %rax,%rbx
    this->errorCode.insert("non-existent",      0x8003); //	Обращение к несуществующему оборудованию
    12c3:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    12c7:	48 89 c7             	mov    %rax,%rdi
    12ca:	e8 00 00 00 00       	callq  12cf <_ZN4Sems10initErrorsEv+0x2c1>
    12cf:	48 89 d8             	mov    %rbx,%rax
    12d2:	48 89 c7             	mov    %rax,%rdi
    12d5:	e8 00 00 00 00       	callq  12da <_ZN4Sems10initErrorsEv+0x2cc>
    12da:	48 89 c3             	mov    %rax,%rbx
    this->errorCode.insert("type-discrepancy",  0x8004); //	Несоответствие типов оборудования
    12dd:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    12e1:	48 89 c7             	mov    %rax,%rdi
    12e4:	e8 00 00 00 00       	callq  12e9 <_ZN4Sems10initErrorsEv+0x2db>
    12e9:	48 89 d8             	mov    %rbx,%rax
    12ec:	48 89 c7             	mov    %rax,%rdi
    12ef:	e8 00 00 00 00       	callq  12f4 <_ZN4Sems10initErrorsEv+0x2e6>
    12f4:	48 89 c3             	mov    %rax,%rbx
    this->errorCode.insert("entering-data",     0x8005); //	Программирование - ошибка во входных данных
    12f7:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    12fb:	48 89 c7             	mov    %rax,%rdi
    12fe:	e8 00 00 00 00       	callq  1303 <_ZN4Sems10initErrorsEv+0x2f5>
    1303:	48 89 d8             	mov    %rbx,%rax
    1306:	48 89 c7             	mov    %rax,%rdi
    1309:	e8 00 00 00 00       	callq  130e <_ZN4Sems10initErrorsEv+0x300>
    130e:	48 89 c3             	mov    %rax,%rbx
    this->errorCode.insert("link-module",       0x8006); //	Программирование - ошибка при записи программы в модуль
    1311:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1315:	48 89 c7             	mov    %rax,%rdi
    1318:	e8 00 00 00 00       	callq  131d <_ZN4Sems10initErrorsEv+0x30f>
    131d:	48 89 d8             	mov    %rbx,%rax
    1320:	48 89 c7             	mov    %rax,%rdi
    1323:	e8 00 00 00 00       	callq  1328 <_ZN4Sems10initErrorsEv+0x31a>
    1328:	48 89 c3             	mov    %rax,%rbx
    this->errorCode.insert("counter-discrepancy", 0x8007); //	Сбой обмена по сети (несовпадение ожидаемого и пришедшего счетчиков в пакетах)
    132b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    132f:	48 89 c7             	mov    %rax,%rdi
    1332:	e8 00 00 00 00       	callq  1337 <_ZN4Sems10initErrorsEv+0x329>
    1337:	48 89 d8             	mov    %rbx,%rax
    133a:	48 89 c7             	mov    %rax,%rdi
    133d:	e8 00 00 00 00       	callq  1342 <_ZN4Sems10initErrorsEv+0x334>
    1342:	48 89 c3             	mov    %rax,%rbx
    this->errorCode.insert("var-type",          0x8008); //	Недопустимый тип переменной в данной операции
    1345:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1349:	48 89 c7             	mov    %rax,%rdi
    134c:	e8 00 00 00 00       	callq  1351 <_ZN4Sems10initErrorsEv+0x343>
    1351:	48 89 d8             	mov    %rbx,%rax
    1354:	48 89 c7             	mov    %rax,%rdi
    1357:	e8 00 00 00 00       	callq  135c <_ZN4Sems10initErrorsEv+0x34e>
    135c:	48 89 c3             	mov    %rax,%rbx
    this->errorCode.insert("unexpected-end",    0x8009); //	Ошибка в данных для программирования - неожиданный конец
    135f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1363:	48 89 c7             	mov    %rax,%rdi
    1366:	e8 00 00 00 00       	callq  136b <_ZN4Sems10initErrorsEv+0x35d>
    136b:	48 89 d8             	mov    %rbx,%rax
    136e:	48 89 c7             	mov    %rax,%rdi
    1371:	e8 00 00 00 00       	callq  1376 <_ZN4Sems10initErrorsEv+0x368>
}
    1376:	e8 00 00 00 00       	callq  137b <_ZN4Sems10initErrorsEv+0x36d>
    137b:	48 83 c4 38          	add    $0x38,%rsp
    137f:	5b                   	pop    %rbx
    1380:	5d                   	pop    %rbp
    1381:	c3                   	retq   

0000000000001382 <_ZN4Sems11initPreDefsEv>:

void Sems::initPreDefs(){
    1382:	55                   	push   %rbp
    1383:	48 89 e5             	mov    %rsp,%rbp
    1386:	53                   	push   %rbx
    1387:	48 83 ec 38          	sub    $0x38,%rsp
    138b:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    138f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    1396:	00 00 
    1398:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    139c:	31 c0                	xor    %eax,%eax
    this->predefinedVars.insert("shift_bit",    0xF1);
    139e:	c7 45 dc f1 00 00 00 	movl   $0xf1,-0x24(%rbp)
    13a5:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    13a9:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 13b0 <_ZN4Sems11initPreDefsEv+0x2e>
    13b0:	48 89 c7             	mov    %rax,%rdi
    13b3:	e8 00 00 00 00       	callq  13b8 <_ZN4Sems11initPreDefsEv+0x36>
    13b8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    13bc:	48 8d 48 18          	lea    0x18(%rax),%rcx
    13c0:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    13c4:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    13c8:	48 89 c6             	mov    %rax,%rsi
    13cb:	48 89 cf             	mov    %rcx,%rdi
    13ce:	e8 00 00 00 00       	callq  13d3 <_ZN4Sems11initPreDefsEv+0x51>
    13d3:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    13d7:	48 89 c7             	mov    %rax,%rdi
    13da:	e8 00 00 00 00       	callq  13df <_ZN4Sems11initPreDefsEv+0x5d>
    this->predefinedVars.insert("rg",           0xF0);
    13df:	c7 45 dc f0 00 00 00 	movl   $0xf0,-0x24(%rbp)
    13e6:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    13ea:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 13f1 <_ZN4Sems11initPreDefsEv+0x6f>
    13f1:	48 89 c7             	mov    %rax,%rdi
    13f4:	e8 00 00 00 00       	callq  13f9 <_ZN4Sems11initPreDefsEv+0x77>
    13f9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    13fd:	48 8d 48 18          	lea    0x18(%rax),%rcx
    1401:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    1405:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1409:	48 89 c6             	mov    %rax,%rsi
    140c:	48 89 cf             	mov    %rcx,%rdi
    140f:	e8 00 00 00 00       	callq  1414 <_ZN4Sems11initPreDefsEv+0x92>
    1414:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1418:	48 89 c7             	mov    %rax,%rdi
    141b:	e8 00 00 00 00       	callq  1420 <_ZN4Sems11initPreDefsEv+0x9e>
    this->predefinedVars.insert("m_block",      0xF2);
    1420:	c7 45 dc f2 00 00 00 	movl   $0xf2,-0x24(%rbp)
    1427:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    142b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1432 <_ZN4Sems11initPreDefsEv+0xb0>
    1432:	48 89 c7             	mov    %rax,%rdi
    1435:	e8 00 00 00 00       	callq  143a <_ZN4Sems11initPreDefsEv+0xb8>
    143a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    143e:	48 8d 48 18          	lea    0x18(%rax),%rcx
    1442:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    1446:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    144a:	48 89 c6             	mov    %rax,%rsi
    144d:	48 89 cf             	mov    %rcx,%rdi
    1450:	e8 00 00 00 00       	callq  1455 <_ZN4Sems11initPreDefsEv+0xd3>
    1455:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1459:	48 89 c7             	mov    %rax,%rdi
    145c:	e8 00 00 00 00       	callq  1461 <_ZN4Sems11initPreDefsEv+0xdf>
    this->predefinedVars.insert("m_pos",        0xF3);
    1461:	c7 45 dc f3 00 00 00 	movl   $0xf3,-0x24(%rbp)
    1468:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    146c:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1473 <_ZN4Sems11initPreDefsEv+0xf1>
    1473:	48 89 c7             	mov    %rax,%rdi
    1476:	e8 00 00 00 00       	callq  147b <_ZN4Sems11initPreDefsEv+0xf9>
    147b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    147f:	48 8d 48 18          	lea    0x18(%rax),%rcx
    1483:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    1487:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    148b:	48 89 c6             	mov    %rax,%rsi
    148e:	48 89 cf             	mov    %rcx,%rdi
    1491:	e8 00 00 00 00       	callq  1496 <_ZN4Sems11initPreDefsEv+0x114>
    1496:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    149a:	48 89 c7             	mov    %rax,%rdi
    149d:	e8 00 00 00 00       	callq  14a2 <_ZN4Sems11initPreDefsEv+0x120>
    this->predefinedVars.insert("m_type",       0xF4);
    14a2:	c7 45 dc f4 00 00 00 	movl   $0xf4,-0x24(%rbp)
    14a9:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    14ad:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 14b4 <_ZN4Sems11initPreDefsEv+0x132>
    14b4:	48 89 c7             	mov    %rax,%rdi
    14b7:	e8 00 00 00 00       	callq  14bc <_ZN4Sems11initPreDefsEv+0x13a>
    14bc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    14c0:	48 8d 48 18          	lea    0x18(%rax),%rcx
    14c4:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    14c8:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    14cc:	48 89 c6             	mov    %rax,%rsi
    14cf:	48 89 cf             	mov    %rcx,%rdi
    14d2:	e8 00 00 00 00       	callq  14d7 <_ZN4Sems11initPreDefsEv+0x155>
    14d7:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    14db:	48 89 c7             	mov    %rax,%rdi
    14de:	e8 00 00 00 00       	callq  14e3 <_ZN4Sems11initPreDefsEv+0x161>
    this->predefinedVars.insert("m_channel",	0xF5);
    14e3:	c7 45 dc f5 00 00 00 	movl   $0xf5,-0x24(%rbp)
    14ea:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    14ee:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 14f5 <_ZN4Sems11initPreDefsEv+0x173>
    14f5:	48 89 c7             	mov    %rax,%rdi
    14f8:	e8 00 00 00 00       	callq  14fd <_ZN4Sems11initPreDefsEv+0x17b>
    14fd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    1501:	48 8d 48 18          	lea    0x18(%rax),%rcx
    1505:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    1509:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    150d:	48 89 c6             	mov    %rax,%rsi
    1510:	48 89 cf             	mov    %rcx,%rdi
    1513:	e8 00 00 00 00       	callq  1518 <_ZN4Sems11initPreDefsEv+0x196>
    1518:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    151c:	48 89 c7             	mov    %rax,%rdi
    151f:	e8 00 00 00 00       	callq  1524 <_ZN4Sems11initPreDefsEv+0x1a2>
    this->predefinedVars.insert("__zero",       0xFE);
    1524:	c7 45 dc fe 00 00 00 	movl   $0xfe,-0x24(%rbp)
    152b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    152f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1536 <_ZN4Sems11initPreDefsEv+0x1b4>
    1536:	48 89 c7             	mov    %rax,%rdi
    1539:	e8 00 00 00 00       	callq  153e <_ZN4Sems11initPreDefsEv+0x1bc>
    153e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    1542:	48 8d 48 18          	lea    0x18(%rax),%rcx
    1546:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    154a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    154e:	48 89 c6             	mov    %rax,%rsi
    1551:	48 89 cf             	mov    %rcx,%rdi
    1554:	e8 00 00 00 00       	callq  1559 <_ZN4Sems11initPreDefsEv+0x1d7>
    1559:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    155d:	48 89 c7             	mov    %rax,%rdi
    1560:	e8 00 00 00 00       	callq  1565 <_ZN4Sems11initPreDefsEv+0x1e3>
    this->predefinedVars.insert("__FF",         0xFF);
    1565:	c7 45 dc ff 00 00 00 	movl   $0xff,-0x24(%rbp)
    156c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1570:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1577 <_ZN4Sems11initPreDefsEv+0x1f5>
    1577:	48 89 c7             	mov    %rax,%rdi
    157a:	e8 00 00 00 00       	callq  157f <_ZN4Sems11initPreDefsEv+0x1fd>
    157f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    1583:	48 8d 48 18          	lea    0x18(%rax),%rcx
    1587:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    158b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    158f:	48 89 c6             	mov    %rax,%rsi
    1592:	48 89 cf             	mov    %rcx,%rdi
    1595:	e8 00 00 00 00       	callq  159a <_ZN4Sems11initPreDefsEv+0x218>
    159a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    159e:	48 89 c7             	mov    %rax,%rdi
    15a1:	e8 00 00 00 00       	callq  15a6 <_ZN4Sems11initPreDefsEv+0x224>
}
    15a6:	90                   	nop
    15a7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    15ab:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    15b2:	00 00 
    15b4:	0f 84 da 00 00 00    	je     1694 <_ZN4Sems11initPreDefsEv+0x312>
    15ba:	e9 d0 00 00 00       	jmpq   168f <_ZN4Sems11initPreDefsEv+0x30d>
    15bf:	48 89 c3             	mov    %rax,%rbx
    this->errorCode.insert("var-type",          0x8008); //	Недопустимый тип переменной в данной операции
    this->errorCode.insert("unexpected-end",    0x8009); //	Ошибка в данных для программирования - неожиданный конец
}

void Sems::initPreDefs(){
    this->predefinedVars.insert("shift_bit",    0xF1);
    15c2:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    15c6:	48 89 c7             	mov    %rax,%rdi
    15c9:	e8 00 00 00 00       	callq  15ce <_ZN4Sems11initPreDefsEv+0x24c>
    15ce:	48 89 d8             	mov    %rbx,%rax
    15d1:	48 89 c7             	mov    %rax,%rdi
    15d4:	e8 00 00 00 00       	callq  15d9 <_ZN4Sems11initPreDefsEv+0x257>
    15d9:	48 89 c3             	mov    %rax,%rbx
    this->predefinedVars.insert("rg",           0xF0);
    15dc:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    15e0:	48 89 c7             	mov    %rax,%rdi
    15e3:	e8 00 00 00 00       	callq  15e8 <_ZN4Sems11initPreDefsEv+0x266>
    15e8:	48 89 d8             	mov    %rbx,%rax
    15eb:	48 89 c7             	mov    %rax,%rdi
    15ee:	e8 00 00 00 00       	callq  15f3 <_ZN4Sems11initPreDefsEv+0x271>
    15f3:	48 89 c3             	mov    %rax,%rbx
    this->predefinedVars.insert("m_block",      0xF2);
    15f6:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    15fa:	48 89 c7             	mov    %rax,%rdi
    15fd:	e8 00 00 00 00       	callq  1602 <_ZN4Sems11initPreDefsEv+0x280>
    1602:	48 89 d8             	mov    %rbx,%rax
    1605:	48 89 c7             	mov    %rax,%rdi
    1608:	e8 00 00 00 00       	callq  160d <_ZN4Sems11initPreDefsEv+0x28b>
    160d:	48 89 c3             	mov    %rax,%rbx
    this->predefinedVars.insert("m_pos",        0xF3);
    1610:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1614:	48 89 c7             	mov    %rax,%rdi
    1617:	e8 00 00 00 00       	callq  161c <_ZN4Sems11initPreDefsEv+0x29a>
    161c:	48 89 d8             	mov    %rbx,%rax
    161f:	48 89 c7             	mov    %rax,%rdi
    1622:	e8 00 00 00 00       	callq  1627 <_ZN4Sems11initPreDefsEv+0x2a5>
    1627:	48 89 c3             	mov    %rax,%rbx
    this->predefinedVars.insert("m_type",       0xF4);
    162a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    162e:	48 89 c7             	mov    %rax,%rdi
    1631:	e8 00 00 00 00       	callq  1636 <_ZN4Sems11initPreDefsEv+0x2b4>
    1636:	48 89 d8             	mov    %rbx,%rax
    1639:	48 89 c7             	mov    %rax,%rdi
    163c:	e8 00 00 00 00       	callq  1641 <_ZN4Sems11initPreDefsEv+0x2bf>
    1641:	48 89 c3             	mov    %rax,%rbx
    this->predefinedVars.insert("m_channel",	0xF5);
    1644:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1648:	48 89 c7             	mov    %rax,%rdi
    164b:	e8 00 00 00 00       	callq  1650 <_ZN4Sems11initPreDefsEv+0x2ce>
    1650:	48 89 d8             	mov    %rbx,%rax
    1653:	48 89 c7             	mov    %rax,%rdi
    1656:	e8 00 00 00 00       	callq  165b <_ZN4Sems11initPreDefsEv+0x2d9>
    165b:	48 89 c3             	mov    %rax,%rbx
    this->predefinedVars.insert("__zero",       0xFE);
    165e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1662:	48 89 c7             	mov    %rax,%rdi
    1665:	e8 00 00 00 00       	callq  166a <_ZN4Sems11initPreDefsEv+0x2e8>
    166a:	48 89 d8             	mov    %rbx,%rax
    166d:	48 89 c7             	mov    %rax,%rdi
    1670:	e8 00 00 00 00       	callq  1675 <_ZN4Sems11initPreDefsEv+0x2f3>
    1675:	48 89 c3             	mov    %rax,%rbx
    this->predefinedVars.insert("__FF",         0xFF);
    1678:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    167c:	48 89 c7             	mov    %rax,%rdi
    167f:	e8 00 00 00 00       	callq  1684 <_ZN4Sems11initPreDefsEv+0x302>
    1684:	48 89 d8             	mov    %rbx,%rax
    1687:	48 89 c7             	mov    %rax,%rdi
    168a:	e8 00 00 00 00       	callq  168f <_ZN4Sems11initPreDefsEv+0x30d>
}
    168f:	e8 00 00 00 00       	callq  1694 <_ZN4Sems11initPreDefsEv+0x312>
    1694:	48 83 c4 38          	add    $0x38,%rsp
    1698:	5b                   	pop    %rbx
    1699:	5d                   	pop    %rbp
    169a:	c3                   	retq   
    169b:	90                   	nop

000000000000169c <_ZN4Sems9initTypesEv>:

void Sems::initTypes(){
    169c:	55                   	push   %rbp
    169d:	48 89 e5             	mov    %rsp,%rbp
    16a0:	53                   	push   %rbx
    16a1:	48 83 ec 38          	sub    $0x38,%rsp
    16a5:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    16a9:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    16b0:	00 00 
    16b2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    16b6:	31 c0                	xor    %eax,%eax
    this->Type.insert("word", 0x00);
    16b8:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%rbp)
    16bf:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    16c3:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 16ca <_ZN4Sems9initTypesEv+0x2e>
    16ca:	48 89 c7             	mov    %rax,%rdi
    16cd:	e8 00 00 00 00       	callq  16d2 <_ZN4Sems9initTypesEv+0x36>
    16d2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    16d6:	48 8d 48 20          	lea    0x20(%rax),%rcx
    16da:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    16de:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    16e2:	48 89 c6             	mov    %rax,%rsi
    16e5:	48 89 cf             	mov    %rcx,%rdi
    16e8:	e8 00 00 00 00       	callq  16ed <_ZN4Sems9initTypesEv+0x51>
    16ed:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    16f1:	48 89 c7             	mov    %rax,%rdi
    16f4:	e8 00 00 00 00       	callq  16f9 <_ZN4Sems9initTypesEv+0x5d>
    this->Type.insert("dword", 0x01);
    16f9:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%rbp)
    1700:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1704:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 170b <_ZN4Sems9initTypesEv+0x6f>
    170b:	48 89 c7             	mov    %rax,%rdi
    170e:	e8 00 00 00 00       	callq  1713 <_ZN4Sems9initTypesEv+0x77>
    1713:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    1717:	48 8d 48 20          	lea    0x20(%rax),%rcx
    171b:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    171f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1723:	48 89 c6             	mov    %rax,%rsi
    1726:	48 89 cf             	mov    %rcx,%rdi
    1729:	e8 00 00 00 00       	callq  172e <_ZN4Sems9initTypesEv+0x92>
    172e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1732:	48 89 c7             	mov    %rax,%rdi
    1735:	e8 00 00 00 00       	callq  173a <_ZN4Sems9initTypesEv+0x9e>
    this->Type.insert("uword", 0x02);
    173a:	c7 45 dc 02 00 00 00 	movl   $0x2,-0x24(%rbp)
    1741:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1745:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 174c <_ZN4Sems9initTypesEv+0xb0>
    174c:	48 89 c7             	mov    %rax,%rdi
    174f:	e8 00 00 00 00       	callq  1754 <_ZN4Sems9initTypesEv+0xb8>
    1754:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    1758:	48 8d 48 20          	lea    0x20(%rax),%rcx
    175c:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    1760:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1764:	48 89 c6             	mov    %rax,%rsi
    1767:	48 89 cf             	mov    %rcx,%rdi
    176a:	e8 00 00 00 00       	callq  176f <_ZN4Sems9initTypesEv+0xd3>
    176f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1773:	48 89 c7             	mov    %rax,%rdi
    1776:	e8 00 00 00 00       	callq  177b <_ZN4Sems9initTypesEv+0xdf>
    this->Type.insert("udword", 0x03);
    177b:	c7 45 dc 03 00 00 00 	movl   $0x3,-0x24(%rbp)
    1782:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1786:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 178d <_ZN4Sems9initTypesEv+0xf1>
    178d:	48 89 c7             	mov    %rax,%rdi
    1790:	e8 00 00 00 00       	callq  1795 <_ZN4Sems9initTypesEv+0xf9>
    1795:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    1799:	48 8d 48 20          	lea    0x20(%rax),%rcx
    179d:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    17a1:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    17a5:	48 89 c6             	mov    %rax,%rsi
    17a8:	48 89 cf             	mov    %rcx,%rdi
    17ab:	e8 00 00 00 00       	callq  17b0 <_ZN4Sems9initTypesEv+0x114>
    17b0:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    17b4:	48 89 c7             	mov    %rax,%rdi
    17b7:	e8 00 00 00 00       	callq  17bc <_ZN4Sems9initTypesEv+0x120>
    this->Type.insert("array", 0x04);
    17bc:	c7 45 dc 04 00 00 00 	movl   $0x4,-0x24(%rbp)
    17c3:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    17c7:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 17ce <_ZN4Sems9initTypesEv+0x132>
    17ce:	48 89 c7             	mov    %rax,%rdi
    17d1:	e8 00 00 00 00       	callq  17d6 <_ZN4Sems9initTypesEv+0x13a>
    17d6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    17da:	48 8d 48 20          	lea    0x20(%rax),%rcx
    17de:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    17e2:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    17e6:	48 89 c6             	mov    %rax,%rsi
    17e9:	48 89 cf             	mov    %rcx,%rdi
    17ec:	e8 00 00 00 00       	callq  17f1 <_ZN4Sems9initTypesEv+0x155>
    17f1:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    17f5:	48 89 c7             	mov    %rax,%rdi
    17f8:	e8 00 00 00 00       	callq  17fd <_ZN4Sems9initTypesEv+0x161>
    this->Type.insert("msg", 0x05);
    17fd:	c7 45 dc 05 00 00 00 	movl   $0x5,-0x24(%rbp)
    1804:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1808:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 180f <_ZN4Sems9initTypesEv+0x173>
    180f:	48 89 c7             	mov    %rax,%rdi
    1812:	e8 00 00 00 00       	callq  1817 <_ZN4Sems9initTypesEv+0x17b>
    1817:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    181b:	48 8d 48 20          	lea    0x20(%rax),%rcx
    181f:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    1823:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1827:	48 89 c6             	mov    %rax,%rsi
    182a:	48 89 cf             	mov    %rcx,%rdi
    182d:	e8 00 00 00 00       	callq  1832 <_ZN4Sems9initTypesEv+0x196>
    1832:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1836:	48 89 c7             	mov    %rax,%rdi
    1839:	e8 00 00 00 00       	callq  183e <_ZN4Sems9initTypesEv+0x1a2>
}
    183e:	90                   	nop
    183f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    1843:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    184a:	00 00 
    184c:	0f 84 a6 00 00 00    	je     18f8 <_ZN4Sems9initTypesEv+0x25c>
    1852:	e9 9c 00 00 00       	jmpq   18f3 <_ZN4Sems9initTypesEv+0x257>
    1857:	48 89 c3             	mov    %rax,%rbx
    this->predefinedVars.insert("__zero",       0xFE);
    this->predefinedVars.insert("__FF",         0xFF);
}

void Sems::initTypes(){
    this->Type.insert("word", 0x00);
    185a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    185e:	48 89 c7             	mov    %rax,%rdi
    1861:	e8 00 00 00 00       	callq  1866 <_ZN4Sems9initTypesEv+0x1ca>
    1866:	48 89 d8             	mov    %rbx,%rax
    1869:	48 89 c7             	mov    %rax,%rdi
    186c:	e8 00 00 00 00       	callq  1871 <_ZN4Sems9initTypesEv+0x1d5>
    1871:	48 89 c3             	mov    %rax,%rbx
    this->Type.insert("dword", 0x01);
    1874:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1878:	48 89 c7             	mov    %rax,%rdi
    187b:	e8 00 00 00 00       	callq  1880 <_ZN4Sems9initTypesEv+0x1e4>
    1880:	48 89 d8             	mov    %rbx,%rax
    1883:	48 89 c7             	mov    %rax,%rdi
    1886:	e8 00 00 00 00       	callq  188b <_ZN4Sems9initTypesEv+0x1ef>
    188b:	48 89 c3             	mov    %rax,%rbx
    this->Type.insert("uword", 0x02);
    188e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    1892:	48 89 c7             	mov    %rax,%rdi
    1895:	e8 00 00 00 00       	callq  189a <_ZN4Sems9initTypesEv+0x1fe>
    189a:	48 89 d8             	mov    %rbx,%rax
    189d:	48 89 c7             	mov    %rax,%rdi
    18a0:	e8 00 00 00 00       	callq  18a5 <_ZN4Sems9initTypesEv+0x209>
    18a5:	48 89 c3             	mov    %rax,%rbx
    this->Type.insert("udword", 0x03);
    18a8:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    18ac:	48 89 c7             	mov    %rax,%rdi
    18af:	e8 00 00 00 00       	callq  18b4 <_ZN4Sems9initTypesEv+0x218>
    18b4:	48 89 d8             	mov    %rbx,%rax
    18b7:	48 89 c7             	mov    %rax,%rdi
    18ba:	e8 00 00 00 00       	callq  18bf <_ZN4Sems9initTypesEv+0x223>
    18bf:	48 89 c3             	mov    %rax,%rbx
    this->Type.insert("array", 0x04);
    18c2:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    18c6:	48 89 c7             	mov    %rax,%rdi
    18c9:	e8 00 00 00 00       	callq  18ce <_ZN4Sems9initTypesEv+0x232>
    18ce:	48 89 d8             	mov    %rbx,%rax
    18d1:	48 89 c7             	mov    %rax,%rdi
    18d4:	e8 00 00 00 00       	callq  18d9 <_ZN4Sems9initTypesEv+0x23d>
    18d9:	48 89 c3             	mov    %rax,%rbx
    this->Type.insert("msg", 0x05);
    18dc:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    18e0:	48 89 c7             	mov    %rax,%rdi
    18e3:	e8 00 00 00 00       	callq  18e8 <_ZN4Sems9initTypesEv+0x24c>
    18e8:	48 89 d8             	mov    %rbx,%rax
    18eb:	48 89 c7             	mov    %rax,%rdi
    18ee:	e8 00 00 00 00       	callq  18f3 <_ZN4Sems9initTypesEv+0x257>
}
    18f3:	e8 00 00 00 00       	callq  18f8 <_ZN4Sems9initTypesEv+0x25c>
    18f8:	48 83 c4 38          	add    $0x38,%rsp
    18fc:	5b                   	pop    %rbx
    18fd:	5d                   	pop    %rbp
    18fe:	c3                   	retq   
    18ff:	90                   	nop

0000000000001900 <_ZN4SemsC1Ev>:

Sems::Sems()
    1900:	55                   	push   %rbp
    1901:	48 89 e5             	mov    %rsp,%rbp
    1904:	53                   	push   %rbx
    1905:	48 83 ec 18          	sub    $0x18,%rsp
    1909:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    190d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    1911:	48 89 c7             	mov    %rax,%rdi
    1914:	e8 00 00 00 00       	callq  1919 <_ZN4SemsC1Ev+0x19>
    1919:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    191d:	48 83 c0 08          	add    $0x8,%rax
    1921:	48 89 c7             	mov    %rax,%rdi
    1924:	e8 00 00 00 00       	callq  1929 <_ZN4SemsC1Ev+0x29>
    1929:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    192d:	48 83 c0 10          	add    $0x10,%rax
    1931:	48 89 c7             	mov    %rax,%rdi
    1934:	e8 00 00 00 00       	callq  1939 <_ZN4SemsC1Ev+0x39>
    1939:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    193d:	48 83 c0 18          	add    $0x18,%rax
    1941:	48 89 c7             	mov    %rax,%rdi
    1944:	e8 00 00 00 00       	callq  1949 <_ZN4SemsC1Ev+0x49>
    1949:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    194d:	48 83 c0 20          	add    $0x20,%rax
    1951:	48 89 c7             	mov    %rax,%rdi
    1954:	e8 00 00 00 00       	callq  1959 <_ZN4SemsC1Ev+0x59>
{
    semsInitDefault();
    1959:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    195d:	48 89 c7             	mov    %rax,%rdi
    1960:	e8 00 00 00 00       	callq  1965 <_ZN4SemsC1Ev+0x65>
    initOps();
    1965:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    1969:	48 89 c7             	mov    %rax,%rdi
    196c:	e8 00 00 00 00       	callq  1971 <_ZN4SemsC1Ev+0x71>
    initErrors();
    1971:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    1975:	48 89 c7             	mov    %rax,%rdi
    1978:	e8 00 00 00 00       	callq  197d <_ZN4SemsC1Ev+0x7d>
    initPreDefs();
    197d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    1981:	48 89 c7             	mov    %rax,%rdi
    1984:	e8 00 00 00 00       	callq  1989 <_ZN4SemsC1Ev+0x89>
}
    1989:	eb 5a                	jmp    19e5 <_ZN4SemsC1Ev+0xe5>
    198b:	48 89 c3             	mov    %rax,%rbx
    this->Type.insert("udword", 0x03);
    this->Type.insert("array", 0x04);
    this->Type.insert("msg", 0x05);
}

Sems::Sems()
    198e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    1992:	48 83 c0 20          	add    $0x20,%rax
    1996:	48 89 c7             	mov    %rax,%rdi
    1999:	e8 00 00 00 00       	callq  199e <_ZN4SemsC1Ev+0x9e>
    199e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    19a2:	48 83 c0 18          	add    $0x18,%rax
    19a6:	48 89 c7             	mov    %rax,%rdi
    19a9:	e8 00 00 00 00       	callq  19ae <_ZN4SemsC1Ev+0xae>
    19ae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    19b2:	48 83 c0 10          	add    $0x10,%rax
    19b6:	48 89 c7             	mov    %rax,%rdi
    19b9:	e8 00 00 00 00       	callq  19be <_ZN4SemsC1Ev+0xbe>
    19be:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    19c2:	48 83 c0 08          	add    $0x8,%rax
    19c6:	48 89 c7             	mov    %rax,%rdi
    19c9:	e8 00 00 00 00       	callq  19ce <_ZN4SemsC1Ev+0xce>
    19ce:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    19d2:	48 89 c7             	mov    %rax,%rdi
    19d5:	e8 00 00 00 00       	callq  19da <_ZN4SemsC1Ev+0xda>
    19da:	48 89 d8             	mov    %rbx,%rax
    19dd:	48 89 c7             	mov    %rax,%rdi
    19e0:	e8 00 00 00 00       	callq  19e5 <_ZN4SemsC1Ev+0xe5>
{
    semsInitDefault();
    initOps();
    initErrors();
    initPreDefs();
}
    19e5:	48 83 c4 18          	add    $0x18,%rsp
    19e9:	5b                   	pop    %rbx
    19ea:	5d                   	pop    %rbp
    19eb:	c3                   	retq   

00000000000019ec <_ZN4Sems12allFunctionsEv>:


QString Sems::allFunctions(){
    19ec:	55                   	push   %rbp
    19ed:	48 89 e5             	mov    %rsp,%rbp
    19f0:	53                   	push   %rbx
    19f1:	48 83 ec 38          	sub    $0x38,%rsp
    19f5:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    19f9:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    19fd:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    1a04:	00 00 
    1a06:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    1a0a:	31 c0                	xor    %eax,%eax
    QString result;
    1a0c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    1a10:	48 89 c7             	mov    %rax,%rdi
    1a13:	e8 00 00 00 00       	callq  1a18 <_ZN4Sems12allFunctionsEv+0x2c>

    QHash<QString, int>::iterator it;
    1a18:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1a1c:	48 89 c7             	mov    %rax,%rdi
    1a1f:	e8 00 00 00 00       	callq  1a24 <_ZN4Sems12allFunctionsEv+0x38>
    for(it = this->Sem.begin(); it != this->Sem.end(); ++it){
    1a24:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    1a28:	48 89 c7             	mov    %rax,%rdi
    1a2b:	e8 00 00 00 00       	callq  1a30 <_ZN4Sems12allFunctionsEv+0x44>
    1a30:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    1a34:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    1a38:	48 89 c7             	mov    %rax,%rdi
    1a3b:	e8 00 00 00 00       	callq  1a40 <_ZN4Sems12allFunctionsEv+0x54>
    1a40:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    1a44:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    1a48:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1a4c:	48 89 d6             	mov    %rdx,%rsi
    1a4f:	48 89 c7             	mov    %rax,%rdi
    1a52:	e8 00 00 00 00       	callq  1a57 <_ZN4Sems12allFunctionsEv+0x6b>
    1a57:	84 c0                	test   %al,%al
    1a59:	74 59                	je     1ab4 <_ZN4Sems12allFunctionsEv+0xc8>
        result.append(it.key());
    1a5b:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1a5f:	48 89 c7             	mov    %rax,%rdi
    1a62:	e8 00 00 00 00       	callq  1a67 <_ZN4Sems12allFunctionsEv+0x7b>
    1a67:	48 89 c2             	mov    %rax,%rdx
    1a6a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    1a6e:	48 89 d6             	mov    %rdx,%rsi
    1a71:	48 89 c7             	mov    %rax,%rdi
    1a74:	e8 00 00 00 00       	callq  1a79 <_ZN4Sems12allFunctionsEv+0x8d>
        result.append("|");
    1a79:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    1a7d:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1a84 <_ZN4Sems12allFunctionsEv+0x98>
    1a84:	48 89 c7             	mov    %rax,%rdi
    1a87:	e8 00 00 00 00       	callq  1a8c <_ZN4Sems12allFunctionsEv+0xa0>

QString Sems::allFunctions(){
    QString result;

    QHash<QString, int>::iterator it;
    for(it = this->Sem.begin(); it != this->Sem.end(); ++it){
    1a8c:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1a90:	48 89 c7             	mov    %rax,%rdi
    1a93:	e8 00 00 00 00       	callq  1a98 <_ZN4Sems12allFunctionsEv+0xac>
    1a98:	eb 9a                	jmp    1a34 <_ZN4Sems12allFunctionsEv+0x48>
    1a9a:	48 89 c3             	mov    %rax,%rbx
    1a9d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    1aa1:	48 89 c7             	mov    %rax,%rdi
    1aa4:	e8 00 00 00 00       	callq  1aa9 <_ZN4Sems12allFunctionsEv+0xbd>
    1aa9:	48 89 d8             	mov    %rbx,%rax
    1aac:	48 89 c7             	mov    %rax,%rdi
    1aaf:	e8 00 00 00 00       	callq  1ab4 <_ZN4Sems12allFunctionsEv+0xc8>
        result.append(it.key());
        result.append("|");
    }

    return result;
    1ab4:	90                   	nop
}
    1ab5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    1ab9:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    1abd:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    1ac4:	00 00 
    1ac6:	74 05                	je     1acd <_ZN4Sems12allFunctionsEv+0xe1>
    1ac8:	e8 00 00 00 00       	callq  1acd <_ZN4Sems12allFunctionsEv+0xe1>
    1acd:	48 83 c4 38          	add    $0x38,%rsp
    1ad1:	5b                   	pop    %rbx
    1ad2:	5d                   	pop    %rbp
    1ad3:	c3                   	retq   

0000000000001ad4 <_ZN4Sems6allOpsEv>:

// Hello, china!
QString Sems::allOps(){
    1ad4:	55                   	push   %rbp
    1ad5:	48 89 e5             	mov    %rsp,%rbp
    1ad8:	53                   	push   %rbx
    1ad9:	48 83 ec 38          	sub    $0x38,%rsp
    1add:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    1ae1:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    1ae5:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    1aec:	00 00 
    1aee:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    1af2:	31 c0                	xor    %eax,%eax
    QString result;
    1af4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    1af8:	48 89 c7             	mov    %rax,%rdi
    1afb:	e8 00 00 00 00       	callq  1b00 <_ZN4Sems6allOpsEv+0x2c>

    QHash<QString, int>::iterator it;
    1b00:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1b04:	48 89 c7             	mov    %rax,%rdi
    1b07:	e8 00 00 00 00       	callq  1b0c <_ZN4Sems6allOpsEv+0x38>
    for(it = this->Opeartion.begin(); it != this->Opeartion.end(); ++it){
    1b0c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    1b10:	48 83 c0 08          	add    $0x8,%rax
    1b14:	48 89 c7             	mov    %rax,%rdi
    1b17:	e8 00 00 00 00       	callq  1b1c <_ZN4Sems6allOpsEv+0x48>
    1b1c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    1b20:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    1b24:	48 83 c0 08          	add    $0x8,%rax
    1b28:	48 89 c7             	mov    %rax,%rdi
    1b2b:	e8 00 00 00 00       	callq  1b30 <_ZN4Sems6allOpsEv+0x5c>
    1b30:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    1b34:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    1b38:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1b3c:	48 89 d6             	mov    %rdx,%rsi
    1b3f:	48 89 c7             	mov    %rax,%rdi
    1b42:	e8 00 00 00 00       	callq  1b47 <_ZN4Sems6allOpsEv+0x73>
    1b47:	84 c0                	test   %al,%al
    1b49:	74 6c                	je     1bb7 <_ZN4Sems6allOpsEv+0xe3>
        result.append("\\");
    1b4b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    1b4f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1b56 <_ZN4Sems6allOpsEv+0x82>
    1b56:	48 89 c7             	mov    %rax,%rdi
    1b59:	e8 00 00 00 00       	callq  1b5e <_ZN4Sems6allOpsEv+0x8a>
        result.append(it.key());
    1b5e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1b62:	48 89 c7             	mov    %rax,%rdi
    1b65:	e8 00 00 00 00       	callq  1b6a <_ZN4Sems6allOpsEv+0x96>
    1b6a:	48 89 c2             	mov    %rax,%rdx
    1b6d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    1b71:	48 89 d6             	mov    %rdx,%rsi
    1b74:	48 89 c7             	mov    %rax,%rdi
    1b77:	e8 00 00 00 00       	callq  1b7c <_ZN4Sems6allOpsEv+0xa8>
        result.append("|");
    1b7c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    1b80:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1b87 <_ZN4Sems6allOpsEv+0xb3>
    1b87:	48 89 c7             	mov    %rax,%rdi
    1b8a:	e8 00 00 00 00       	callq  1b8f <_ZN4Sems6allOpsEv+0xbb>
// Hello, china!
QString Sems::allOps(){
    QString result;

    QHash<QString, int>::iterator it;
    for(it = this->Opeartion.begin(); it != this->Opeartion.end(); ++it){
    1b8f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1b93:	48 89 c7             	mov    %rax,%rdi
    1b96:	e8 00 00 00 00       	callq  1b9b <_ZN4Sems6allOpsEv+0xc7>
    1b9b:	eb 83                	jmp    1b20 <_ZN4Sems6allOpsEv+0x4c>
    1b9d:	48 89 c3             	mov    %rax,%rbx
    1ba0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    1ba4:	48 89 c7             	mov    %rax,%rdi
    1ba7:	e8 00 00 00 00       	callq  1bac <_ZN4Sems6allOpsEv+0xd8>
    1bac:	48 89 d8             	mov    %rbx,%rax
    1baf:	48 89 c7             	mov    %rax,%rdi
    1bb2:	e8 00 00 00 00       	callq  1bb7 <_ZN4Sems6allOpsEv+0xe3>
        result.append("\\");
        result.append(it.key());
        result.append("|");
    }

    return result;
    1bb7:	90                   	nop
}
    1bb8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    1bbc:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    1bc0:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    1bc7:	00 00 
    1bc9:	74 05                	je     1bd0 <_ZN4Sems6allOpsEv+0xfc>
    1bcb:	e8 00 00 00 00       	callq  1bd0 <_ZN4Sems6allOpsEv+0xfc>
    1bd0:	48 83 c4 38          	add    $0x38,%rsp
    1bd4:	5b                   	pop    %rbx
    1bd5:	5d                   	pop    %rbp
    1bd6:	c3                   	retq   
    1bd7:	90                   	nop

0000000000001bd8 <_ZN4Sems8allTypesEv>:

// Hello, china!
QString Sems::allTypes(){
    1bd8:	55                   	push   %rbp
    1bd9:	48 89 e5             	mov    %rsp,%rbp
    1bdc:	53                   	push   %rbx
    1bdd:	48 83 ec 38          	sub    $0x38,%rsp
    1be1:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    1be5:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    1be9:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    1bf0:	00 00 
    1bf2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    1bf6:	31 c0                	xor    %eax,%eax
    QString result;
    1bf8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    1bfc:	48 89 c7             	mov    %rax,%rdi
    1bff:	e8 00 00 00 00       	callq  1c04 <_ZN4Sems8allTypesEv+0x2c>

    QHash<QString, int>::iterator it;
    1c04:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1c08:	48 89 c7             	mov    %rax,%rdi
    1c0b:	e8 00 00 00 00       	callq  1c10 <_ZN4Sems8allTypesEv+0x38>
    for(it = this->Type.begin(); it != this->Type.end(); ++it){
    1c10:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    1c14:	48 83 c0 20          	add    $0x20,%rax
    1c18:	48 89 c7             	mov    %rax,%rdi
    1c1b:	e8 00 00 00 00       	callq  1c20 <_ZN4Sems8allTypesEv+0x48>
    1c20:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    1c24:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    1c28:	48 83 c0 20          	add    $0x20,%rax
    1c2c:	48 89 c7             	mov    %rax,%rdi
    1c2f:	e8 00 00 00 00       	callq  1c34 <_ZN4Sems8allTypesEv+0x5c>
    1c34:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    1c38:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    1c3c:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1c40:	48 89 d6             	mov    %rdx,%rsi
    1c43:	48 89 c7             	mov    %rax,%rdi
    1c46:	e8 00 00 00 00       	callq  1c4b <_ZN4Sems8allTypesEv+0x73>
    1c4b:	84 c0                	test   %al,%al
    1c4d:	74 6c                	je     1cbb <_ZN4Sems8allTypesEv+0xe3>
        result.append("\\");
    1c4f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    1c53:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1c5a <_ZN4Sems8allTypesEv+0x82>
    1c5a:	48 89 c7             	mov    %rax,%rdi
    1c5d:	e8 00 00 00 00       	callq  1c62 <_ZN4Sems8allTypesEv+0x8a>
        result.append(it.key());
    1c62:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1c66:	48 89 c7             	mov    %rax,%rdi
    1c69:	e8 00 00 00 00       	callq  1c6e <_ZN4Sems8allTypesEv+0x96>
    1c6e:	48 89 c2             	mov    %rax,%rdx
    1c71:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    1c75:	48 89 d6             	mov    %rdx,%rsi
    1c78:	48 89 c7             	mov    %rax,%rdi
    1c7b:	e8 00 00 00 00       	callq  1c80 <_ZN4Sems8allTypesEv+0xa8>
        result.append("|");
    1c80:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    1c84:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1c8b <_ZN4Sems8allTypesEv+0xb3>
    1c8b:	48 89 c7             	mov    %rax,%rdi
    1c8e:	e8 00 00 00 00       	callq  1c93 <_ZN4Sems8allTypesEv+0xbb>
// Hello, china!
QString Sems::allTypes(){
    QString result;

    QHash<QString, int>::iterator it;
    for(it = this->Type.begin(); it != this->Type.end(); ++it){
    1c93:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    1c97:	48 89 c7             	mov    %rax,%rdi
    1c9a:	e8 00 00 00 00       	callq  1c9f <_ZN4Sems8allTypesEv+0xc7>
    1c9f:	eb 83                	jmp    1c24 <_ZN4Sems8allTypesEv+0x4c>
    1ca1:	48 89 c3             	mov    %rax,%rbx
    1ca4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    1ca8:	48 89 c7             	mov    %rax,%rdi
    1cab:	e8 00 00 00 00       	callq  1cb0 <_ZN4Sems8allTypesEv+0xd8>
    1cb0:	48 89 d8             	mov    %rbx,%rax
    1cb3:	48 89 c7             	mov    %rax,%rdi
    1cb6:	e8 00 00 00 00       	callq  1cbb <_ZN4Sems8allTypesEv+0xe3>
        result.append("\\");
        result.append(it.key());
        result.append("|");
    }

    return result;
    1cbb:	90                   	nop
}
    1cbc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    1cc0:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    1cc4:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    1ccb:	00 00 
    1ccd:	74 05                	je     1cd4 <_ZN4Sems8allTypesEv+0xfc>
    1ccf:	e8 00 00 00 00       	callq  1cd4 <_ZN4Sems8allTypesEv+0xfc>
    1cd4:	48 83 c4 38          	add    $0x38,%rsp
    1cd8:	5b                   	pop    %rbx
    1cd9:	5d                   	pop    %rbp
    1cda:	c3                   	retq   

Дизассемблирование раздела .text._ZnwmPv:

0000000000000000 <_ZnwmPv>:
#include "sems.h"

void Sems::semsInitDefault()
{
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   

Дизассемблирование раздела .text._ZdlPvS_:

0000000000000000 <_ZdlPvS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	90                   	nop
   d:	5d                   	pop    %rbp
   e:	c3                   	retq   

Дизассемблирование раздела .text._Z7qt_noopv:

0000000000000000 <_Z7qt_noopv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	90                   	nop
   5:	5d                   	pop    %rbp
   6:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QtPrivate8RefCount3refEv:

0000000000000000 <_ZN9QtPrivate8RefCount3refEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN9QtPrivate8RefCount3refEv+0x18>
  18:	89 45 fc             	mov    %eax,-0x4(%rbp)
  1b:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
    this->Sem.insert("rotl",        0x01);
  1f:	75 07                	jne    28 <_ZN9QtPrivate8RefCount3refEv+0x28>
  21:	b8 00 00 00 00       	mov    $0x0,%eax
  26:	eb 17                	jmp    3f <_ZN9QtPrivate8RefCount3refEv+0x3f>
  28:	83 7d fc ff          	cmpl   $0xffffffff,-0x4(%rbp)
  2c:	74 0c                	je     3a <_ZN9QtPrivate8RefCount3refEv+0x3a>
  2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZN9QtPrivate8RefCount3refEv+0x3a>
  3a:	b8 01 00 00 00       	mov    $0x1,%eax
  3f:	c9                   	leaveq 
  40:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QtPrivate8RefCount5derefEv:

0000000000000000 <_ZN9QtPrivate8RefCount5derefEv>:
#include "sems.h"

void Sems::semsInitDefault()
{
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN9QtPrivate8RefCount5derefEv+0x18>
  18:	89 45 fc             	mov    %eax,-0x4(%rbp)
  1b:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
    this->Sem.insert("rotl",        0x01);
  1f:	75 07                	jne    28 <_ZN9QtPrivate8RefCount5derefEv+0x28>
  21:	b8 00 00 00 00       	mov    $0x0,%eax
  26:	eb 19                	jmp    41 <_ZN9QtPrivate8RefCount5derefEv+0x41>
  28:	83 7d fc ff          	cmpl   $0xffffffff,-0x4(%rbp)
  2c:	75 07                	jne    35 <_ZN9QtPrivate8RefCount5derefEv+0x35>
  2e:	b8 01 00 00 00       	mov    $0x1,%eax
  33:	eb 0c                	jmp    41 <_ZN9QtPrivate8RefCount5derefEv+0x41>
  35:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  39:	48 89 c7             	mov    %rax,%rdi
  3c:	e8 00 00 00 00       	callq  41 <_ZN9QtPrivate8RefCount5derefEv+0x41>
  41:	c9                   	leaveq 
  42:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QtPrivate8RefCount8isSharedEv:

0000000000000000 <_ZNK9QtPrivate8RefCount8isSharedEv>:
#include "sems.h"

void Sems::semsInitDefault()
{
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZNK9QtPrivate8RefCount8isSharedEv+0x18>
  18:	89 45 fc             	mov    %eax,-0x4(%rbp)
  1b:	83 7d fc 01          	cmpl   $0x1,-0x4(%rbp)
    this->Sem.insert("rotl",        0x01);
  1f:	74 0d                	je     2e <_ZNK9QtPrivate8RefCount8isSharedEv+0x2e>
  21:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  25:	74 07                	je     2e <_ZNK9QtPrivate8RefCount8isSharedEv+0x2e>
  27:	b8 01 00 00 00       	mov    $0x1,%eax
  2c:	eb 05                	jmp    33 <_ZNK9QtPrivate8RefCount8isSharedEv+0x33>
  2e:	b8 00 00 00 00       	mov    $0x0,%eax
  33:	c9                   	leaveq 
  34:	c3                   	retq   

Дизассемблирование раздела .text._ZN10QArrayData10sharedNullEv:

0000000000000000 <_ZN10QArrayData10sharedNullEv>:
#include "sems.h"

void Sems::semsInitDefault()
{
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # b <_ZN10QArrayData10sharedNullEv+0xb>
   b:	5d                   	pop    %rbp
   c:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QString8fromUtf8EPKci:

0000000000000000 <_ZN7QString8fromUtf8EPKci>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	89 55 dc             	mov    %edx,-0x24(%rbp)
  13:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1a:	00 00 
    this->Sem.insert("rotl",        0x01);
  1c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  20:	31 c0                	xor    %eax,%eax
  22:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  27:	74 14                	je     3d <_ZN7QString8fromUtf8EPKci+0x3d>
  29:	83 7d dc ff          	cmpl   $0xffffffff,-0x24(%rbp)
  2d:	75 0e                	jne    3d <_ZN7QString8fromUtf8EPKci+0x3d>
  2f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  33:	48 89 c7             	mov    %rax,%rdi
  36:	e8 00 00 00 00       	callq  3b <_ZN7QString8fromUtf8EPKci+0x3b>
  3b:	eb 03                	jmp    40 <_ZN7QString8fromUtf8EPKci+0x40>
  3d:	8b 45 dc             	mov    -0x24(%rbp),%eax
  40:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  44:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  48:	89 c2                	mov    %eax,%edx
  4a:	48 89 cf             	mov    %rcx,%rdi
  4d:	e8 00 00 00 00       	callq  52 <_ZN7QString8fromUtf8EPKci+0x52>
  52:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  56:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    this->Sem.insert("rotr",        0x02);
  5a:	64 48 33 14 25 28 00 	xor    %fs:0x28,%rdx
  61:	00 00 
  63:	74 05                	je     6a <_ZN7QString8fromUtf8EPKci+0x6a>
  65:	e8 00 00 00 00       	callq  6a <_ZN7QString8fromUtf8EPKci+0x6a>
  6a:	c9                   	leaveq 
  6b:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringC2EPKc:

0000000000000000 <_ZN7QStringC1EPKc>:
#include "sems.h"

void Sems::semsInitDefault()
{
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  15:	74 10                	je     27 <_ZN7QStringC1EPKc+0x27>
  17:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1b:	48 89 c7             	mov    %rax,%rdi
    this->Sem.insert("rotl",        0x01);
  1e:	e8 00 00 00 00       	callq  23 <_ZN7QStringC1EPKc+0x23>
  23:	89 c2                	mov    %eax,%edx
  25:	eb 05                	jmp    2c <_ZN7QStringC1EPKc+0x2c>
  27:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  2c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  30:	89 d6                	mov    %edx,%esi
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZN7QStringC1EPKc+0x3a>
  3a:	48 89 c2             	mov    %rax,%rdx
  3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41:	48 89 10             	mov    %rdx,(%rax)
  44:	90                   	nop
  45:	c9                   	leaveq 
  46:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QString6appendEPKc:

0000000000000000 <_ZN7QString6appendEPKc>:
#include "sems.h"

void Sems::semsInitDefault()
{
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    this->Sem.insert("rotl",        0x01);
  1e:	31 c0                	xor    %eax,%eax
  20:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  24:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  28:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  2d:	48 89 ce             	mov    %rcx,%rsi
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN7QString6appendEPKc+0x38>
  38:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  3c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40:	48 89 d6             	mov    %rdx,%rsi
  43:	48 89 c7             	mov    %rax,%rdi
  46:	e8 00 00 00 00       	callq  4b <_ZN7QString6appendEPKc+0x4b>
  4b:	48 89 c3             	mov    %rax,%rbx
  4e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  52:	48 89 c7             	mov    %rax,%rdi
  55:	e8 00 00 00 00       	callq  5a <_ZN7QString6appendEPKc+0x5a>
    this->Sem.insert("rotr",        0x02);
  5a:	48 89 d8             	mov    %rbx,%rax
  5d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  61:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  68:	00 00 
  6a:	74 21                	je     8d <_ZN7QString6appendEPKc+0x8d>
  6c:	eb 1a                	jmp    88 <_ZN7QString6appendEPKc+0x88>
  6e:	48 89 c3             	mov    %rax,%rbx
  71:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  75:	48 89 c7             	mov    %rax,%rdi
  78:	e8 00 00 00 00       	callq  7d <_ZN7QString6appendEPKc+0x7d>
  7d:	48 89 d8             	mov    %rbx,%rax
  80:	48 89 c7             	mov    %rax,%rdi
  83:	e8 00 00 00 00       	callq  88 <_ZN7QString6appendEPKc+0x88>
  88:	e8 00 00 00 00       	callq  8d <_ZN7QString6appendEPKc+0x8d>
  8d:	48 83 c4 28          	add    $0x28,%rsp
  91:	5b                   	pop    %rbx
  92:	5d                   	pop    %rbp
  93:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringC2ERKS_:

0000000000000000 <_ZN7QStringC1ERKS_>:
#include "sems.h"

void Sems::semsInitDefault()
{
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 8b 10             	mov    (%rax),%rdx
  17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1b:	48 89 10             	mov    %rdx,(%rax)
    this->Sem.insert("rotl",        0x01);
  1e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  22:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  26:	75 18                	jne    40 <_ZN7QStringC1ERKS_+0x40>
  28:	ba 6e 03 00 00       	mov    $0x36e,%edx
  2d:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 34 <_ZN7QStringC1ERKS_+0x34>
  34:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 3b <_ZN7QStringC1ERKS_+0x3b>
  3b:	e8 00 00 00 00       	callq  40 <_ZN7QStringC1ERKS_+0x40>
  40:	e8 00 00 00 00       	callq  45 <_ZN7QStringC1ERKS_+0x45>
  45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  49:	48 8b 00             	mov    (%rax),%rax
  4c:	48 89 c7             	mov    %rax,%rdi
  4f:	e8 00 00 00 00       	callq  54 <_ZN7QStringC1ERKS_+0x54>
  54:	90                   	nop
  55:	c9                   	leaveq 
  56:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringC2Ev:

0000000000000000 <_ZN7QStringC1Ev>:
#include "sems.h"

void Sems::semsInitDefault()
{
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN7QStringC1Ev+0x11>
  11:	48 89 c2             	mov    %rax,%rdx
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 10             	mov    %rdx,(%rax)
  1b:	90                   	nop
    this->Sem.insert("rotl",        0x01);
  1c:	c9                   	leaveq 
  1d:	c3                   	retq   

Дизассемблирование раздела .text._ZN7QStringD2Ev:

0000000000000000 <_ZN7QStringD1Ev>:
#include "sems.h"

void Sems::semsInitDefault()
{
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN7QStringD1Ev+0x1b>
  1b:	83 f0 01             	xor    $0x1,%eax
    this->Sem.insert("rotl",        0x01);
  1e:	84 c0                	test   %al,%al
  20:	74 0f                	je     31 <_ZN7QStringD1Ev+0x31>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 8b 00             	mov    (%rax),%rax
  29:	48 89 c7             	mov    %rax,%rdi
  2c:	e8 00 00 00 00       	callq  31 <_ZN7QStringD1Ev+0x31>
  31:	90                   	nop
  32:	c9                   	leaveq 
  33:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashData8willGrowEv:

0000000000000000 <_ZN9QHashData8willGrowEv>:
#include "sems.h"

void Sems::semsInitDefault()
{
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	8b 50 14             	mov    0x14(%rax),%edx
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	8b 40 20             	mov    0x20(%rax),%eax
  1a:	39 c2                	cmp    %eax,%edx
    this->Sem.insert("rotl",        0x01);
  1c:	7c 21                	jl     3f <_ZN9QHashData8willGrowEv+0x3f>
  1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  22:	0f b7 40 1e          	movzwl 0x1e(%rax),%eax
  26:	98                   	cwtl   
  27:	8d 50 01             	lea    0x1(%rax),%edx
  2a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2e:	89 d6                	mov    %edx,%esi
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN9QHashData8willGrowEv+0x38>
  38:	b8 01 00 00 00       	mov    $0x1,%eax
  3d:	eb 05                	jmp    44 <_ZN9QHashData8willGrowEv+0x44>
  3f:	b8 00 00 00 00       	mov    $0x0,%eax
  44:	c9                   	leaveq 
  45:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashData9firstNodeEv:

0000000000000000 <_ZN9QHashData9firstNodeEv>:
#include "sems.h"

void Sems::semsInitDefault()
{
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
   c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  10:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  14:	48 8b 40 08          	mov    0x8(%rax),%rax
  18:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    this->Sem.insert("rotl",        0x01);
  1c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  20:	8b 40 20             	mov    0x20(%rax),%eax
  23:	89 45 ec             	mov    %eax,-0x14(%rbp)
  26:	8b 45 ec             	mov    -0x14(%rbp),%eax
  29:	8d 50 ff             	lea    -0x1(%rax),%edx
  2c:	89 55 ec             	mov    %edx,-0x14(%rbp)
  2f:	85 c0                	test   %eax,%eax
  31:	0f 95 c0             	setne  %al
  34:	84 c0                	test   %al,%al
  36:	74 1d                	je     55 <_ZN9QHashData9firstNodeEv+0x55>
  38:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  3c:	48 8b 00             	mov    (%rax),%rax
  3f:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  43:	74 09                	je     4e <_ZN9QHashData9firstNodeEv+0x4e>
  45:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  49:	48 8b 00             	mov    (%rax),%rax
  4c:	eb 0b                	jmp    59 <_ZN9QHashData9firstNodeEv+0x59>
  4e:	48 83 45 f0 08       	addq   $0x8,-0x10(%rbp)
  53:	eb d1                	jmp    26 <_ZN9QHashData9firstNodeEv+0x26>
  55:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    this->Sem.insert("rotr",        0x02);
  59:	5d                   	pop    %rbp
  5a:	c3                   	retq   

Дизассемблирование раздела .text._ZNK19QBasicAtomicIntegerIiE4loadEv:

0000000000000000 <_ZNK19QBasicAtomicIntegerIiE4loadEv>:
#include "sems.h"

void Sems::semsInitDefault()
{
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	8b 00                	mov    (%rax),%eax
  16:	90                   	nop
  17:	5d                   	pop    %rbp
  18:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QBasicAtomicIntegerIiE3refEv:

0000000000000000 <_ZN19QBasicAtomicIntegerIiE3refEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN19QBasicAtomicIntegerIiE3refEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN19QBasicAtomicIntegerIiE5derefEv:

0000000000000000 <_ZN19QBasicAtomicIntegerIiE5derefEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN19QBasicAtomicIntegerIiE5derefEv+0x18>
  18:	c9                   	leaveq 
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataItE10sharedNullEv:

0000000000000000 <_ZN15QTypedArrayDataItE10sharedNullEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	e8 00 00 00 00       	callq  9 <_ZN15QTypedArrayDataItE10sharedNullEv+0x9>
   9:	5d                   	pop    %rbp
   a:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QTypedArrayDataItE10deallocateEP10QArrayData:

0000000000000000 <_ZN15QTypedArrayDataItE10deallocateEP10QArrayData>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	ba 08 00 00 00       	mov    $0x8,%edx
  15:	be 02 00 00 00       	mov    $0x2,%esi
  1a:	48 89 c7             	mov    %rax,%rdi
    this->Sem.insert("rotl",        0x01);
  1d:	e8 00 00 00 00       	callq  22 <_ZN15QTypedArrayDataItE10deallocateEP10QArrayData+0x22>
  22:	90                   	nop
  23:	c9                   	leaveq 
  24:	c3                   	retq   

Дизассемблирование раздела .text._Z4qMaxIiERKT_S2_S2_:

0000000000000000 <_Z4qMaxIiERKT_S2_S2_>:
#include "sems.h"

void Sems::semsInitDefault()
{
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	8b 10                	mov    (%rax),%edx
  12:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  16:	8b 00                	mov    (%rax),%eax
  18:	39 c2                	cmp    %eax,%edx
  1a:	7d 06                	jge    22 <_Z4qMaxIiERKT_S2_S2_+0x22>
    this->Sem.insert("rotl",        0x01);
  1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  20:	eb 04                	jmp    26 <_Z4qMaxIiERKT_S2_S2_+0x26>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	5d                   	pop    %rbp
  27:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringiE6insertERKS0_RKi:

0000000000000000 <_ZN5QHashI7QStringiE6insertERKS0_RKi>:
#include "sems.h"

void Sems::semsInitDefault()
{
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 50          	sub    $0x50,%rsp
   8:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   c:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  10:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
    this->Sem.insert("rotl",        0x01);
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QHashI7QStringiE6insertERKS0_RKi+0x2f>
  2f:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
  33:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  37:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  3b:	48 89 ce             	mov    %rcx,%rsi
  3e:	48 89 c7             	mov    %rax,%rdi
  41:	e8 00 00 00 00       	callq  46 <_ZN5QHashI7QStringiE6insertERKS0_RKi+0x46>
  46:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  4a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4e:	48 8b 10             	mov    (%rax),%rdx
  51:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  55:	48 8b 00             	mov    (%rax),%rax
  58:	48 39 c2             	cmp    %rax,%rdx
    this->Sem.insert("rotr",        0x02);
  5b:	75 64                	jne    c1 <_ZN5QHashI7QStringiE6insertERKS0_RKi+0xc1>
  5d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  61:	48 8b 00             	mov    (%rax),%rax
  64:	48 89 c7             	mov    %rax,%rdi
  67:	e8 00 00 00 00       	callq  6c <_ZN5QHashI7QStringiE6insertERKS0_RKi+0x6c>
  6c:	84 c0                	test   %al,%al
  6e:	74 1b                	je     8b <_ZN5QHashI7QStringiE6insertERKS0_RKi+0x8b>
  70:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
  74:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  78:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  7c:	48 89 ce             	mov    %rcx,%rsi
  7f:	48 89 c7             	mov    %rax,%rdi
  82:	e8 00 00 00 00       	callq  87 <_ZN5QHashI7QStringiE6insertERKS0_RKi+0x87>
  87:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8b:	8b 75 dc             	mov    -0x24(%rbp),%esi
  8e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
  92:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
    this->Sem.insert("ashl",        0x03);
  96:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  9a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  9e:	49 89 f8             	mov    %rdi,%r8
  a1:	48 89 c7             	mov    %rax,%rdi
  a4:	e8 00 00 00 00       	callq  a9 <_ZN5QHashI7QStringiE6insertERKS0_RKi+0xa9>
  a9:	48 89 c2             	mov    %rax,%rdx
  ac:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  b0:	48 89 d6             	mov    %rdx,%rsi
  b3:	48 89 c7             	mov    %rax,%rdi
  b6:	e8 00 00 00 00       	callq  bb <_ZN5QHashI7QStringiE6insertERKS0_RKi+0xbb>
  bb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  bf:	eb 2a                	jmp    eb <_ZN5QHashI7QStringiE6insertERKS0_RKi+0xeb>
  c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  c5:	48 8b 00             	mov    (%rax),%rax
  c8:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  cc:	8b 12                	mov    (%rdx),%edx
  ce:	89 50 18             	mov    %edx,0x18(%rax)
  d1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    this->Sem.insert("ashr",        0x04);
  d5:	48 8b 10             	mov    (%rax),%rdx
  d8:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  dc:	48 89 d6             	mov    %rdx,%rsi
  df:	48 89 c7             	mov    %rax,%rdi
  e2:	e8 00 00 00 00       	callq  e7 <_ZN5QHashI7QStringiE6insertERKS0_RKi+0xe7>
  e7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  eb:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  ef:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  f6:	00 00 
  f8:	74 05                	je     ff <_ZN5QHashI7QStringiE6insertERKS0_RKi+0xff>
  fa:	e8 00 00 00 00       	callq  ff <_ZN5QHashI7QStringiE6insertERKS0_RKi+0xff>
  ff:	c9                   	leaveq 
 100:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringiEC2Ev:

0000000000000000 <_ZN5QHashI7QStringiEC1Ev>:
#include "sems.h"

void Sems::semsInitDefault()
{
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 13 <_ZN5QHashI7QStringiEC1Ev+0x13>
  13:	48 89 10             	mov    %rdx,(%rax)
  16:	90                   	nop
  17:	5d                   	pop    %rbp
  18:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringiED2Ev:

0000000000000000 <_ZN5QHashI7QStringiED1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 83 c0 10          	add    $0x10,%rax
  17:	48 89 c7             	mov    %rax,%rdi
  1a:	e8 00 00 00 00       	callq  1f <_ZN5QHashI7QStringiED1Ev+0x1f>
    this->Sem.insert("rotl",        0x01);
  1f:	83 f0 01             	xor    $0x1,%eax
  22:	84 c0                	test   %al,%al
  24:	74 16                	je     3c <_ZN5QHashI7QStringiED1Ev+0x3c>
  26:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2a:	48 8b 10             	mov    (%rax),%rdx
  2d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  31:	48 89 d6             	mov    %rdx,%rsi
  34:	48 89 c7             	mov    %rax,%rdi
  37:	e8 00 00 00 00       	callq  3c <_ZN5QHashI7QStringiED1Ev+0x3c>
  3c:	90                   	nop
  3d:	c9                   	leaveq 
  3e:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringiE8iteratorC2Ev:

0000000000000000 <_ZN5QHashI7QStringiE8iteratorC1Ev>:
#include "sems.h"

void Sems::semsInitDefault()
{
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  13:	90                   	nop
  14:	5d                   	pop    %rbp
  15:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringiE5beginEv:

0000000000000000 <_ZN5QHashI7QStringiE5beginEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    this->Sem.insert("rotl",        0x01);
  1f:	48 89 c7             	mov    %rax,%rdi
  22:	e8 00 00 00 00       	callq  27 <_ZN5QHashI7QStringiE5beginEv+0x27>
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZN5QHashI7QStringiE5beginEv+0x36>
  36:	48 89 c2             	mov    %rax,%rdx
  39:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  3d:	48 89 d6             	mov    %rdx,%rsi
  40:	48 89 c7             	mov    %rax,%rdi
  43:	e8 00 00 00 00       	callq  48 <_ZN5QHashI7QStringiE5beginEv+0x48>
  48:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4c:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  50:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  57:	00 00 
    this->Sem.insert("rotr",        0x02);
  59:	74 05                	je     60 <_ZN5QHashI7QStringiE5beginEv+0x60>
  5b:	e8 00 00 00 00       	callq  60 <_ZN5QHashI7QStringiE5beginEv+0x60>
  60:	c9                   	leaveq 
  61:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringiE3endEv:

0000000000000000 <_ZN5QHashI7QStringiE3endEv>:
#include "sems.h"

void Sems::semsInitDefault()
{
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  19:	31 c0                	xor    %eax,%eax
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    this->Sem.insert("rotl",        0x01);
  1f:	48 89 c7             	mov    %rax,%rdi
  22:	e8 00 00 00 00       	callq  27 <_ZN5QHashI7QStringiE3endEv+0x27>
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2b:	48 8b 10             	mov    (%rax),%rdx
  2e:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  32:	48 89 d6             	mov    %rdx,%rsi
  35:	48 89 c7             	mov    %rax,%rdi
  38:	e8 00 00 00 00       	callq  3d <_ZN5QHashI7QStringiE3endEv+0x3d>
  3d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  41:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  45:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  4c:	00 00 
  4e:	74 05                	je     55 <_ZN5QHashI7QStringiE3endEv+0x55>
  50:	e8 00 00 00 00       	callq  55 <_ZN5QHashI7QStringiE3endEv+0x55>
  55:	c9                   	leaveq 
  56:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QStringiE8iteratorneERKS2_:

0000000000000000 <_ZNK5QHashI7QStringiE8iteratorneERKS2_>:
#include "sems.h"

void Sems::semsInitDefault()
{
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 10             	mov    (%rax),%rdx
  13:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  17:	48 8b 00             	mov    (%rax),%rax
  1a:	48 39 c2             	cmp    %rax,%rdx
    this->Sem.insert("rotl",        0x01);
  1d:	0f 95 c0             	setne  %al
  20:	5d                   	pop    %rbp
  21:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringiE8iteratorppEv:

0000000000000000 <_ZN5QHashI7QStringiE8iteratorppEv>:
#include "sems.h"

void Sems::semsInitDefault()
{
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZN5QHashI7QStringiE8iteratorppEv+0x1b>
  1b:	48 89 c2             	mov    %rax,%rdx
    this->Sem.insert("rotl",        0x01);
  1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  22:	48 89 10             	mov    %rdx,(%rax)
  25:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  29:	c9                   	leaveq 
  2a:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QStringiE8iterator3keyEv:

0000000000000000 <_ZNK5QHashI7QStringiE8iterator3keyEv>:
#include "sems.h"

void Sems::semsInitDefault()
{
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 89 c7             	mov    %rax,%rdi
  16:	e8 00 00 00 00       	callq  1b <_ZNK5QHashI7QStringiE8iterator3keyEv+0x1b>
  1b:	48 83 c0 10          	add    $0x10,%rax
    this->Sem.insert("rotl",        0x01);
  1f:	c9                   	leaveq 
  20:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QBasicAtomicOpsILi4EE3refIiEEbRT_:

0000000000000000 <_ZN15QBasicAtomicOpsILi4EE3refIiEEbRT_>:
#include "sems.h"

void Sems::semsInitDefault()
{
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  10:	f0 83 00 01          	lock addl $0x1,(%rax)
  14:	0f 95 c2             	setne  %dl
  17:	88 55 ff             	mov    %dl,-0x1(%rbp)
  1a:	80 7d ff 00          	cmpb   $0x0,-0x1(%rbp)
    this->Sem.insert("rotl",        0x01);
  1e:	0f 95 c0             	setne  %al
  21:	5d                   	pop    %rbp
  22:	c3                   	retq   

Дизассемблирование раздела .text._ZN15QBasicAtomicOpsILi4EE5derefIiEEbRT_:

0000000000000000 <_ZN15QBasicAtomicOpsILi4EE5derefIiEEbRT_>:
#include "sems.h"

void Sems::semsInitDefault()
{
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
   c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  10:	f0 83 28 01          	lock subl $0x1,(%rax)
  14:	0f 95 c2             	setne  %dl
  17:	88 55 ff             	mov    %dl,-0x1(%rbp)
  1a:	80 7d ff 00          	cmpb   $0x0,-0x1(%rbp)
    this->Sem.insert("rotl",        0x01);
  1e:	0f 95 c0             	setne  %al
  21:	5d                   	pop    %rbp
  22:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringiE6detachEv:

0000000000000000 <_ZN5QHashI7QStringiE6detachEv>:
#include "sems.h"

void Sems::semsInitDefault()
{
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 00             	mov    (%rax),%rax
  13:	48 83 c0 10          	add    $0x10,%rax
  17:	48 89 c7             	mov    %rax,%rdi
  1a:	e8 00 00 00 00       	callq  1f <_ZN5QHashI7QStringiE6detachEv+0x1f>
    this->Sem.insert("rotl",        0x01);
  1f:	84 c0                	test   %al,%al
  21:	74 0c                	je     2f <_ZN5QHashI7QStringiE6detachEv+0x2f>
  23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
  2a:	e8 00 00 00 00       	callq  2f <_ZN5QHashI7QStringiE6detachEv+0x2f>
  2f:	90                   	nop
  30:	c9                   	leaveq 
  31:	c3                   	retq   

Дизассемблирование раздела .text._ZNK5QHashI7QStringiE8findNodeERKS0_Pj:

0000000000000000 <_ZNK5QHashI7QStringiE8findNodeERKS0_Pj>:
#include "sems.h"

void Sems::semsInitDefault()
{
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  14:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    this->Sem.insert("rotl",        0x01);
  1f:	48 8b 00             	mov    (%rax),%rax
  22:	8b 40 20             	mov    0x20(%rax),%eax
  25:	85 c0                	test   %eax,%eax
  27:	75 07                	jne    30 <_ZNK5QHashI7QStringiE8findNodeERKS0_Pj+0x30>
  29:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  2e:	74 2b                	je     5b <_ZNK5QHashI7QStringiE8findNodeERKS0_Pj+0x5b>
  30:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  34:	48 8b 00             	mov    (%rax),%rax
  37:	8b 50 24             	mov    0x24(%rax),%edx
  3a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  3e:	89 d6                	mov    %edx,%esi
  40:	48 89 c7             	mov    %rax,%rdi
  43:	e8 00 00 00 00       	callq  48 <_ZNK5QHashI7QStringiE8findNodeERKS0_Pj+0x48>
  48:	89 45 f4             	mov    %eax,-0xc(%rbp)
  4b:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  50:	74 09                	je     5b <_ZNK5QHashI7QStringiE8findNodeERKS0_Pj+0x5b>
  52:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  56:	8b 55 f4             	mov    -0xc(%rbp),%edx
    this->Sem.insert("rotr",        0x02);
  59:	89 10                	mov    %edx,(%rax)
  5b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5f:	48 8b 00             	mov    (%rax),%rax
  62:	8b 40 20             	mov    0x20(%rax),%eax
  65:	85 c0                	test   %eax,%eax
  67:	0f 84 be 00 00 00    	je     12b <_ZNK5QHashI7QStringiE8findNodeERKS0_Pj+0x12b>
  6d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  71:	48 8b 00             	mov    (%rax),%rax
  74:	48 8b 48 08          	mov    0x8(%rax),%rcx
  78:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7c:	48 8b 00             	mov    (%rax),%rax
  7f:	8b 40 20             	mov    0x20(%rax),%eax
  82:	89 c6                	mov    %eax,%esi
  84:	8b 45 f4             	mov    -0xc(%rbp),%eax
  87:	ba 00 00 00 00       	mov    $0x0,%edx
  8c:	f7 f6                	div    %esi
  8e:	89 d0                	mov    %edx,%eax
  90:	89 c0                	mov    %eax,%eax
  92:	48 c1 e0 03          	shl    $0x3,%rax
    this->Sem.insert("ashl",        0x03);
  96:	48 01 c8             	add    %rcx,%rax
  99:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  9d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  a1:	48 8b 10             	mov    (%rax),%rdx
  a4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a8:	48 8b 00             	mov    (%rax),%rax
  ab:	48 39 c2             	cmp    %rax,%rdx
  ae:	74 27                	je     d7 <_ZNK5QHashI7QStringiE8findNodeERKS0_Pj+0xd7>
  b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  b4:	48 8b 00             	mov    (%rax),%rax
  b7:	48 8b 00             	mov    (%rax),%rax
  ba:	48 85 c0             	test   %rax,%rax
  bd:	75 18                	jne    d7 <_ZNK5QHashI7QStringiE8findNodeERKS0_Pj+0xd7>
  bf:	ba be 03 00 00       	mov    $0x3be,%edx
  c4:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # cb <_ZNK5QHashI7QStringiE8findNodeERKS0_Pj+0xcb>
  cb:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # d2 <_ZNK5QHashI7QStringiE8findNodeERKS0_Pj+0xd2>
  d2:	e8 00 00 00 00       	callq  d7 <_ZNK5QHashI7QStringiE8findNodeERKS0_Pj+0xd7>
    this->Sem.insert("ashr",        0x04);
  d7:	e8 00 00 00 00       	callq  dc <_ZNK5QHashI7QStringiE8findNodeERKS0_Pj+0xdc>
  dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  e0:	48 8b 10             	mov    (%rax),%rdx
  e3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  e7:	48 8b 00             	mov    (%rax),%rax
  ea:	48 39 c2             	cmp    %rax,%rdx
  ed:	74 26                	je     115 <_ZNK5QHashI7QStringiE8findNodeERKS0_Pj+0x115>
  ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  f3:	48 8b 00             	mov    (%rax),%rax
  f6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  fa:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  fd:	89 ce                	mov    %ecx,%esi
  ff:	48 89 c7             	mov    %rax,%rdi
 102:	e8 00 00 00 00       	callq  107 <_ZNK5QHashI7QStringiE8findNodeERKS0_Pj+0x107>
 107:	83 f0 01             	xor    $0x1,%eax
 10a:	84 c0                	test   %al,%al
 10c:	74 07                	je     115 <_ZNK5QHashI7QStringiE8findNodeERKS0_Pj+0x115>
 10e:	b8 01 00 00 00       	mov    $0x1,%eax
    this->Sem.insert("iif",         0x05);
 113:	eb 05                	jmp    11a <_ZNK5QHashI7QStringiE8findNodeERKS0_Pj+0x11a>
 115:	b8 00 00 00 00       	mov    $0x0,%eax
 11a:	84 c0                	test   %al,%al
 11c:	74 15                	je     133 <_ZNK5QHashI7QStringiE8findNodeERKS0_Pj+0x133>
 11e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 122:	48 8b 00             	mov    (%rax),%rax
 125:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 129:	eb b1                	jmp    dc <_ZNK5QHashI7QStringiE8findNodeERKS0_Pj+0xdc>
 12b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 12f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 133:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 137:	c9                   	leaveq 
 138:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringiE10createNodeEjRKS0_RKiPP9QHashNodeIS0_iE:

0000000000000000 <_ZN5QHashI7QStringiE10createNodeEjRKS0_RKiPP9QHashNodeIS0_iE>:
#include "sems.h"

void Sems::semsInitDefault()
{
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 48          	sub    $0x48,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  14:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  18:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
    this->Sem.insert("rotl",        0x01);
  1c:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
  20:	e8 00 00 00 00       	callq  25 <_ZN5QHashI7QStringiE10createNodeEjRKS0_RKiPP9QHashNodeIS0_iE+0x25>
  25:	89 c2                	mov    %eax,%edx
  27:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	89 d6                	mov    %edx,%esi
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZN5QHashI7QStringiE10createNodeEjRKS0_RKiPP9QHashNodeIS0_iE+0x38>
  38:	49 89 c4             	mov    %rax,%r12
  3b:	4c 89 e6             	mov    %r12,%rsi
  3e:	bf 20 00 00 00       	mov    $0x20,%edi
  43:	e8 00 00 00 00       	callq  48 <_ZN5QHashI7QStringiE10createNodeEjRKS0_RKiPP9QHashNodeIS0_iE+0x48>
  48:	48 89 c3             	mov    %rax,%rbx
  4b:	48 85 db             	test   %rbx,%rbx
  4e:	74 25                	je     75 <_ZN5QHashI7QStringiE10createNodeEjRKS0_RKiPP9QHashNodeIS0_iE+0x75>
  50:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  54:	48 8b 30             	mov    (%rax),%rsi
  57:	8b 4d c4             	mov    -0x3c(%rbp),%ecx
    this->Sem.insert("rotr",        0x02);
  5a:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  5e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  62:	49 89 f0             	mov    %rsi,%r8
  65:	48 89 c6             	mov    %rax,%rsi
  68:	48 89 df             	mov    %rbx,%rdi
  6b:	e8 00 00 00 00       	callq  70 <_ZN5QHashI7QStringiE10createNodeEjRKS0_RKiPP9QHashNodeIS0_iE+0x70>
  70:	48 89 d8             	mov    %rbx,%rax
  73:	eb 03                	jmp    78 <_ZN5QHashI7QStringiE10createNodeEjRKS0_RKiPP9QHashNodeIS0_iE+0x78>
  75:	48 89 d8             	mov    %rbx,%rax
  78:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  7c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  84:	48 89 10             	mov    %rdx,(%rax)
  87:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8b:	48 8b 00             	mov    (%rax),%rax
  8e:	8b 50 14             	mov    0x14(%rax),%edx
  91:	83 c2 01             	add    $0x1,%edx
  94:	89 50 14             	mov    %edx,0x14(%rax)
    this->Sem.insert("ashl",        0x03);
  97:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  9b:	eb 19                	jmp    b6 <_ZN5QHashI7QStringiE10createNodeEjRKS0_RKiPP9QHashNodeIS0_iE+0xb6>
  9d:	49 89 c5             	mov    %rax,%r13
  a0:	4c 89 e6             	mov    %r12,%rsi
  a3:	48 89 df             	mov    %rbx,%rdi
  a6:	e8 00 00 00 00       	callq  ab <_ZN5QHashI7QStringiE10createNodeEjRKS0_RKiPP9QHashNodeIS0_iE+0xab>
  ab:	4c 89 e8             	mov    %r13,%rax
  ae:	48 89 c7             	mov    %rax,%rdi
  b1:	e8 00 00 00 00       	callq  b6 <_ZN5QHashI7QStringiE10createNodeEjRKS0_RKiPP9QHashNodeIS0_iE+0xb6>
  b6:	48 83 c4 48          	add    $0x48,%rsp
  ba:	5b                   	pop    %rbx
  bb:	41 5c                	pop    %r12
  bd:	41 5d                	pop    %r13
  bf:	5d                   	pop    %rbp
  c0:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringiE8iteratorC2EPv:

0000000000000000 <_ZN5QHashI7QStringiE8iteratorC1EPv>:
#include "sems.h"

void Sems::semsInitDefault()
{
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  14:	48 89 10             	mov    %rdx,(%rax)
  17:	90                   	nop
  18:	5d                   	pop    %rbp
  19:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringiE8freeDataEP9QHashData:

0000000000000000 <_ZN5QHashI7QStringiE8freeDataEP9QHashData>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 1b <_ZN5QHashI7QStringiE8freeDataEP9QHashData+0x1b>
  1b:	48 89 d6             	mov    %rdx,%rsi
    this->Sem.insert("rotl",        0x01);
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZN5QHashI7QStringiE8freeDataEP9QHashData+0x26>
  26:	90                   	nop
  27:	c9                   	leaveq 
  28:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringiE8concreteEPN9QHashData4NodeE:

0000000000000000 <_ZN5QHashI7QStringiE8concreteEPN9QHashData4NodeE>:
#include "sems.h"

void Sems::semsInitDefault()
{
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
   c:	5d                   	pop    %rbp
   d:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringiE13detach_helperEv:

0000000000000000 <_ZN5QHashI7QStringiE13detach_helperEv>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	e8 00 00 00 00       	callq  11 <_ZN5QHashI7QStringiE13detach_helperEv+0x11>
  11:	89 c1                	mov    %eax,%ecx
  13:	ba 20 00 00 00       	mov    $0x20,%edx
  18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    this->Sem.insert("rotl",        0x01);
  1c:	48 8b 00             	mov    (%rax),%rax
  1f:	41 89 c8             	mov    %ecx,%r8d
  22:	89 d1                	mov    %edx,%ecx
  24:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 2b <_ZN5QHashI7QStringiE13detach_helperEv+0x2b>
  2b:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 32 <_ZN5QHashI7QStringiE13detach_helperEv+0x32>
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZN5QHashI7QStringiE13detach_helperEv+0x3a>
  3a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  42:	48 8b 00             	mov    (%rax),%rax
  45:	48 83 c0 10          	add    $0x10,%rax
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN5QHashI7QStringiE13detach_helperEv+0x51>
  51:	83 f0 01             	xor    $0x1,%eax
  54:	84 c0                	test   %al,%al
  56:	74 16                	je     6e <_ZN5QHashI7QStringiE13detach_helperEv+0x6e>
  58:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    this->Sem.insert("rotr",        0x02);
  5c:	48 8b 10             	mov    (%rax),%rdx
  5f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  63:	48 89 d6             	mov    %rdx,%rsi
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZN5QHashI7QStringiE13detach_helperEv+0x6e>
  6e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  72:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  76:	48 89 10             	mov    %rdx,(%rax)
  79:	90                   	nop
  7a:	c9                   	leaveq 
  7b:	c3                   	retq   

Дизассемблирование раздела .text._ZNK9QHashNodeI7QStringiE8same_keyEjRKS0_:

0000000000000000 <_ZNK9QHashNodeI7QStringiE8same_keyEjRKS0_>:
#include "sems.h"

void Sems::semsInitDefault()
{
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	8b 40 08             	mov    0x8(%rax),%eax
  1a:	3b 45 f4             	cmp    -0xc(%rbp),%eax
    this->Sem.insert("rotl",        0x01);
  1d:	75 22                	jne    41 <_ZNK9QHashNodeI7QStringiE8same_keyEjRKS0_+0x41>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 8d 50 10          	lea    0x10(%rax),%rdx
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2b:	48 89 d6             	mov    %rdx,%rsi
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZNK9QHashNodeI7QStringiE8same_keyEjRKS0_+0x36>
  36:	84 c0                	test   %al,%al
  38:	74 07                	je     41 <_ZNK9QHashNodeI7QStringiE8same_keyEjRKS0_+0x41>
  3a:	b8 01 00 00 00       	mov    $0x1,%eax
  3f:	eb 05                	jmp    46 <_ZNK9QHashNodeI7QStringiE8same_keyEjRKS0_+0x46>
  41:	b8 00 00 00 00       	mov    $0x0,%eax
  46:	c9                   	leaveq 
  47:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringiE11alignOfNodeEv:

0000000000000000 <_ZN5QHashI7QStringiE11alignOfNodeEv>:
#include "sems.h"

void Sems::semsInitDefault()
{
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
   f:	00 00 
  11:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  15:	31 c0                	xor    %eax,%eax
  17:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%rbp)
    this->Sem.insert("rotl",        0x01);
  1e:	b8 08 00 00 00       	mov    $0x8,%eax
  23:	89 45 f0             	mov    %eax,-0x10(%rbp)
  26:	48 8d 55 f4          	lea    -0xc(%rbp),%rdx
  2a:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  2e:	48 89 d6             	mov    %rdx,%rsi
  31:	48 89 c7             	mov    %rax,%rdi
  34:	e8 00 00 00 00       	callq  39 <_ZN5QHashI7QStringiE11alignOfNodeEv+0x39>
  39:	8b 00                	mov    (%rax),%eax
  3b:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  3f:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
  46:	00 00 
  48:	74 05                	je     4f <_ZN5QHashI7QStringiE11alignOfNodeEv+0x4f>
  4a:	e8 00 00 00 00       	callq  4f <_ZN5QHashI7QStringiE11alignOfNodeEv+0x4f>
  4f:	c9                   	leaveq 
  50:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashNodeI7QStringiEC2ERKS0_RKijPS1_:

0000000000000000 <_ZN9QHashNodeI7QStringiEC1ERKS0_RKijPS1_>:
#include "sems.h"

void Sems::semsInitDefault()
{
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  14:	89 4d e4             	mov    %ecx,-0x1c(%rbp)
  17:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)
  1b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    this->Sem.insert("rotl",        0x01);
  1f:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  23:	48 89 10             	mov    %rdx,(%rax)
  26:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2a:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  2d:	89 50 08             	mov    %edx,0x8(%rax)
  30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  34:	48 8d 50 10          	lea    0x10(%rax),%rdx
  38:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  3c:	48 89 c6             	mov    %rax,%rsi
  3f:	48 89 d7             	mov    %rdx,%rdi
  42:	e8 00 00 00 00       	callq  47 <_ZN9QHashNodeI7QStringiEC1ERKS0_RKijPS1_+0x47>
  47:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4b:	8b 10                	mov    (%rax),%edx
  4d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  51:	89 50 18             	mov    %edx,0x18(%rax)
  54:	90                   	nop
  55:	c9                   	leaveq 
  56:	c3                   	retq   

Дизассемблирование раздела .text._ZN9QHashNodeI7QStringiED2Ev:

0000000000000000 <_ZN9QHashNodeI7QStringiED1Ev>:
#include "sems.h"

void Sems::semsInitDefault()
{
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 83 c0 10          	add    $0x10,%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZN9QHashNodeI7QStringiED1Ev+0x1c>
    this->Sem.insert("rotl",        0x01);
  1c:	90                   	nop
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringiE11deleteNode2EPN9QHashData4NodeE:

0000000000000000 <_ZN5QHashI7QStringiE11deleteNode2EPN9QHashData4NodeE>:
#include "sems.h"

void Sems::semsInitDefault()
{
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 89 c7             	mov    %rax,%rdi
  13:	e8 00 00 00 00       	callq  18 <_ZN5QHashI7QStringiE11deleteNode2EPN9QHashData4NodeE+0x18>
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	callq  20 <_ZN5QHashI7QStringiE11deleteNode2EPN9QHashData4NodeE+0x20>
    this->Sem.insert("rotl",        0x01);
  20:	90                   	nop
  21:	c9                   	leaveq 
  22:	c3                   	retq   

Дизассемблирование раздела .text._ZN5QHashI7QStringiE13duplicateNodeEPN9QHashData4NodeEPv:

0000000000000000 <_ZN5QHashI7QStringiE13duplicateNodeEPN9QHashData4NodeEPv>:
#include "sems.h"

void Sems::semsInitDefault()
{
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 28          	sub    $0x28,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  15:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
    this->Sem.insert("rotl",        0x01);
  1c:	e8 00 00 00 00       	callq  21 <_ZN5QHashI7QStringiE13duplicateNodeEPN9QHashData4NodeEPv+0x21>
  21:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  25:	4c 8b 65 c0          	mov    -0x40(%rbp),%r12
  29:	4c 89 e6             	mov    %r12,%rsi
  2c:	bf 20 00 00 00       	mov    $0x20,%edi
  31:	e8 00 00 00 00       	callq  36 <_ZN5QHashI7QStringiE13duplicateNodeEPN9QHashData4NodeEPv+0x36>
  36:	48 89 c3             	mov    %rax,%rbx
  39:	48 85 db             	test   %rbx,%rbx
  3c:	74 42                	je     80 <_ZN5QHashI7QStringiE13duplicateNodeEPN9QHashData4NodeEPv+0x80>
  3e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  42:	8b 40 08             	mov    0x8(%rax),%eax
  45:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  49:	48 83 c2 18          	add    $0x18,%rdx
  4d:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  51:	48 8d 71 10          	lea    0x10(%rcx),%rsi
  55:	41 b8 00 00 00 00    	mov    $0x0,%r8d
    this->Sem.insert("rotr",        0x02);
  5b:	89 c1                	mov    %eax,%ecx
  5d:	48 89 df             	mov    %rbx,%rdi
  60:	e8 00 00 00 00       	callq  65 <_ZN5QHashI7QStringiE13duplicateNodeEPN9QHashData4NodeEPv+0x65>
  65:	eb 19                	jmp    80 <_ZN5QHashI7QStringiE13duplicateNodeEPN9QHashData4NodeEPv+0x80>
  67:	49 89 c5             	mov    %rax,%r13
  6a:	4c 89 e6             	mov    %r12,%rsi
  6d:	48 89 df             	mov    %rbx,%rdi
  70:	e8 00 00 00 00       	callq  75 <_ZN5QHashI7QStringiE13duplicateNodeEPN9QHashData4NodeEPv+0x75>
  75:	4c 89 e8             	mov    %r13,%rax
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	callq  80 <_ZN5QHashI7QStringiE13duplicateNodeEPN9QHashData4NodeEPv+0x80>
  80:	90                   	nop
  81:	48 83 c4 28          	add    $0x28,%rsp
  85:	5b                   	pop    %rbx
  86:	41 5c                	pop    %r12
  88:	41 5d                	pop    %r13
  8a:	5d                   	pop    %rbp
  8b:	c3                   	retq   
